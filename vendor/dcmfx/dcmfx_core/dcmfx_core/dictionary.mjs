/// <reference types="./dictionary.d.mts" />
import * as $bool from "../../gleam_stdlib/gleam/bool.mjs";
import * as $int from "../../gleam_stdlib/gleam/int.mjs";
import * as $option from "../../gleam_stdlib/gleam/option.mjs";
import { None, Some } from "../../gleam_stdlib/gleam/option.mjs";
import * as $data_element_tag from "../dcmfx_core/data_element_tag.mjs";
import { DataElementTag } from "../dcmfx_core/data_element_tag.mjs";
import * as $value_multiplicity from "../dcmfx_core/value_multiplicity.mjs";
import { ValueMultiplicity } from "../dcmfx_core/value_multiplicity.mjs";
import * as $value_representation from "../dcmfx_core/value_representation.mjs";
import {
  AgeString,
  ApplicationEntity,
  AttributeTag,
  CodeString,
  Date,
  DateTime,
  DecimalString,
  FloatingPointDouble,
  FloatingPointSingle,
  IntegerString,
  LongString,
  LongText,
  OtherByteString,
  OtherDoubleString,
  OtherFloatString,
  OtherLongString,
  OtherVeryLongString,
  OtherWordString,
  PersonName,
  Sequence,
  ShortString,
  ShortText,
  SignedLong,
  SignedShort,
  SignedVeryLong,
  Time,
  UniqueIdentifier,
  UniversalResourceIdentifier,
  Unknown,
  UnlimitedCharacters,
  UnlimitedText,
  UnsignedLong,
  UnsignedShort,
  UnsignedVeryLong,
} from "../dcmfx_core/value_representation.mjs";
import { Ok, Error, toList, CustomType as $CustomType, remainderInt, isEqual } from "../gleam.mjs";

export class Item extends $CustomType {
  constructor(tag, name, vrs, multiplicity) {
    super();
    this.tag = tag;
    this.name = name;
    this.vrs = vrs;
    this.multiplicity = multiplicity;
  }
}

export function uid_name(uid) {
  if (uid === "1.2.840.10008.1.1") {
    return new Ok("Verification SOP Class");
  } else if (uid === "1.2.840.10008.1.2") {
    return new Ok("Implicit VR Little Endian");
  } else if (uid === "1.2.840.10008.1.2.1") {
    return new Ok("Explicit VR Little Endian");
  } else if (uid === "1.2.840.10008.1.2.1.98") {
    return new Ok("Encapsulated Uncompressed Explicit VR Little Endian");
  } else if (uid === "1.2.840.10008.1.2.1.99") {
    return new Ok("Deflated Explicit VR Little Endian");
  } else if (uid === "1.2.840.10008.1.2.2") {
    return new Ok("Explicit VR Big Endian");
  } else if (uid === "1.2.840.10008.1.2.4.100") {
    return new Ok("MPEG2 Main Profile / Main Level");
  } else if (uid === "1.2.840.10008.1.2.4.100.1") {
    return new Ok("Fragmentable MPEG2 Main Profile / Main Level");
  } else if (uid === "1.2.840.10008.1.2.4.101") {
    return new Ok("MPEG2 Main Profile / High Level");
  } else if (uid === "1.2.840.10008.1.2.4.101.1") {
    return new Ok("Fragmentable MPEG2 Main Profile / High Level");
  } else if (uid === "1.2.840.10008.1.2.4.102") {
    return new Ok("MPEG-4 AVC/H.264 High Profile / Level 4.1");
  } else if (uid === "1.2.840.10008.1.2.4.102.1") {
    return new Ok("Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.1");
  } else if (uid === "1.2.840.10008.1.2.4.103") {
    return new Ok("MPEG-4 AVC/H.264 BD-compatible High Profile / Level 4.1");
  } else if (uid === "1.2.840.10008.1.2.4.103.1") {
    return new Ok(
      "Fragmentable MPEG-4 AVC/H.264 BD-compatible High Profile / Level 4.1",
    );
  } else if (uid === "1.2.840.10008.1.2.4.104") {
    return new Ok("MPEG-4 AVC/H.264 High Profile / Level 4.2 For 2D Video");
  } else if (uid === "1.2.840.10008.1.2.4.104.1") {
    return new Ok(
      "Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.2 For 2D Video",
    );
  } else if (uid === "1.2.840.10008.1.2.4.105") {
    return new Ok("MPEG-4 AVC/H.264 High Profile / Level 4.2 For 3D Video");
  } else if (uid === "1.2.840.10008.1.2.4.105.1") {
    return new Ok(
      "Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.2 For 3D Video",
    );
  } else if (uid === "1.2.840.10008.1.2.4.106") {
    return new Ok("MPEG-4 AVC/H.264 Stereo High Profile / Level 4.2");
  } else if (uid === "1.2.840.10008.1.2.4.106.1") {
    return new Ok(
      "Fragmentable MPEG-4 AVC/H.264 Stereo High Profile / Level 4.2",
    );
  } else if (uid === "1.2.840.10008.1.2.4.107") {
    return new Ok("HEVC/H.265 Main Profile / Level 5.1");
  } else if (uid === "1.2.840.10008.1.2.4.108") {
    return new Ok("HEVC/H.265 Main 10 Profile / Level 5.1");
  } else if (uid === "1.2.840.10008.1.2.4.201") {
    return new Ok("High-Throughput JPEG 2000 Image Compression (Lossless Only)");
  } else if (uid === "1.2.840.10008.1.2.4.202") {
    return new Ok(
      "High-Throughput JPEG 2000 with RPCL Options Image Compression (Lossless Only)",
    );
  } else if (uid === "1.2.840.10008.1.2.4.203") {
    return new Ok("High-Throughput JPEG 2000 Image Compression");
  } else if (uid === "1.2.840.10008.1.2.4.204") {
    return new Ok("JPIP HTJ2K Referenced");
  } else if (uid === "1.2.840.10008.1.2.4.205") {
    return new Ok("JPIP HTJ2K Referenced Deflate");
  } else if (uid === "1.2.840.10008.1.2.4.50") {
    return new Ok("JPEG Baseline (Process 1)");
  } else if (uid === "1.2.840.10008.1.2.4.51") {
    return new Ok("JPEG Extended (Process 2 and 4)");
  } else if (uid === "1.2.840.10008.1.2.4.52") {
    return new Ok("JPEG Extended (Process 3 and 5)");
  } else if (uid === "1.2.840.10008.1.2.4.53") {
    return new Ok("JPEG Spectral Selection, Non-Hierarchical (Process 6 and 8)");
  } else if (uid === "1.2.840.10008.1.2.4.54") {
    return new Ok("JPEG Spectral Selection, Non-Hierarchical (Process 7 and 9)");
  } else if (uid === "1.2.840.10008.1.2.4.55") {
    return new Ok("JPEG Full Progression, Non-Hierarchical (Process 10 and 12)");
  } else if (uid === "1.2.840.10008.1.2.4.56") {
    return new Ok("JPEG Full Progression, Non-Hierarchical (Process 11 and 13)");
  } else if (uid === "1.2.840.10008.1.2.4.57") {
    return new Ok("JPEG Lossless, Non-Hierarchical (Process 14)");
  } else if (uid === "1.2.840.10008.1.2.4.58") {
    return new Ok("JPEG Lossless, Non-Hierarchical (Process 15)");
  } else if (uid === "1.2.840.10008.1.2.4.59") {
    return new Ok("JPEG Extended, Hierarchical (Process 16 and 18)");
  } else if (uid === "1.2.840.10008.1.2.4.60") {
    return new Ok("JPEG Extended, Hierarchical (Process 17 and 19)");
  } else if (uid === "1.2.840.10008.1.2.4.61") {
    return new Ok("JPEG Spectral Selection, Hierarchical (Process 20 and 22)");
  } else if (uid === "1.2.840.10008.1.2.4.62") {
    return new Ok("JPEG Spectral Selection, Hierarchical (Process 21 and 23)");
  } else if (uid === "1.2.840.10008.1.2.4.63") {
    return new Ok("JPEG Full Progression, Hierarchical (Process 24 and 26)");
  } else if (uid === "1.2.840.10008.1.2.4.64") {
    return new Ok("JPEG Full Progression, Hierarchical (Process 25 and 27)");
  } else if (uid === "1.2.840.10008.1.2.4.65") {
    return new Ok("JPEG Lossless, Hierarchical (Process 28)");
  } else if (uid === "1.2.840.10008.1.2.4.66") {
    return new Ok("JPEG Lossless, Hierarchical (Process 29)");
  } else if (uid === "1.2.840.10008.1.2.4.70") {
    return new Ok(
      "JPEG Lossless, Non-Hierarchical, First-Order Prediction (Process 14 [Selection Value 1])",
    );
  } else if (uid === "1.2.840.10008.1.2.4.80") {
    return new Ok("JPEG-LS Lossless Image Compression");
  } else if (uid === "1.2.840.10008.1.2.4.81") {
    return new Ok("JPEG-LS Lossy (Near-Lossless) Image Compression");
  } else if (uid === "1.2.840.10008.1.2.4.90") {
    return new Ok("JPEG 2000 Image Compression (Lossless Only)");
  } else if (uid === "1.2.840.10008.1.2.4.91") {
    return new Ok("JPEG 2000 Image Compression");
  } else if (uid === "1.2.840.10008.1.2.4.92") {
    return new Ok(
      "JPEG 2000 Part 2 Multi-component Image Compression (Lossless Only)",
    );
  } else if (uid === "1.2.840.10008.1.2.4.93") {
    return new Ok("JPEG 2000 Part 2 Multi-component Image Compression");
  } else if (uid === "1.2.840.10008.1.2.4.94") {
    return new Ok("JPIP Referenced");
  } else if (uid === "1.2.840.10008.1.2.4.95") {
    return new Ok("JPIP Referenced Deflate");
  } else if (uid === "1.2.840.10008.1.2.5") {
    return new Ok("RLE Lossless");
  } else if (uid === "1.2.840.10008.1.2.6.1") {
    return new Ok("RFC 2557 MIME encapsulation");
  } else if (uid === "1.2.840.10008.1.2.6.2") {
    return new Ok("XML Encoding");
  } else if (uid === "1.2.840.10008.1.2.7.1") {
    return new Ok("SMPTE ST 2110-20 Uncompressed Progressive Active Video");
  } else if (uid === "1.2.840.10008.1.2.7.2") {
    return new Ok("SMPTE ST 2110-20 Uncompressed Interlaced Active Video");
  } else if (uid === "1.2.840.10008.1.2.7.3") {
    return new Ok("SMPTE ST 2110-30 PCM Digital Audio");
  } else if (uid === "1.2.840.10008.1.20") {
    return new Ok("Papyrus 3 Implicit VR Little Endian");
  } else if (uid === "1.2.840.10008.1.20.1") {
    return new Ok("Storage Commitment Push Model SOP Class");
  } else if (uid === "1.2.840.10008.1.20.1.1") {
    return new Ok("Storage Commitment Push Model SOP Instance");
  } else if (uid === "1.2.840.10008.1.20.2") {
    return new Ok("Storage Commitment Pull Model SOP Class");
  } else if (uid === "1.2.840.10008.1.20.2.1") {
    return new Ok("Storage Commitment Pull Model SOP Instance");
  } else if (uid === "1.2.840.10008.1.3.10") {
    return new Ok("Media Storage Directory Storage");
  } else if (uid === "1.2.840.10008.1.4.1.1") {
    return new Ok("Talairach Brain Atlas Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.10") {
    return new Ok("SPM2 GRAY Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.11") {
    return new Ok("SPM2 WHITE Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.12") {
    return new Ok("SPM2 CSF Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.13") {
    return new Ok("SPM2 BRAINMASK Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.14") {
    return new Ok("SPM2 AVG305T1 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.15") {
    return new Ok("SPM2 AVG152T1 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.16") {
    return new Ok("SPM2 AVG152T2 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.17") {
    return new Ok("SPM2 AVG152PD Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.18") {
    return new Ok("SPM2 SINGLESUBJT1 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.2") {
    return new Ok("SPM2 T1 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.3") {
    return new Ok("SPM2 T2 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.4") {
    return new Ok("SPM2 PD Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.5") {
    return new Ok("SPM2 EPI Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.6") {
    return new Ok("SPM2 FIL T1 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.7") {
    return new Ok("SPM2 PET Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.8") {
    return new Ok("SPM2 TRANSM Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.1.9") {
    return new Ok("SPM2 SPECT Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.2.1") {
    return new Ok("ICBM 452 T1 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.2.2") {
    return new Ok("ICBM Single Subject MRI Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.3.1") {
    return new Ok("IEC 61217 Fixed Coordinate System Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.3.2") {
    return new Ok("Standard Robotic-Arm Coordinate System Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.3.3") {
    return new Ok("IEC 61217 Table Top Coordinate System Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.4.1") {
    return new Ok("SRI24 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.5.1") {
    return new Ok("Colin27 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.6.1") {
    return new Ok("LPBA40/AIR Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.6.2") {
    return new Ok("LPBA40/FLIRT Frame of Reference");
  } else if (uid === "1.2.840.10008.1.4.6.3") {
    return new Ok("LPBA40/SPM5 Frame of Reference");
  } else if (uid === "1.2.840.10008.1.40") {
    return new Ok("Procedural Event Logging SOP Class");
  } else if (uid === "1.2.840.10008.1.40.1") {
    return new Ok("Procedural Event Logging SOP Instance");
  } else if (uid === "1.2.840.10008.1.42") {
    return new Ok("Substance Administration Logging SOP Class");
  } else if (uid === "1.2.840.10008.1.42.1") {
    return new Ok("Substance Administration Logging SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.1") {
    return new Ok("Hot Iron Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.2") {
    return new Ok("PET Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.3") {
    return new Ok("Hot Metal Blue Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.4") {
    return new Ok("PET 20 Step Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.5") {
    return new Ok("Spring Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.6") {
    return new Ok("Summer Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.7") {
    return new Ok("Fall Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.5.8") {
    return new Ok("Winter Color Palette SOP Instance");
  } else if (uid === "1.2.840.10008.1.9") {
    return new Ok("Basic Study Content Notification SOP Class");
  } else if (uid === "1.2.840.10008.10.1") {
    return new Ok("Video Endoscopic Image Real-Time Communication");
  } else if (uid === "1.2.840.10008.10.2") {
    return new Ok("Video Photographic Image Real-Time Communication");
  } else if (uid === "1.2.840.10008.10.3") {
    return new Ok("Audio Waveform Real-Time Communication");
  } else if (uid === "1.2.840.10008.10.4") {
    return new Ok("Rendition Selection Document Real-Time Communication");
  } else if (uid === "1.2.840.10008.15.0.3.1") {
    return new Ok("dicomDeviceName");
  } else if (uid === "1.2.840.10008.15.0.3.10") {
    return new Ok("dicomAssociationInitiator");
  } else if (uid === "1.2.840.10008.15.0.3.11") {
    return new Ok("dicomAssociationAcceptor");
  } else if (uid === "1.2.840.10008.15.0.3.12") {
    return new Ok("dicomHostname");
  } else if (uid === "1.2.840.10008.15.0.3.13") {
    return new Ok("dicomPort");
  } else if (uid === "1.2.840.10008.15.0.3.14") {
    return new Ok("dicomSOPClass");
  } else if (uid === "1.2.840.10008.15.0.3.15") {
    return new Ok("dicomTransferRole");
  } else if (uid === "1.2.840.10008.15.0.3.16") {
    return new Ok("dicomTransferSyntax");
  } else if (uid === "1.2.840.10008.15.0.3.17") {
    return new Ok("dicomPrimaryDeviceType");
  } else if (uid === "1.2.840.10008.15.0.3.18") {
    return new Ok("dicomRelatedDeviceReference");
  } else if (uid === "1.2.840.10008.15.0.3.19") {
    return new Ok("dicomPreferredCalledAETitle");
  } else if (uid === "1.2.840.10008.15.0.3.2") {
    return new Ok("dicomDescription");
  } else if (uid === "1.2.840.10008.15.0.3.20") {
    return new Ok("dicomTLSCyphersuite");
  } else if (uid === "1.2.840.10008.15.0.3.21") {
    return new Ok("dicomAuthorizedNodeCertificateReference");
  } else if (uid === "1.2.840.10008.15.0.3.22") {
    return new Ok("dicomThisNodeCertificateReference");
  } else if (uid === "1.2.840.10008.15.0.3.23") {
    return new Ok("dicomInstalled");
  } else if (uid === "1.2.840.10008.15.0.3.24") {
    return new Ok("dicomStationName");
  } else if (uid === "1.2.840.10008.15.0.3.25") {
    return new Ok("dicomDeviceSerialNumber");
  } else if (uid === "1.2.840.10008.15.0.3.26") {
    return new Ok("dicomInstitutionName");
  } else if (uid === "1.2.840.10008.15.0.3.27") {
    return new Ok("dicomInstitutionAddress");
  } else if (uid === "1.2.840.10008.15.0.3.28") {
    return new Ok("dicomInstitutionDepartmentName");
  } else if (uid === "1.2.840.10008.15.0.3.29") {
    return new Ok("dicomIssuerOfPatientID");
  } else if (uid === "1.2.840.10008.15.0.3.3") {
    return new Ok("dicomManufacturer");
  } else if (uid === "1.2.840.10008.15.0.3.30") {
    return new Ok("dicomPreferredCallingAETitle");
  } else if (uid === "1.2.840.10008.15.0.3.31") {
    return new Ok("dicomSupportedCharacterSet");
  } else if (uid === "1.2.840.10008.15.0.3.4") {
    return new Ok("dicomManufacturerModelName");
  } else if (uid === "1.2.840.10008.15.0.3.5") {
    return new Ok("dicomSoftwareVersion");
  } else if (uid === "1.2.840.10008.15.0.3.6") {
    return new Ok("dicomVendorData");
  } else if (uid === "1.2.840.10008.15.0.3.7") {
    return new Ok("dicomAETitle");
  } else if (uid === "1.2.840.10008.15.0.3.8") {
    return new Ok("dicomNetworkConnectionReference");
  } else if (uid === "1.2.840.10008.15.0.3.9") {
    return new Ok("dicomApplicationCluster");
  } else if (uid === "1.2.840.10008.15.0.4.1") {
    return new Ok("dicomConfigurationRoot");
  } else if (uid === "1.2.840.10008.15.0.4.2") {
    return new Ok("dicomDevicesRoot");
  } else if (uid === "1.2.840.10008.15.0.4.3") {
    return new Ok("dicomUniqueAETitlesRegistryRoot");
  } else if (uid === "1.2.840.10008.15.0.4.4") {
    return new Ok("dicomDevice");
  } else if (uid === "1.2.840.10008.15.0.4.5") {
    return new Ok("dicomNetworkAE");
  } else if (uid === "1.2.840.10008.15.0.4.6") {
    return new Ok("dicomNetworkConnection");
  } else if (uid === "1.2.840.10008.15.0.4.7") {
    return new Ok("dicomUniqueAETitle");
  } else if (uid === "1.2.840.10008.15.0.4.8") {
    return new Ok("dicomTransferCapability");
  } else if (uid === "1.2.840.10008.15.1.1") {
    return new Ok("Universal Coordinated Time");
  } else if (uid === "1.2.840.10008.2.16.10") {
    return new Ok("Dublin Core");
  } else if (uid === "1.2.840.10008.2.16.11") {
    return new Ok("New York University Melanoma Clinical Cooperative Group");
  } else if (uid === "1.2.840.10008.2.16.12") {
    return new Ok(
      "Mayo Clinic Non-radiological Images Specific Body Structure Anatomical Surface Region Guide",
    );
  } else if (uid === "1.2.840.10008.2.16.13") {
    return new Ok("Image Biomarker Standardisation Initiative");
  } else if (uid === "1.2.840.10008.2.16.14") {
    return new Ok("Radiomics Ontology");
  } else if (uid === "1.2.840.10008.2.16.15") {
    return new Ok("RadElement");
  } else if (uid === "1.2.840.10008.2.16.16") {
    return new Ok("ICD-11");
  } else if (uid === "1.2.840.10008.2.16.17") {
    return new Ok("Unified numbering system (UNS) for metals and alloys");
  } else if (uid === "1.2.840.10008.2.16.18") {
    return new Ok("Research Resource Identification");
  } else if (uid === "1.2.840.10008.2.16.4") {
    return new Ok("DICOM Controlled Terminology");
  } else if (uid === "1.2.840.10008.2.16.5") {
    return new Ok("Adult Mouse Anatomy Ontology");
  } else if (uid === "1.2.840.10008.2.16.6") {
    return new Ok("Uberon Ontology");
  } else if (uid === "1.2.840.10008.2.16.7") {
    return new Ok(
      "Integrated Taxonomic Information System (ITIS) Taxonomic Serial Number (TSN)",
    );
  } else if (uid === "1.2.840.10008.2.16.8") {
    return new Ok("Mouse Genome Initiative (MGI)");
  } else if (uid === "1.2.840.10008.2.16.9") {
    return new Ok("PubChem Compound CID");
  } else if (uid === "1.2.840.10008.2.6.1") {
    return new Ok("DICOM UID Registry");
  } else if (uid === "1.2.840.10008.3.1.1.1") {
    return new Ok("DICOM Application Context Name");
  } else if (uid === "1.2.840.10008.3.1.2.1.1") {
    return new Ok("Detached Patient Management SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.1.4") {
    return new Ok("Detached Patient Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.2.1") {
    return new Ok("Detached Visit Management SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.3.1") {
    return new Ok("Detached Study Management SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.3.2") {
    return new Ok("Study Component Management SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.3.3") {
    return new Ok("Modality Performed Procedure Step SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.3.4") {
    return new Ok("Modality Performed Procedure Step Retrieve SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.3.5") {
    return new Ok("Modality Performed Procedure Step Notification SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.5.1") {
    return new Ok("Detached Results Management SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.5.4") {
    return new Ok("Detached Results Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.5.5") {
    return new Ok("Detached Study Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.3.1.2.6.1") {
    return new Ok("Detached Interpretation Management SOP Class");
  } else if (uid === "1.2.840.10008.4.2") {
    return new Ok("Storage Service Class");
  } else if (uid === "1.2.840.10008.5.1.1.1") {
    return new Ok("Basic Film Session SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.14") {
    return new Ok("Print Job SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.15") {
    return new Ok("Basic Annotation Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.16") {
    return new Ok("Printer SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.16.376") {
    return new Ok("Printer Configuration Retrieval SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.17") {
    return new Ok("Printer SOP Instance");
  } else if (uid === "1.2.840.10008.5.1.1.17.376") {
    return new Ok("Printer Configuration Retrieval SOP Instance");
  } else if (uid === "1.2.840.10008.5.1.1.18") {
    return new Ok("Basic Color Print Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.18.1") {
    return new Ok("Referenced Color Print Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.2") {
    return new Ok("Basic Film Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.22") {
    return new Ok("VOI LUT Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.23") {
    return new Ok("Presentation LUT SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.24") {
    return new Ok("Image Overlay Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.24.1") {
    return new Ok("Basic Print Image Overlay Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.25") {
    return new Ok("Print Queue SOP Instance");
  } else if (uid === "1.2.840.10008.5.1.1.26") {
    return new Ok("Print Queue Management SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.27") {
    return new Ok("Stored Print Storage SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.29") {
    return new Ok("Hardcopy Grayscale Image Storage SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.30") {
    return new Ok("Hardcopy Color Image Storage SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.31") {
    return new Ok("Pull Print Request SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.32") {
    return new Ok("Pull Stored Print Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.33") {
    return new Ok("Media Creation Management SOP Class UID");
  } else if (uid === "1.2.840.10008.5.1.1.4") {
    return new Ok("Basic Grayscale Image Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.4.1") {
    return new Ok("Basic Color Image Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.4.2") {
    return new Ok("Referenced Image Box SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.40") {
    return new Ok("Display System SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.40.1") {
    return new Ok("Display System SOP Instance");
  } else if (uid === "1.2.840.10008.5.1.1.9") {
    return new Ok("Basic Grayscale Print Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.5.1.1.9.1") {
    return new Ok("Referenced Grayscale Print Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.1") {
    return new Ok("Computed Radiography Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.1.1") {
    return new Ok("Digital X-Ray Image Storage - For Presentation");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.1.1.1") {
    return new Ok("Digital X-Ray Image Storage - For Processing");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.1.2") {
    return new Ok("Digital Mammography X-Ray Image Storage - For Presentation");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.1.2.1") {
    return new Ok("Digital Mammography X-Ray Image Storage - For Processing");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.1.3") {
    return new Ok("Digital Intra-Oral X-Ray Image Storage - For Presentation");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.1.3.1") {
    return new Ok("Digital Intra-Oral X-Ray Image Storage - For Processing");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.10") {
    return new Ok("Standalone Modality LUT Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.104.1") {
    return new Ok("Encapsulated PDF Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.104.2") {
    return new Ok("Encapsulated CDA Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.104.3") {
    return new Ok("Encapsulated STL Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.104.4") {
    return new Ok("Encapsulated OBJ Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.104.5") {
    return new Ok("Encapsulated MTL Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11") {
    return new Ok("Standalone VOI LUT Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.1") {
    return new Ok("Grayscale Softcopy Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.10") {
    return new Ok(
      "Segmented Volume Rendering Volumetric Presentation State Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.11") {
    return new Ok(
      "Multiple Volume Rendering Volumetric Presentation State Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.12") {
    return new Ok("Variable Modality LUT Softcopy Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.2") {
    return new Ok("Color Softcopy Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.3") {
    return new Ok("Pseudo-Color Softcopy Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.4") {
    return new Ok("Blending Softcopy Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.5") {
    return new Ok("XA/XRF Grayscale Softcopy Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.6") {
    return new Ok("Grayscale Planar MPR Volumetric Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.7") {
    return new Ok(
      "Compositing Planar MPR Volumetric Presentation State Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.8") {
    return new Ok("Advanced Blending Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.11.9") {
    return new Ok("Volume Rendering Volumetric Presentation State Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.12.1") {
    return new Ok("X-Ray Angiographic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.12.1.1") {
    return new Ok("Enhanced XA Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.12.2") {
    return new Ok("X-Ray Radiofluoroscopic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.12.2.1") {
    return new Ok("Enhanced XRF Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.12.3") {
    return new Ok("X-Ray Angiographic Bi-Plane Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.12.77") {
    return new Ok("");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.128") {
    return new Ok("Positron Emission Tomography Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.128.1") {
    return new Ok("Legacy Converted Enhanced PET Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.129") {
    return new Ok("Standalone PET Curve Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.13.1.1") {
    return new Ok("X-Ray 3D Angiographic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.13.1.2") {
    return new Ok("X-Ray 3D Craniofacial Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.13.1.3") {
    return new Ok("Breast Tomosynthesis Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.13.1.4") {
    return new Ok("Breast Projection X-Ray Image Storage - For Presentation");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.13.1.5") {
    return new Ok("Breast Projection X-Ray Image Storage - For Processing");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.130") {
    return new Ok("Enhanced PET Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.131") {
    return new Ok("Basic Structured Display Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.14.1") {
    return new Ok(
      "Intravascular Optical Coherence Tomography Image Storage - For Presentation",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.14.2") {
    return new Ok(
      "Intravascular Optical Coherence Tomography Image Storage - For Processing",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.2") {
    return new Ok("CT Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.2.1") {
    return new Ok("Enhanced CT Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.2.2") {
    return new Ok("Legacy Converted Enhanced CT Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.20") {
    return new Ok("Nuclear Medicine Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.1") {
    return new Ok("CT Defined Procedure Protocol Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.2") {
    return new Ok("CT Performed Procedure Protocol Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.3") {
    return new Ok("Protocol Approval Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.4") {
    return new Ok("Protocol Approval Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.5") {
    return new Ok("Protocol Approval Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.6") {
    return new Ok("Protocol Approval Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.7") {
    return new Ok("XA Defined Procedure Protocol Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.200.8") {
    return new Ok("XA Performed Procedure Protocol Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.201.1") {
    return new Ok("Inventory Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.201.1.1") {
    return new Ok("Storage Management SOP Instance");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.201.2") {
    return new Ok("Inventory - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.201.3") {
    return new Ok("Inventory - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.201.4") {
    return new Ok("Inventory - GET");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.201.5") {
    return new Ok("Inventory Creation");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.201.6") {
    return new Ok("Repository Query");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.3") {
    return new Ok("Ultrasound Multi-frame Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.3.1") {
    return new Ok("Ultrasound Multi-frame Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.30") {
    return new Ok("Parametric Map Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.4") {
    return new Ok("MR Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.4.1") {
    return new Ok("Enhanced MR Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.4.2") {
    return new Ok("MR Spectroscopy Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.4.3") {
    return new Ok("Enhanced MR Color Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.4.4") {
    return new Ok("Legacy Converted Enhanced MR Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.40") {
    return new Ok("");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.1") {
    return new Ok("RT Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.10") {
    return new Ok("RT Physician Intent Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.11") {
    return new Ok("RT Segment Annotation Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.12") {
    return new Ok("RT Radiation Set Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.13") {
    return new Ok("C-Arm Photon-Electron Radiation Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.14") {
    return new Ok("Tomotherapeutic Radiation Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.15") {
    return new Ok("Robotic-Arm Radiation Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.16") {
    return new Ok("RT Radiation Record Set Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.17") {
    return new Ok("RT Radiation Salvage Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.18") {
    return new Ok("Tomotherapeutic Radiation Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.19") {
    return new Ok("C-Arm Photon-Electron Radiation Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.2") {
    return new Ok("RT Dose Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.20") {
    return new Ok("Robotic Radiation Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.21") {
    return new Ok("RT Radiation Set Delivery Instruction Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.22") {
    return new Ok("RT Treatment Preparation Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.23") {
    return new Ok("Enhanced RT Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.24") {
    return new Ok("Enhanced Continuous RT Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.25") {
    return new Ok("RT Patient Position Acquisition Instruction Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.3") {
    return new Ok("RT Structure Set Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.4") {
    return new Ok("RT Beams Treatment Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.5") {
    return new Ok("RT Plan Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.6") {
    return new Ok("RT Brachy Treatment Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.7") {
    return new Ok("RT Treatment Summary Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.8") {
    return new Ok("RT Ion Plan Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.481.9") {
    return new Ok("RT Ion Beams Treatment Record Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.5") {
    return new Ok("Nuclear Medicine Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.501.1") {
    return new Ok("DICOS CT Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.501.2.1") {
    return new Ok("DICOS Digital X-Ray Image Storage - For Presentation");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.501.2.2") {
    return new Ok("DICOS Digital X-Ray Image Storage - For Processing");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.501.3") {
    return new Ok("DICOS Threat Detection Report Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.501.4") {
    return new Ok("DICOS 2D AIT Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.501.5") {
    return new Ok("DICOS 3D AIT Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.501.6") {
    return new Ok("DICOS Quadrupole Resonance (QR) Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.6") {
    return new Ok("Ultrasound Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.6.1") {
    return new Ok("Ultrasound Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.6.2") {
    return new Ok("Enhanced US Volume Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.6.3") {
    return new Ok("Photoacoustic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.601.1") {
    return new Ok("Eddy Current Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.601.2") {
    return new Ok("Eddy Current Multi-frame Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.66") {
    return new Ok("Raw Data Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.66.1") {
    return new Ok("Spatial Registration Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.66.2") {
    return new Ok("Spatial Fiducials Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.66.3") {
    return new Ok("Deformable Spatial Registration Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.66.4") {
    return new Ok("Segmentation Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.66.5") {
    return new Ok("Surface Segmentation Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.66.6") {
    return new Ok("Tractography Results Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.67") {
    return new Ok("Real World Value Mapping Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.68.1") {
    return new Ok("Surface Scan Mesh Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.68.2") {
    return new Ok("Surface Scan Point Cloud Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.7") {
    return new Ok("Secondary Capture Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.7.1") {
    return new Ok("Multi-frame Single Bit Secondary Capture Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.7.2") {
    return new Ok("Multi-frame Grayscale Byte Secondary Capture Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.7.3") {
    return new Ok("Multi-frame Grayscale Word Secondary Capture Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.7.4") {
    return new Ok("Multi-frame True Color Secondary Capture Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1") {
    return new Ok("VL Image Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.1") {
    return new Ok("VL Endoscopic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.1.1") {
    return new Ok("Video Endoscopic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.2") {
    return new Ok("VL Microscopic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.2.1") {
    return new Ok("Video Microscopic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.3") {
    return new Ok("VL Slide-Coordinates Microscopic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.4") {
    return new Ok("VL Photographic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.4.1") {
    return new Ok("Video Photographic Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.1") {
    return new Ok("Ophthalmic Photography 8 Bit Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.2") {
    return new Ok("Ophthalmic Photography 16 Bit Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.3") {
    return new Ok("Stereometric Relationship Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.4") {
    return new Ok("Ophthalmic Tomography Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.5") {
    return new Ok(
      "Wide Field Ophthalmic Photography Stereographic Projection Image Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.6") {
    return new Ok(
      "Wide Field Ophthalmic Photography 3D Coordinates Image Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.7") {
    return new Ok(
      "Ophthalmic Optical Coherence Tomography En Face Image Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.5.8") {
    return new Ok(
      "Ophthalmic Optical Coherence Tomography B-scan Volume Analysis Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.6") {
    return new Ok("VL Whole Slide Microscopy Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.7") {
    return new Ok("Dermoscopic Photography Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.8") {
    return new Ok("Confocal Microscopy Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.1.9") {
    return new Ok("Confocal Microscopy Tiled Pyramidal Image Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.77.2") {
    return new Ok("VL Multi-frame Image Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.1") {
    return new Ok("Lensometry Measurements Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.2") {
    return new Ok("Autorefraction Measurements Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.3") {
    return new Ok("Keratometry Measurements Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.4") {
    return new Ok("Subjective Refraction Measurements Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.5") {
    return new Ok("Visual Acuity Measurements Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.6") {
    return new Ok("Spectacle Prescription Report Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.7") {
    return new Ok("Ophthalmic Axial Measurements Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.78.8") {
    return new Ok("Intraocular Lens Calculations Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.79.1") {
    return new Ok("Macular Grid Thickness and Volume Report Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.8") {
    return new Ok("Standalone Overlay Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.80.1") {
    return new Ok(
      "Ophthalmic Visual Field Static Perimetry Measurements Storage",
    );
  } else if (uid === "1.2.840.10008.5.1.4.1.1.81.1") {
    return new Ok("Ophthalmic Thickness Map Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.82.1") {
    return new Ok("Corneal Topography Map Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.1") {
    return new Ok("Text SR Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.11") {
    return new Ok("Basic Text SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.2") {
    return new Ok("Audio SR Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.22") {
    return new Ok("Enhanced SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.3") {
    return new Ok("Detail SR Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.33") {
    return new Ok("Comprehensive SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.34") {
    return new Ok("Comprehensive 3D SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.35") {
    return new Ok("Extensible SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.4") {
    return new Ok("Comprehensive SR Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.40") {
    return new Ok("Procedure Log Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.50") {
    return new Ok("Mammography CAD SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.59") {
    return new Ok("Key Object Selection Document Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.65") {
    return new Ok("Chest CAD SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.67") {
    return new Ok("X-Ray Radiation Dose SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.68") {
    return new Ok("Radiopharmaceutical Radiation Dose SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.69") {
    return new Ok("Colon CAD SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.70") {
    return new Ok("Implantation Plan SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.71") {
    return new Ok("Acquisition Context SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.72") {
    return new Ok("Simplified Adult Echo SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.73") {
    return new Ok("Patient Radiation Dose SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.74") {
    return new Ok("Planned Imaging Agent Administration SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.75") {
    return new Ok("Performed Imaging Agent Administration SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.88.76") {
    return new Ok("Enhanced X-Ray Radiation Dose SR Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9") {
    return new Ok("Standalone Curve Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.1") {
    return new Ok("Waveform Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.1.1") {
    return new Ok("12-lead ECG Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.1.2") {
    return new Ok("General ECG Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.1.3") {
    return new Ok("Ambulatory ECG Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.1.4") {
    return new Ok("General 32-bit ECG Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.2.1") {
    return new Ok("Hemodynamic Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.3.1") {
    return new Ok("Cardiac Electrophysiology Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.4.1") {
    return new Ok("Basic Voice Audio Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.4.2") {
    return new Ok("General Audio Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.5.1") {
    return new Ok("Arterial Pulse Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.6.1") {
    return new Ok("Respiratory Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.6.2") {
    return new Ok("Multi-channel Respiratory Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.7.1") {
    return new Ok("Routine Scalp Electroencephalogram Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.7.2") {
    return new Ok("Electromyogram Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.7.3") {
    return new Ok("Electrooculogram Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.7.4") {
    return new Ok("Sleep Electroencephalogram Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.9.8.1") {
    return new Ok("Body Position Waveform Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.90.1") {
    return new Ok("Content Assessment Results Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.1.91.1") {
    return new Ok("Microscopy Bulk Simple Annotations Storage");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.1.1") {
    return new Ok("Patient Root Query/Retrieve Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.1.2") {
    return new Ok("Patient Root Query/Retrieve Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.1.3") {
    return new Ok("Patient Root Query/Retrieve Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.2.1") {
    return new Ok("Study Root Query/Retrieve Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.2.2") {
    return new Ok("Study Root Query/Retrieve Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.2.3") {
    return new Ok("Study Root Query/Retrieve Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.3.1") {
    return new Ok("Patient/Study Only Query/Retrieve Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.3.2") {
    return new Ok("Patient/Study Only Query/Retrieve Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.3.3") {
    return new Ok("Patient/Study Only Query/Retrieve Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.4.2") {
    return new Ok("Composite Instance Root Retrieve - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.4.3") {
    return new Ok("Composite Instance Root Retrieve - GET");
  } else if (uid === "1.2.840.10008.5.1.4.1.2.5.3") {
    return new Ok("Composite Instance Retrieve Without Bulk Data - GET");
  } else if (uid === "1.2.840.10008.5.1.4.20.1") {
    return new Ok("Defined Procedure Protocol Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.20.2") {
    return new Ok("Defined Procedure Protocol Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.20.3") {
    return new Ok("Defined Procedure Protocol Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.31") {
    return new Ok("Modality Worklist Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.32") {
    return new Ok("General Purpose Worklist Management Meta SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.32.1") {
    return new Ok("General Purpose Worklist Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.32.2") {
    return new Ok("General Purpose Scheduled Procedure Step SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.32.3") {
    return new Ok("General Purpose Performed Procedure Step SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.33") {
    return new Ok("Instance Availability Notification SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.34.1") {
    return new Ok("RT Beams Delivery Instruction Storage - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.10") {
    return new Ok("RT Brachy Application Setup Delivery Instruction Storage");
  } else if (uid === "1.2.840.10008.5.1.4.34.2") {
    return new Ok("RT Conventional Machine Verification - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.3") {
    return new Ok("RT Ion Machine Verification - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.4") {
    return new Ok("Unified Worklist and Procedure Step Service Class - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.4.1") {
    return new Ok("Unified Procedure Step - Push SOP Class - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.4.2") {
    return new Ok("Unified Procedure Step - Watch SOP Class - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.4.3") {
    return new Ok("Unified Procedure Step - Pull SOP Class - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.4.4") {
    return new Ok("Unified Procedure Step - Event SOP Class - Trial");
  } else if (uid === "1.2.840.10008.5.1.4.34.5") {
    return new Ok("UPS Global Subscription SOP Instance");
  } else if (uid === "1.2.840.10008.5.1.4.34.5.1") {
    return new Ok("UPS Filtered Global Subscription SOP Instance");
  } else if (uid === "1.2.840.10008.5.1.4.34.6") {
    return new Ok("Unified Worklist and Procedure Step Service Class");
  } else if (uid === "1.2.840.10008.5.1.4.34.6.1") {
    return new Ok("Unified Procedure Step - Push SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.34.6.2") {
    return new Ok("Unified Procedure Step - Watch SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.34.6.3") {
    return new Ok("Unified Procedure Step - Pull SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.34.6.4") {
    return new Ok("Unified Procedure Step - Event SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.34.6.5") {
    return new Ok("Unified Procedure Step - Query SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.34.7") {
    return new Ok("RT Beams Delivery Instruction Storage");
  } else if (uid === "1.2.840.10008.5.1.4.34.8") {
    return new Ok("RT Conventional Machine Verification");
  } else if (uid === "1.2.840.10008.5.1.4.34.9") {
    return new Ok("RT Ion Machine Verification");
  } else if (uid === "1.2.840.10008.5.1.4.37.1") {
    return new Ok("General Relevant Patient Information Query");
  } else if (uid === "1.2.840.10008.5.1.4.37.2") {
    return new Ok("Breast Imaging Relevant Patient Information Query");
  } else if (uid === "1.2.840.10008.5.1.4.37.3") {
    return new Ok("Cardiac Relevant Patient Information Query");
  } else if (uid === "1.2.840.10008.5.1.4.38.1") {
    return new Ok("Hanging Protocol Storage");
  } else if (uid === "1.2.840.10008.5.1.4.38.2") {
    return new Ok("Hanging Protocol Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.38.3") {
    return new Ok("Hanging Protocol Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.38.4") {
    return new Ok("Hanging Protocol Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.39.1") {
    return new Ok("Color Palette Storage");
  } else if (uid === "1.2.840.10008.5.1.4.39.2") {
    return new Ok("Color Palette Query/Retrieve Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.39.3") {
    return new Ok("Color Palette Query/Retrieve Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.39.4") {
    return new Ok("Color Palette Query/Retrieve Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.41") {
    return new Ok("Product Characteristics Query SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.42") {
    return new Ok("Substance Approval Query SOP Class");
  } else if (uid === "1.2.840.10008.5.1.4.43.1") {
    return new Ok("Generic Implant Template Storage");
  } else if (uid === "1.2.840.10008.5.1.4.43.2") {
    return new Ok("Generic Implant Template Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.43.3") {
    return new Ok("Generic Implant Template Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.43.4") {
    return new Ok("Generic Implant Template Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.44.1") {
    return new Ok("Implant Assembly Template Storage");
  } else if (uid === "1.2.840.10008.5.1.4.44.2") {
    return new Ok("Implant Assembly Template Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.44.3") {
    return new Ok("Implant Assembly Template Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.44.4") {
    return new Ok("Implant Assembly Template Information Model - GET");
  } else if (uid === "1.2.840.10008.5.1.4.45.1") {
    return new Ok("Implant Template Group Storage");
  } else if (uid === "1.2.840.10008.5.1.4.45.2") {
    return new Ok("Implant Template Group Information Model - FIND");
  } else if (uid === "1.2.840.10008.5.1.4.45.3") {
    return new Ok("Implant Template Group Information Model - MOVE");
  } else if (uid === "1.2.840.10008.5.1.4.45.4") {
    return new Ok("Implant Template Group Information Model - GET");
  } else if (uid === "1.2.840.10008.7.1.1") {
    return new Ok("Native DICOM Model");
  } else if (uid === "1.2.840.10008.7.1.2") {
    return new Ok("Abstract Multi-Dimensional Image Model");
  } else if (uid === "1.2.840.10008.8.1.1") {
    return new Ok("DICOM Content Mapping Resource");
  } else {
    return new Error(undefined);
  }
}

const vm_1 = /* @__PURE__ */ new ValueMultiplicity(
  1,
  /* @__PURE__ */ new Some(1),
);

const vm_2 = /* @__PURE__ */ new ValueMultiplicity(
  2,
  /* @__PURE__ */ new Some(2),
);

const vm_3 = /* @__PURE__ */ new ValueMultiplicity(
  3,
  /* @__PURE__ */ new Some(3),
);

const vm_4 = /* @__PURE__ */ new ValueMultiplicity(
  4,
  /* @__PURE__ */ new Some(4),
);

const vm_5 = /* @__PURE__ */ new ValueMultiplicity(
  5,
  /* @__PURE__ */ new Some(5),
);

const vm_6 = /* @__PURE__ */ new ValueMultiplicity(
  6,
  /* @__PURE__ */ new Some(6),
);

const vm_1_to_2 = /* @__PURE__ */ new ValueMultiplicity(
  1,
  /* @__PURE__ */ new Some(2),
);

const vm_1_to_n = /* @__PURE__ */ new ValueMultiplicity(
  1,
  /* @__PURE__ */ new None(),
);

const vm_2_to_n = /* @__PURE__ */ new ValueMultiplicity(
  2,
  /* @__PURE__ */ new None(),
);

const vm_3_to_n = /* @__PURE__ */ new ValueMultiplicity(
  3,
  /* @__PURE__ */ new None(),
);

function find_private(tag, private_creator) {
  let g0 = $int.bitwise_shift_right(tag.group, 8);
  let g1 = $int.bitwise_and(tag.group, 0xFF);
  let e0 = $int.bitwise_shift_right(tag.element, 8);
  let e1 = $int.bitwise_and(tag.element, 0xFF);
  if (private_creator === "SIEMENS MEDCOM HEADER2") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Series Workflow Status",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-XSB-VISUB Release 1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "V1") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "User Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Normalization Coefficient",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Receiving Gain",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Mean Image Noise", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PRIVATE ORIGINAL ATTRIBUTES") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Private Original Attribute Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Replacement Date and Time",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Replacement Originator Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Replacement Reason", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Original Operators' Name",
          toList([new PersonName()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS SITE NAME") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Site Name", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIENET") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "SIENET Command Field",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Receiver PLA", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Transfer Priority", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Actual User", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x72) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x73) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x74) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x75) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x91 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Patient Name", toList([new PersonName()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x95 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Examination Folder ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x95 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Folder Reported Status",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x95 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Folder Reporting Radiologist",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x95 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "SIENET ISA PLA", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x95 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Folder Rebuild Status",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x95 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x99 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Key Images", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x99 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Image Number", toList([new SignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_SERS_01") {
    if (g0 === 0x0 && g1 === 0x25 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Last pulse sequence used",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Images in Series", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Landmark Counter", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Number of Acquisitions",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Indicates no. of updates to header",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Series Complete Flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Number of images archived",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Last image number used",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Primary Receiver Suite and Host",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Protocol Data Block (compressed)",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI RELEASE 1") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Comments", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unique Identifier", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Data Object Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Data Object Subtype", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(new Item(tag, "Organ", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Allergy Indication", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Pregnancy", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Compression Algorithm", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED SP DXMG WH AWS 1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Reason for the Requested Procedure",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Projection View Display String",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "REPORT_FROM_APP") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_IT_US_REPORT") {
    if (g0 === 0x0 && g1 === 0x45 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Vivid excel file", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Vivid CHM file", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Vivid PDF file", toList([new OtherWordString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS NUMBER OF SUB FRAMES") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x77) {
      return new Ok(
        new Item(
          tag,
          "Number of Sub-Frames",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MITRA LINKED ATTRIBUTES 1.0") {
    if (g0 === 0x0 && g1 === 0x31 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Global Patient ID", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ACRQA_1.0 BLOCK2") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "CR S-Shift", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CR C-Shift", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x20) {
      return new Ok(new Item(tag, "CR GT", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x30) {
      return new Ok(new Item(tag, "CR GA", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x40) {
      return new Ok(new Item(tag, "CR GC", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x50) {
      return new Ok(new Item(tag, "CR GS", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x60) {
      return new Ok(new Item(tag, "CR RT", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x70) {
      return new Ok(new Item(tag, "CR RE", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x80) {
      return new Ok(new Item(tag, "CR RN", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "CR DRT", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS TABLE VERTICAL POSITION") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "vertical Table Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DL_SERIES") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Calibration time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Image sweep", toList([new CodeString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Spatial change", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "default spatial filter strength",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd4) {
      return new Ok(
        new Item(
          tag,
          "Detection gain value",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Calibration object size mm",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xca) {
      return new Ok(
        new Item(
          tag,
          "3Dspin expected number of frames",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Calibration object", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "ABD value", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "injection delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8c) {
      return new Ok(
        new Item(
          tag,
          "Calibration points row",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x97) {
      return new Ok(
        new Item(
          tag,
          "Angle 1 increment",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa9) {
      return new Ok(
        new Item(tag, "EPT", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xae) {
      return new Ok(
        new Item(
          tag,
          "SUB operator LUTs names",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8f) {
      return new Ok(
        new Item(
          tag,
          "Calibration sw version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x98) {
      return new Ok(
        new Item(
          tag,
          "Angle 2 increment",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9a) {
      return new Ok(
        new Item(
          tag,
          "sensor feedback",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9d) {
      return new Ok(
        new Item(
          tag,
          "applicable review mode",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "can downscan 512", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc5) {
      return new Ok(
        new Item(
          tag,
          "Preselected pivot rotation speed",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc4) {
      return new Ok(
        new Item(
          tag,
          "Default spatial filter family",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9e) {
      return new Ok(
        new Item(
          tag,
          "log LUT control points",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Extend calib sw version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xad) {
      return new Ok(
        new Item(
          tag,
          "exp LUT NOSUB control points",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd5) {
      return new Ok(
        new Item(
          tag,
          "mR mAs calibration value",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Calibration frame original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "injection phase", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4e) {
      return new Ok(
        new Item(tag, "def_bright_contr", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "default spatial filter family",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdc) {
      return new Ok(
        new Item(tag, "DRM LUT file name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Calibration date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "fov dimension double",
          toList([new DecimalString()]),
          vm_1_to_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc7) {
      return new Ok(
        new Item(
          tag,
          "Patient position per image",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdd) {
      return new Ok(
        new Item(tag, "DRM Strength", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Sub window width", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc8) {
      return new Ok(
        new Item(
          tag,
          "3D structure of interest",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "detector_rot_angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Calibration image original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "Number of images", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x99) {
      return new Ok(
        new Item(
          tag,
          "Angle 3 increment",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(
          tag,
          "Auto injection enabled",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "reference injection frame number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "Detector origin", toList([new IntegerString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8b) {
      return new Ok(
        new Item(
          tag,
          "Calibration nb points uif",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9f) {
      return new Ok(
        new Item(
          tag,
          "exp LUT SUB control points",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Sub window center", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Calibration accuracy",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Calibration mag ratio",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Calibration extended", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Calibration frame", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc9) {
      return new Ok(
        new Item(
          tag,
          "3D calibration out of date flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Calibration factor",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Calibration return code",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8d) {
      return new Ok(
        new Item(
          tag,
          "Calibration points column",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "user_bright_contr", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xab) {
      return new Ok(
        new Item(
          tag,
          "current spatial filter strength",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_CT_HINO_01") {
    if (g0 === 0x0 && g1 === 0x4b && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Beam Thickess", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x4b && e1 === 0x2) {
      return new Ok(
        new Item(tag, "R Time", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x4b && e1 === 0x3) {
      return new Ok(
        new Item(tag, "HBC Number", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private-CWS Release 1") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Window Of Images ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Window Of Images Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "WindowOfImagesScope",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Silhouette ROI V1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "ROI Name", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "ROI Name Font", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "ROI Normal Color", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "ROI Fill Pattern", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "ROI Bp Seg", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "ROI Bp Seg Pairs", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "ROI Seed Space", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(new Item(tag, "ROI Seeds", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "ROI Line Thickness", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "ROI Line Style", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "ROI Line Dash Length",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "ROI Interactivity", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "ROI Name Position", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "ROI Name Display", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(new Item(tag, "ROI Label", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "ROI Shape", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "ROI Shape Tilt",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "ROI Shape Points Count",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "ROI Shape Points Space",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "ROI Shape Points",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "ROI Shape Control Points Count",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "ROI Shape Control Points Space",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "ROI Shape Control Points",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "ROI Don't Save", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MeVis eatDicom") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "EatDicomVersion", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "EatDicomOptions", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "TimepointsID", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ACQU_01") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Recon post proc. Flag",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbe) {
      return new Ok(
        new Item(tag, "Projection angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xba) {
      return new Ok(
        new Item(tag, "User data 19", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcb) {
      return new Ok(
        new Item(
          tag,
          "Phase Contrast flow axis",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9b) {
      return new Ok(
        new Item(tag, "Pulse Sequence Mode", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb3) {
      return new Ok(
        new Item(tag, "User data 12", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(
          tag,
          "Calibrated Field strength",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xce) {
      return new Ok(
        new Item(tag, "Prescan type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd6) {
      return new Ok(
        new Item(tag, "Prep pulse", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "First scan location",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd9) {
      return new Ok(
        new Item(
          tag,
          "Concatenated SAT {# DTI Diffusion Dir., release 9.0 & below}",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe2) {
      return new Ok(
        new Item(
          tag,
          "Velocity Encode Scale",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Last pseq", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Auto Prescan Analog receiver gain",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(
          tag,
          "Dependent on #views processed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "Auto Prescan Center Frequency",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Display field of view",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbb) {
      return new Ok(
        new Item(tag, "User data 20", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbd) {
      return new Ok(
        new Item(tag, "User data 22", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3c) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "x-ray On position", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Horiz. Frame of ref.",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaf) {
      return new Ok(
        new Item(tag, "User data 8", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc1) {
      return new Ok(
        new Item(
          tag,
          "Surface coil intensity",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb1) {
      return new Ok(
        new Item(tag, "User data 10", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Duration",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Auto Prescan Transmit Gain",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xde) {
      return new Ok(
        new Item(
          tag,
          "Dynamic Z alpha value",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6b) {
      return new Ok(
        new Item(
          tag,
          "Field of view in detector cells",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb7) {
      return new Ok(
        new Item(tag, "User data 16", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Increment between views",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd2) {
      return new Ok(
        new Item(tag, "Projection Algorithm", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xec) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf2) {
      return new Ok(
        new Item(tag, "Fast phases", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2f) {
      return new Ok(
        new Item(tag, "Trigger frequency", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xca) {
      return new Ok(
        new Item(tag, "SAT thickness H/F", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Interscan delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3e) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Cell number at Theta",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd7) {
      return new Ok(
        new Item(tag, "Cardiac phase number", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Surface Coil Type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Total Segments Required",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd8) {
      return new Ok(
        new Item(tag, "Variable echoflag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x97) {
      return new Ok(
        new Item(tag, "Bitmap defining CVs", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa9) {
      return new Ok(
        new Item(tag, "User data 2", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xae) {
      return new Ok(
        new Item(tag, "User data 7", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Stat recon flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8f) {
      return new Ok(new Item(tag, "Swappf", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc3) {
      return new Ok(
        new Item(tag, "SAT location L", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "x-ray Off position", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Center freq. Method", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd3) {
      return new Ok(
        new Item(
          tag,
          "Projection Algorithm Name",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe0) {
      return new Ok(
        new Item(
          tag,
          "User data 24 {# DTI Diffusion Dir., release 10.0 & above}",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xac) {
      return new Ok(
        new Item(tag, "User data 5", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "CT bone number", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9d) {
      return new Ok(
        new Item(tag, "Pulse Sequence Date", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xda) {
      return new Ok(
        new Item(
          tag,
          "Reference channel used",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "User data 3", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc5) {
      return new Ok(
        new Item(tag, "SAT location P", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc6) {
      return new Ok(
        new Item(tag, "SAT location H", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc4) {
      return new Ok(
        new Item(tag, "SAT location A", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "User data 9", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcf) {
      return new Ok(
        new Item(tag, "Prescan status", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "Max right chan over views",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Table Speed [mm/rotation]",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf9) {
      return new Ok(
        new Item(tag, "Transmit gain", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdf) {
      return new Ok(
        new Item(
          tag,
          "User data 23 {# DTI Diffusion Dir., release 9.0 & below}",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Tube Azimuth [degree]", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7d) {
      return new Ok(
        new Item(tag, "Second echo", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Mid Scan Time [sec]",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Last scan ras", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Series contrast", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "View compression factor",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Number of triggers", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9e) {
      return new Ok(
        new Item(
          tag,
          "Internal Pulse Sequence Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "Avg of right ref chans over views",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "SFOV Type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7f) {
      return new Ok(
        new Item(tag, "Table delta", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb8) {
      return new Ok(
        new Item(tag, "User data 17", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc2) {
      return new Ok(
        new Item(tag, "SAT location R", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Pause Interval", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Start number for enhanced scans",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xad) {
      return new Ok(
        new Item(tag, "User data 6", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Rotation Speed [msec]",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Series plane", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "First scan ras", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd5) {
      return new Ok(
        new Item(tag, "Fractional echo", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "Saturation planes", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Actual receive gain analog",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9c) {
      return new Ok(
        new Item(tag, "Pulse Sequence Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "CT water number", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Receive bandwidth", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "Avg of left ref chans over views",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdc) {
      return new Ok(
        new Item(
          tag,
          "Primary speed correction used",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Compute type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Monitor SAR", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc7) {
      return new Ok(
        new Item(tag, "SAT location F", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdd) {
      return new Ok(
        new Item(
          tag,
          "Overrange correction used",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdb) {
      return new Ok(
        new Item(
          tag,
          "Back projector coefficient",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb9) {
      return new Ok(
        new Item(tag, "User data 18", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Raw data run number", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "End number for enhanced scans",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Detector Channel", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2e) {
      return new Ok(
        new Item(
          tag,
          "Angle of first view",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc8) {
      return new Ok(
        new Item(tag, "SAT thickness R/L", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Set if fatq estimates were used",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Start number for baseline",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Slice offset on freq axis",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3f) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5f) {
      return new Ok(
        new Item(
          tag,
          "Increment between channels",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5e) {
      return new Ok(
        new Item(
          tag,
          "Number of channels (1...512)",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Number of views", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb6) {
      return new Ok(
        new Item(tag, "User data 15", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbc) {
      return new Ok(
        new Item(tag, "User data 21", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Max left chan over views",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "User data 11", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x99) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "SAT fat/water/bone", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "Number of echoes", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa7) {
      return new Ok(
        new Item(tag, "User data 0", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4b) {
      return new Ok(
        new Item(
          tag,
          "Data size for scan data",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8b) {
      return new Ok(
        new Item(
          tag,
          "Actual receive gain digital",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcc) {
      return new Ok(
        new Item(tag, "Velocity encoding", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xfb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Value of back projection button",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb4) {
      return new Ok(
        new Item(tag, "User data 13", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9f) {
      return new Ok(
        new Item(
          tag,
          "Transmitting Coil Type",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "User data 1", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Extremity Coil flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xeb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Cardiac repetition time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3b) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcd) {
      return new Ok(
        new Item(tag, "Thickness disclaimer", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Mid scan flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Segment Number", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd0) {
      return new Ok(
        new Item(tag, "Raw data type", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(
          tag,
          "Images per cardiac cycle",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Starting view", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "End number for baseline",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "Auto Prescan Digital receiver gain",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Contiguous", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "Z chan avg over views",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "Total no. of ref channels",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc9) {
      return new Ok(
        new Item(tag, "SAT thickness A/P", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Peak SAR", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf0) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Pause Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8d) {
      return new Ok(
        new Item(
          tag,
          "Delay after trigger",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Cell spacing", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Last scan loc", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb5) {
      return new Ok(
        new Item(tag, "User data 14", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xab) {
      return new Ok(
        new Item(tag, "User data 4", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "CEMAX-ICON") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "CR Processing Parameters",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CR Exposure Menu Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "CR Exposure Menu String",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "CR EDR Mode", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "CR Latitude", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "CR Group Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "CR Equipment ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "CR Image Serial Number",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "CR Bar Code Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "CR Film Output Exposure",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Key Image", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Note", toList([new LongText()]), vm_1_to_n));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Annotation Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "X Start Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Y Start Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "X End Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Y End Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Annotation Text", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Which Marker", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Annotation Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "X Coordinates", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Y Coordinates", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Annotation Type", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "Number of points", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Fill Type", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x30 && g1 === 0x33 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Study Priority Status", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_Ultrasound_MovieGroup_001") {
    if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x57) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x77) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x86) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_4));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x26) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x84) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x74) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_2),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x79) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x54) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x36) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x24) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x73) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_4),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x72) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x83) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x75) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x85) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_IQTB_IDEN_47") {
    if (g0 === 0x0 && g1 === 0x47 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Image Path", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Image Date/Time", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Queue Sequence Number",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Recon Sequence ID", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_LUNAR_RAW") {
    if (g0 === 0x70 && g1 === 0x3 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "enCORE File Name", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x3 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "enCORE File Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x3 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "enCORE File Length", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x3 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "enCORE File Modified Time",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS REFERENCE LOCKED") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Locked Flag", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS TABLE LATERAL POSITION") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x98) {
      return new Ok(
        new Item(
          tag,
          "Lateral Table Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "HOLOGIC") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Hx Questionnaire", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Image Analysis Data in XML",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Encoding Scheme Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "P File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "P File Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "P File Length", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "R File Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "R File Length", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "BrainLAB_BeamProfile") {
    if (g0 === 0x34 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Beam Profile Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x34 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Beam Profile Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x34 && g1 === 0x11 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Beam Parameter Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x34 && g1 === 0x11 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Parameter Description",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x34 && g1 === 0x11 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Parameter Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x34 && g1 === 0x11 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Referenced Beam Profile Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips MR Imaging DD 003") {
    if (g0 === 0x20 && g1 === 0x5 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x45) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x49) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x56) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x57) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x82) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-CTBE-Private Release 1") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ISG Image") {
    if (g0 === 0x0 && g1 === 0x65 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "LORAD Selenia") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Paddle ID", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Paddle Position", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Collimation Size", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA_SR") {
    if (g0 === 0x70 && g1 === 0x15 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x15 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "KINETDX_GRAPHICS") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MeVis eD: Timepoint Information") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "TPDateTime", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "TPDateTimeType", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "TPSeriesDescription", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "TPGradientDirections", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(new Item(tag, "GeometryID", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Silhouette V1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1d) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x29) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x54) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x55) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x56) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x57) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "HMC - CT - ID") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Image ID Information (e.g. Patient Name, Patient ID)",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Image ID Information (e.g. Patient Comment)",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AGFA PACS Archive Mirroring 1.0") {
    if (g0 === 0x0 && g1 === 0x31 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MR VA0  GEN") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "AC Combination Mask", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Number of 3D Raw Partitions nominal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Filter Parameter for Phase Correction",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(4)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "Gate Threshold", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Start Delay Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "EPI Stimulation Monitor Mode",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Saturation Readout Vector Transversal Component",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Columns",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "Order of Slices", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "MIP Stop Slice", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Image Rotation Angle",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "MIP Start Slice", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "MIP Start Row", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Signal Mask", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Filter Type for Image Data",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "AC Element Noise Level",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Number of 3D Image Partitions",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "First Measured Fourier Line",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "EPI Change Value of Magnitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Current Group Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Filter Parameter for Raw Data",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(4)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "EPI Reconstruction Phase",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Number of Interpolated Images",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "AC Element To ADC Connect",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x97) {
      return new Ok(
        new Item(
          tag,
          "Coil Class Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "AC Element Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Number of 3D Raw Partitions current",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Phase Corrections Rows sequence",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Coil Position", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Number of Trigger Pulses",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Phase Corrections Rows reconstruction",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "RRInterval", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "MIP Stop Column", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Number of Echoes", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Number of Slices current",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Total Measurement Time nominal",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Saturation Phase Encoding Vector Transversal Co...",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Number of Fourier Lines after Zero",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Total Measurement Time current",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Number of Saturation Regions",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Phase Corrections Columns reconstruction",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Delay after Trigger",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Measurement Status Mask",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "MIP Start Column", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Number of Averages current",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Columns",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "AC Element Select Mask",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Slab Thickness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Filter Type for Phase Correction",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Sequence Control Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "EPI Change Value of Y Component",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "EPI Change Value of X Component",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Current Slice Distance Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Dwell Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Saturation Readout Vector Sagittal Component",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Cardiac Code", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "Repetition Time effective",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "Second Repetition Time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Second Echo Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "Gate Phase", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Current Slice Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Number of Prescans", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "EPI Reconstruction Slope",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "MIP Stop Row", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Normalization Filter Type for Image Data",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Number of Fourier Lines nominal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "AC ADC Pair Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "AC Element Data Mask",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Actual 3D Image Partition Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Number of Slices nominal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(
          tag,
          "Normalization Filter Parameter for Image Data",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(4)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "EPI Change Value of Z Component",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Flip Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Number of Phases", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Phase Corrections Columns sequence",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Number of Fourier Lines current",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Coil ID Mask", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Filter Type for Raw Data",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "Gated Ratio", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Filter Parameter for Image Data",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(4)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Saturation Phase Encoding Vector Sagittal Compo...",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA_MEC_MR3") {
    if (g0 === 0x70 && g1 === 0xd && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Scale Factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Order",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Orientation Vector",
          toList([new DecimalString()]),
          new ValueMultiplicity(9, new Some(9)),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Flip Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Rotate Information",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x5) {
      return new Ok(new Item(tag, "FOV", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Image Matrix", toList([new UnsignedShort()]), vm_4),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Image Information",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Original Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Original Data Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Receiver Gain Correction Check Flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Identification Flag of 3D GDC",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Number of PAC channel",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Reference mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Gain value group for MRS",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Gain value of each channel for MRS",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Phase value of each channel for MRS",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Reference gain value of each channel for MRS",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Reference gain value of each channel for MRS",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Receiver gain of reference scan",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x88) {
      return new Ok(
        new Item(
          tag,
          "Flag of water Sat pulse",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Selected contrast TE",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "Raw Data Set Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "Multi Slice number", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x8c) {
      return new Ok(
        new Item(
          tag,
          "Multi Coverage number",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x8d) {
      return new Ok(
        new Item(tag, "Raw Data Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "Coil Channel No.", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "MRS Raw Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "MRS Ref Raw Data",
          toList([new OtherFloatString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0xd && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Receiver gain of prescan",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED SMS USG S2000") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Color Flow Smooth Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "M-Mode Dynamic Range", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "B-Mode Tint Index", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "M-Mode Tint Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Doppler Submode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Doppler Trace Inverted", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3c) {
      return new Ok(
        new Item(tag, "Thumbnail Data", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "B-Mode Tint Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(new Item(tag, "Image Flag", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "M-Mode Map Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "S2000 Private Doppler Wall Filter",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Res/Speed Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Frame Rate", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(new Item(tag, "??", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Doppler Map Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "M-Mode Edge Enhance Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Color Flow Overall Gain", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Priority Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Color Flow state", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Private Creator Version", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Burned in Graphics", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Color Flow Map Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "B-Mode Res/Speed Index",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "B-Mode Map Index", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "B-Mode Edge Enhance Index",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Persistence Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(new Item(tag, "??", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "SieClear Index", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(new Item(tag, "??", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Maximum Velocity",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Wall Filter Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "ClarifyVE Index", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Doppler Overall Gain", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x69) {
      return new Ok(
        new Item(
          tag,
          "Doppler Time/Freq Res Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "B-Mode Overall Gain",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "Doppler Tint Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "M-Mode Submode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3b) {
      return new Ok(
        new Item(tag, "IPDA/MDA Data", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "B-Mode Submode", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "B-Mode Persistence Index",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Color Flow Submode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "M-Mode Tint Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Doppler Dynamic Range", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "B-Mode Dynamic Range",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "M-Mode Overall Gain", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Doppler Tint Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(
        new Item(
          tag,
          "Attributes Doppler Gate Size",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips Imaging DD 070") {
    if (g0 === 0x40 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x1d) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_Ultrasound_ImageGroup_001") {
    if (g0 === 0x60 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x60 && g1 === 0x3 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Eclipse 60") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0xff) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x59) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Private data", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x1) {
      return new Ok(new Item(tag, "Private data", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Private data", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Private data", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x58) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x57) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Private data", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5a) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Private data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Private data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Private data", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Private data", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Private data", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Private data", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Private data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT RECON FILTER TYPE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Filter Type",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DL_IMG_01") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Source Frame Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Max Object Speed", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbe) {
      return new Ok(
        new Item(
          tag,
          "Source to image distance per frame vector",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xba) {
      return new Ok(
        new Item(tag, "Acquisition region", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Image Dose", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9b) {
      return new Ok(new Item(tag, "Grid", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb3) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Protocol User Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Image Rotation", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Calibration Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe2) {
      return new Ok(
        new Item(
          tag,
          "Carm Lateral Angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Image Sweep", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Spatial Change", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Image File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbb) {
      return new Ok(
        new Item(tag, "Acquisition SUB mode", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Default Spatial Filter Strength",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbd) {
      return new Ok(
        new Item(
          tag,
          "Table rotation status vector",
          toList([new CodeString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaf) {
      return new Ok(
        new Item(
          tag,
          "kVp actual vector",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Sensor Roi x Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb1) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Mode Description",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe4) {
      return new Ok(
        new Item(
          tag,
          "Carm Lateral Angle increment",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "Inconsistent Flag", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xde) {
      return new Ok(
        new Item(tag, "Acquisition Plane", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "Source Frame Item Id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd4) {
      return new Ok(
        new Item(
          tag,
          "Detection gain value",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Calibration Object Size mm",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xed) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xec) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xca) {
      return new Ok(
        new Item(
          tag,
          "3Dspin expected number of frames",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Min Object Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3e) {
      return new Ok(
        new Item(tag, "Sharp Sensitivity", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe1) {
      return new Ok(
        new Item(
          tag,
          "Pivot Lateral Angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Source Image Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Calibration Object", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "ABD Value", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Injection Delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Detector Gain", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Detector Size Columns",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8c) {
      return new Ok(
        new Item(
          tag,
          "Calibration Points Row",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "Window Time Duration",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x97) {
      return new Ok(
        new Item(tag, "Angle 1 Increment", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa9) {
      return new Ok(new Item(tag, "EPT", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xae) {
      return new Ok(
        new Item(
          tag,
          "SUB operator LUTs names",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Lag Sensitivity", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8f) {
      return new Ok(
        new Item(
          tag,
          "Calibration Sw Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2b) {
      return new Ok(
        new Item(
          tag,
          "Distance to table top",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Angle 2 Increment", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe0) {
      return new Ok(
        new Item(
          tag,
          "DAP of current record",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xac) {
      return new Ok(
        new Item(
          tag,
          "Brightness Sensitivity",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9a) {
      return new Ok(
        new Item(tag, "Sensor Feedback", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Sensor Roi Shape", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "LV Diastolic contour",
          toList([new FloatingPointSingle()]),
          vm_2_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(
          tag,
          "Exposure Trajectory Family",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9d) {
      return new Ok(
        new Item(
          tag,
          "Applicable Review Mode",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "Can Downscan 512", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc5) {
      return new Ok(
        new Item(
          tag,
          "Preselected pivot rotation speed",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc4) {
      return new Ok(
        new Item(
          tag,
          "Spectral filter thickness",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "mAs actual vector",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdf) {
      return new Ok(
        new Item(
          tag,
          "LP off longitudinal position Z",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Min Saturation Dose",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Patient Dose Limit", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Object Back Motion", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Sensor Roi x Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9e) {
      return new Ok(
        new Item(
          tag,
          "Log Lut Control Points",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x39) {
      return new Ok(
        new Item(
          tag,
          "Sensor Roi y Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb8) {
      return new Ok(
        new Item(
          tag,
          "Recommended display frame rate float",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc2) {
      return new Ok(
        new Item(
          tag,
          "pw actual vector",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Extend Calibration Sw Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "LV Systolic contour",
          toList([new FloatingPointSingle()]),
          vm_2_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "Noise Sensitivity", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xad) {
      return new Ok(
        new Item(
          tag,
          "Exp Lut NOSUB Control Points",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Source Image Item Id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd5) {
      return new Ok(
        new Item(
          tag,
          "mR mAs calibration value",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Calibration Frame Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9c) {
      return new Ok(
        new Item(
          tag,
          "Default Mask Pixel Shift",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Source Series Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Injection Phase", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "Default Brightness Contrast",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Default Spatial Filter Family",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdc) {
      return new Ok(
        new Item(tag, "DRM LUT file name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(new Item(tag, "Tube", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Calibration Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Fov Dimension Double",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc7) {
      return new Ok(
        new Item(
          tag,
          "Patient position per image",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdd) {
      return new Ok(
        new Item(tag, "DRM Strength", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb9) {
      return new Ok(
        new Item(
          tag,
          "ABD Vector",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Sub Window Width", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Preproc Image Rate Max",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc8) {
      return new Ok(
        new Item(
          tag,
          "3D structure of interest",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe7) {
      return new Ok(
        new Item(
          tag,
          "LP off long pos Z first frame",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Detector Rotation Angle",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3f) {
      return new Ok(
        new Item(
          tag,
          "Contrast Sensitivity",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe8) {
      return new Ok(
        new Item(
          tag,
          "LP off long pos Z increment",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Calibration Image Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb2) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Mode Display Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x99) {
      return new Ok(
        new Item(tag, "Angle 3 Increment", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(
          tag,
          "Auto Injection Enabled",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "Reference Injection Frame Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "Detector Origin", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8b) {
      return new Ok(
        new Item(
          tag,
          "Calibration Number Of Points Uif",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9f) {
      return new Ok(
        new Item(
          tag,
          "Exp Lut Control Points",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "Injection Duration", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe3) {
      return new Ok(
        new Item(
          tag,
          "Pivot Lateral Angle increment",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Sub Window Center", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xeb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Calibration Accuracy",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3b) {
      return new Ok(
        new Item(tag, "Sensor Roi y Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Max Object Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Detector Size Rows", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "Source Series Item Id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xea) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe9) {
      return new Ok(
        new Item(
          tag,
          "Source to detector distance per frame vector",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Calibration Magnification Ratio",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Calibration Extended", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Internal Label Image", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Calibration Frame", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "Positioner Angle Display Mode",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc9) {
      return new Ok(
        new Item(
          tag,
          "3D calibration out of date flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Calibration Factor",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Calibration Return Code",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8d) {
      return new Ok(
        new Item(
          tag,
          "Calibration Points Column",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4f) {
      return new Ok(
        new Item(
          tag,
          "User Brightness Contrast",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xab) {
      return new Ok(
        new Item(
          tag,
          "Current Spatial Filter Strength",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AgilityRuntime") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SECTRA_ImageInfo_01") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Image info", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(new Item(tag, "Marking", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "No Decompression", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Image Info new", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MITRA OBJECT ATTRIBUTES 1.0") {
    if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_HELIOS_01") {
    if (g0 === 0x0 && g1 === 0x45 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Number of Views shifted",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Iterbone Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "CardiacReconAlgorithm", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Sigma Row number", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Cross Talk Calibration Time",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "DAS gain", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Table Direction", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Z Slope Calibration Time",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Number of Views 1A", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "DAS Temperature", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "EkgFullMaStartPhase", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Z tracking Error",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Start View 1A", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Macro width at ISO Center",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Sigma Mode", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Number of Views 2A", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "DAS type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Number of Macro Rows in Detector",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Phantom Calibration Date",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Perisstaltic Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Z Slope Calibration Date",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Z smoothing Factor",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Start View 2A", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Start View 2B", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "TemporalResolution",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "View Weighting Mode", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Air Calibration Date", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "PctRpeakDelay", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3b) {
      return new Ok(
        new Item(
          tag,
          "NoiseReductionImageFilterDesc",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "Cross Talk Calibration Date",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "Phantom Calibration Time",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "EkgModulationMinMa", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Z tracking Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "ActualPctRpeakDelay", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "AvgHeartRateForImage", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Air Calibration Time", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Minimum DAS value",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Start View 1B", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Mean Z error", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Maximum Offset Value",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Number of Views 1B", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Number Views 2B", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "EkgModulationMaxMa", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "EkgFullMaEndPhase", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "APEX_PRIVATE") {
    if (g0 === 0x0 && g1 === 0x27 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Private Creator", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Bed Position", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TMDTK") {
    if (g0 === 0x7e && g1 === 0xff && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7e && g1 === 0xff && e1 === 0x2e) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips Imaging DD 129") {
    if (g0 === 0x20 && g1 === 0x1 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT RECON SLICE WIDTH") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Slice Width",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CM VA0  LAB") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Generator Identification Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Gantry Identification Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "XRay Tube Identification Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Detector Identification Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "DAS Identification Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "SMI Identification Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "CPU Identification Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Header Version", toList([new ShortString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA_MEC_XA3") {
    if (g0 === 0x70 && g1 === 0x79 && e1 === 0x43) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x3f) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x6c) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x41) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x64) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x6a) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new SignedLong()]),
          new ValueMultiplicity(28, new Some(28)),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x5a) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x31) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x33) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x2c) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_3));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x80) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x2a) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_5));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x7b) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x2f) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x3b) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x27) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x58) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x6d) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x45) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x32) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new SignedShort()]),
          new ValueMultiplicity(30, new None()),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x5b) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x5d) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x2d) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x68) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x5f) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new SignedShort()]),
          new ValueMultiplicity(4, new None()),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x3e) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x2e) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x67) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x42) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x76) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x28) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x59) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_2_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x51) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x38) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x60) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x48) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(12, new Some(12)),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x2b) {
      return new Ok(new Item(tag, "", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x49) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_3));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x54) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_5));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x4f) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_3));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x62) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_4));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x5c) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_2_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x73) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_4));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x46) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new UnsignedLong()]),
          new ValueMultiplicity(47, new None()),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x37) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_4));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x3d) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x4c) {
      return new Ok(new Item(tag, "", toList([new OtherByteString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x30) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x70) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new SignedShort()]),
          new ValueMultiplicity(18, new Some(18)),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x25) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x79) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x65) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x82) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x52) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x22) {
      return new Ok(new Item(tag, "", toList([new IntegerString()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x56) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x35) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x3a) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x81) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x72) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x63) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x21) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_5));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new SignedLong()]),
          new ValueMultiplicity(35, new Some(35)),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x3c) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x26) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x44) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x34) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x40) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x6e) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x4b) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_3));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x69) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x6b) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x39) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x24) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x78) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x36) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x57) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x6f) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x66) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x23) {
      return new Ok(new Item(tag, "", toList([new IntegerString()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x50) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x4d) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_3));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x4a) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x75) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x53) {
      return new Ok(new Item(tag, "", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x5e) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_2));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x71) {
      return new Ok(new Item(tag, "", toList([new DecimalString()]), vm_1_to_n));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x77) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x79 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(10, new Some(10)),
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "http://www.gemedicalsystems.com/it_solutions/orthoview/2.1") {
    if (g0 === 0x31 && g1 === 0x17 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "OrthoView Session Date/Time",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x17 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "OrthoView Session Creator",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x17 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "OrthoView Session Completion Flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x17 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "OrthoView File Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x17 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "OrthoView File Name", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x17 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "OrthoView File Content",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI StudyExtensions_01") {
    if (g0 === 0x31 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "AMI Last Released Annot Label (RET)",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ISG shadow") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED DISPLAY") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Photometric Interpretation",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Rows", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Columns", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Origin", toList([new UnsignedShort()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x99) {
      return new Ok(
        new Item(tag, "Shutter Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Rows of Rectangular Shutter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "Columns of Rectangular Shutter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "Origin of Rectangular Shutter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "Radius of Circular Shutter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb2) {
      return new Ok(
        new Item(
          tag,
          "Origin of Circular Shutter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc1) {
      return new Ok(
        new Item(
          tag,
          "Contour of Irregular Shutter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P Release 1;2") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Subtraction Mask ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Masking Function", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Proprietary Masking Parameters",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Subtraction Mask Enable Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "Subtraction Mask Select Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SCHICK TECHNOLOGIES - Change List Creator ID") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Reference Image Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(new Item(tag, "Sequence", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS PI VALID PIXEL MAP") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Valid Pixel Map Flag",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/Workflow/Version 1.0") {
    if (g0 === 0x31 && g1 === 0x13 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "<internal", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "<internal", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0xe0) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0xe1) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0xe2) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "VEPRO DICOM RECEIVE DATA 1.0") {
    if (g0 === 0x0 && g1 === 0x59 && e1 === 0x40) {
      return new Ok(new Item(tag, "Receive date", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x41) {
      return new Ok(new Item(tag, "Receive time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Receive node", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Receive application", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Receive local computer", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Receive local ae title", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Receive remote computer",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Receive remote ae title",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x59 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Receive original transfer syntax",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GE_GROUP") {
    if (g0 === 0x60 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnlimitedText()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ACRQA_2.0 BLOCK1") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "CR Exposure Menu Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "CR Exposure Menu String",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "CR EDR Mode", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "CR Latitude", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "CR Group Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "CR Image Serial Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "CR Bar Code Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "CR Film Output Exposure",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "CR Film Format", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "CR S Shift String", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 041") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_PATI_01") {
    if (g0 === 0x0 && g1 === 0x11 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Patient Status", toList([new SignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Silhouette VRS 3.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SCHICK TECHNOLOGIES - Image Security Creator ID") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Image Checksum", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_YMHD_01") {
    if (g0 === 0x0 && g1 === 0x33 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "IDEXX") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Breed Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Species Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(new Item(tag, "Owner", toList([new PersonName()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/RadStore/Version 1.0") {
    if (g0 === 0x31 && g1 === 0x13 && e1 === 0x21) {
      return new Ok(new Item(tag, "Version", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "ImageMediumLabel", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x4) {
      return new Ok(new Item(tag, "Id3", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "DateLastAccessed", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "DeletedTags", toList([new AttributeTag()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "ImageMediumState", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "SeriesMediumState", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x15) {
      return new Ok(new Item(tag, "OBSOLETE", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x22) {
      return new Ok(new Item(tag, "OBSOLETE", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "StudyStateText", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "ByteSize", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x2) {
      return new Ok(new Item(tag, "Id1", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "SeriesState", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "ImageStateText", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "SeriesStateText", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Origin", toList([new LongString()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "OBSOLETE", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x60) {
      return new Ok(new Item(tag, "Expiration", toList([new DateTime()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Pathnames", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "ArchiveId", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "StudyMediumState", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "SeriesMediumLocation", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "LibraryId", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "DateLastModified", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "OBSOLETE", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Destination", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x1) {
      return new Ok(new Item(tag, "OBSOLETE", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "OBSOLETE", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "InstanceFileLocation", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Source", toList([new LongString()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x3c) {
      return new Ok(
        new Item(tag, "StudyMediumLabel", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x3b) {
      return new Ok(
        new Item(tag, "StudyMediumLocation", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "StudyState", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x1c) {
      return new Ok(new Item(tag, "MediumId", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "SeriesMediumLabel", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x3) {
      return new Ok(new Item(tag, "Id2", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "DriverPath", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "ImageMediumLocation", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x12) {
      return new Ok(new Item(tag, "State", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x13 && e1 === 0x11) {
      return new Ok(new Item(tag, "OBSOLETE", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips EnVisor") {
    if (g0 === 0x77 && g1 === 0x77 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Date 3D/PanView internal 'dataset' file was acquired",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Type of 3D or PanView", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Internal 3D/PanView software version number",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Private string", toList([new LongText()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT PATIENT_ORIENTATION") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Patient Orientation", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_AWSoft_SB1") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Reference to Study UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Reference to Series UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Reference to Original Instance Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Private Entity Launch Command",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-GV-CT Release 1") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x90) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xb0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x75) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x90) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xc0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS COMMON EDGE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Common Edge", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 038") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MeVis eD: Slice Information") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "SlicesSOPInstanceUID", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS FIELD NAME") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Field Name", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_AWSOFT_CD1") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Reference to Study UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Reference to Series UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "Reference to Original Instance",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "DPO Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x85) {
      return new Ok(new Item(tag, "DPO Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x90) {
      return new Ok(new Item(tag, "DPO Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "DPO Invocation String", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xaa) {
      return new Ok(new Item(tag, "DPO type", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xff) {
      return new Ok(
        new Item(tag, "DPO data", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ACRQA_2.0 BLOCK2") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "CR S Shift", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CR C Shift", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x20) {
      return new Ok(new Item(tag, "CR GT", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x30) {
      return new Ok(new Item(tag, "CR GA", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x40) {
      return new Ok(new Item(tag, "CR GC", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x50) {
      return new Ok(new Item(tag, "CR GS", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x60) {
      return new Ok(new Item(tag, "CR RT", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x70) {
      return new Ok(new Item(tag, "CR RE", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x80) {
      return new Ok(new Item(tag, "CR RN", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "CR DRT", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ACUSON: 1.2.840.11386.1.0") {
    if (g0 === 0x7f && g1 === 0xdf && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Lossy Compression Ratio",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Image Format", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Acuson Region Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Acuson Image Apex X", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Acuson Image Apex Y", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xd) {
      return new Ok(
        new Item(tag, "B-Color-On Flag", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "KRETZ_US") {
    if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "1.2.840.113663.1") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips EV Imaging DD 021") {
    if (g0 === 0x20 && g1 === 0x7 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Vol Seg Edit Connectivity",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Picker MR Private Group") {
    if (g0 === 0x71 && g1 === 0x1 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x71 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x71 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x71 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x71 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x71 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_2));
    } else if (g0 === 0x71 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_4));
    } else if (g0 === 0x71 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CM VA0  CMS") {
    if (g0 === 0x60 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Image Graphics Format Code",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Storage Mode", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Image Normal", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Image Distance", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Image Positioning History Mask",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Splash", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "View Direction", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Pixel Quality Code",
          toList([new CodeString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Archive Code", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Used Patient Weight",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Calculation Mode", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Window Scale", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Sort Code", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Image Column", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Window Table Index", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Patient Orientation Set 2",
          toList([new CodeString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Rest Direction", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Image Position",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Number of Measurements",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Registration Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Referring Physician", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Procedure Description", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Field of View", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Admitting Diagnosis", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Table Zero Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Patient Maiden Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Rest Direction", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Patient Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Image Magnification Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x60 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Graphics", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Patient Orientation Set 1",
          toList([new CodeString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Patient Birthdate", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Net Frequency", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Window Style", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x55) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x56) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Patient Weight", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Image Scroll Offset",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Image Row", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Remote Copy Code", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Noise Level", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Table Zero Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Modification Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Image Pixel Offset", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Pixel Quality Value",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Window Look", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Evaluation Mask Image",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Study Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Modifying Physician", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "View Direction", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Exposure Code", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Patient Id", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Patient Position", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Patient Sex", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Modification Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Measurement Mode", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x54) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Binary Data", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Study Type", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Registration Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Number of Data Bytes",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Organ Code", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Text", toList([new LongString()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ALOKA:1.2.392.200039.103.2") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x24) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips EV Imaging DD 017") {
    if (g0 === 0x20 && g1 === 0x7 && e1 === 0xc1) {
      return new Ok(
        new Item(
          tag,
          "? SOP Instance UID ?",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0xc2) {
      return new Ok(new Item(tag, "Unknown", toList([new Date()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0xc3) {
      return new Ok(new Item(tag, "Unknown", toList([new Time()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0xc4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Mitra Presentation 1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Mitra Rotation", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Mitra Window Width", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Mitra Window Centre", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Mitra Invert", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Mitra Has Tabstop", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Smooth Rotation", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_PETD_01") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "PET sel_stop_cond", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xeb) {
      return new Ok(
        new Item(
          tag,
          "3D Filter cutoff",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "PET patient_entry", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.y_axis_min",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9c) {
      return new Ok(
        new Item(
          tag,
          "PET emiss_sub_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "PET source2_meas_dt", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "PET hospital_name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "PET acq_bin_dur", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.graph_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.software_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xde) {
      return new Ok(
        new Item(
          tag,
          "PET num_of_time_slots",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "PET collimation", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x58) {
      return new Ok(
        new Item(
          tag,
          "PET blank_cal_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "PET exam_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.x_axis_units",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "PET source1_radnuclide",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7f) {
      return new Ok(
        new Item(tag, "PET is_reference", toList([new DecimalString()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "PET norm_cal_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.multi_patient",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc2) {
      return new Ok(
        new Item(
          tag,
          "PET ac_img_smooth_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "PET acq_delay", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "PET source_speed", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "PET axial_spacing",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.background_color",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5f) {
      return new Ok(
        new Item(tag, "PET patient_id", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "PET axial_start",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4d) {
      return new Ok(
        new Item(tag, "PET emission_present", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.annotation_size",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa4) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.height",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd7) {
      return new Ok(
        new Item(
          tag,
          "PET image_index_loc",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "PET source1_holder", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "PET acq_start", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.label_font_size",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb6) {
      return new Ok(
        new Item(tag, "PET ir_loop_filter", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "PET scanner_desc", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "PET number_for_reject", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "PET axial_cutoff_3d",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xdc) {
      return new Ok(
        new Item(
          tag,
          "PET ir_z_filter_ratio",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xbe) {
      return new Ok(
        new Item(tag, "PET ac_bp_filter", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "PET lower_energy_limit",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "PET scan_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "PET color_map_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "PET software_version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd2) {
      return new Ok(
        new Item(
          tag,
          "PET image_set_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xec) {
      return new Ok(
        new Item(tag, "3D Filter order", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2f) {
      return new Ok(
        new Item(tag, "PET binning_mode", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "PET source1_meas_dt", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "GE Advance ROI Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "PET pan_x", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "PET source2_radnuclide",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.end_symbol",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "PET ir_num_iterations", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd3) {
      return new Ok(
        new Item(tag, "PET constrast_route", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xcb) {
      return new Ok(
        new Item(
          tag,
          "PET vqc_x_axis_trans",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "PET meas_activity",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.line_type",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "PET cal_description", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7b) {
      return new Ok(
        new Item(tag, "PET is_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.legend_width",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.center_y",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x97) {
      return new Ok(
        new Item(
          tag,
          "PET trans_scan_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "PET bp_filter", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "PET validity_info", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.label_font_name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "PET norm_2d_cal_id", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "PET compression", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(new Item(tag, "PET type", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.color",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc3) {
      return new Ok(
        new Item(tag, "PET scatter_method", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "PET raw_data_blob",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.graph_width",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "PET sel_stop_cond_data",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x99) {
      return new Ok(
        new Item(tag, "PET blnk_cal_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "PET total_delays",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.legend_border",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "PET upper_reject_limit",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "PET atten_smooth", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "GE Advance Graph.grid", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xae) {
      return new Ok(
        new Item(
          tag,
          "PET tpluse_frame_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "PET bp_filter_order", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb7) {
      return new Ok(
        new Item(
          tag,
          "PET ir_pre_filt_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe5) {
      return new Ok(
        new Item(
          tag,
          "PET left shift",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.software_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "PET accum_bin_dur", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.foreground_color",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xcc) {
      return new Ok(
        new Item(
          tag,
          "PET vqc_x_axis_tilt",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x67) {
      return new Ok(
        new Item(
          tag,
          "PET table_z_position",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.curvepresent_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb1) {
      return new Ok(
        new Item(
          tag,
          "PET profile_spacing",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "PET landmark_name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xac) {
      return new Ok(
        new Item(
          tag,
          "PET bp_center_y",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.atten_corr_flag",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "PET axial_fov", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.multi_patient",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.y_axis_label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe6) {
      return new Ok(
        new Item(
          tag,
          "PET posterior shift",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.point_color",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "PET gantry_tilt_angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "PET software_version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xcf) {
      return new Ok(
        new Item(
          tag,
          "PET vqc_z_axis_trans",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "PET cal_type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.roi_type",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "PET archived", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "PET delayed_bias", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "PET wellcountercal_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "PET countrate_period", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.x_major_tics",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "PET angle_smooth_param",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe8) {
      return new Ok(
        new Item(tag, "PET acq_bin_num", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.curve_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "PET bp_center_l",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.legend_location_y",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "PET patient_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xbb) {
      return new Ok(
        new Item(
          tag,
          "PET post_filt_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.how_derived_size",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.title_font_name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa9) {
      return new Ok(
        new Item(tag, "PET other_atts_size", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.roi_name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.graph_description",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "PET coefficients", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9f) {
      return new Ok(
        new Item(tag, "PET axial_filter_3d", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "PET scan_fov", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.roi_size",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x77) {
      return new Ok(
        new Item(tag, "PET uncompressed_size", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.image_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "PET tracer_activity",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "raw_data_blob", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "PET upper_energy_limit",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6a) {
      return new Ok(
        new Item(
          tag,
          "PET start_location",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.annotation_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "PET coinc_output_mode", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "PET window_level_min",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "PET hosp_identifier", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "PET corr_file_size", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb3) {
      return new Ok(
        new Item(tag, "PET ir_num_subsets", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7d) {
      return new Ok(
        new Item(tag, "PET is_contents", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "PET scan_type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "PET start_condition", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "PET landmark_abbrev", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc8) {
      return new Ok(
        new Item(tag, "PET ovlp_frm_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "PET batch_description", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.y_axis_units",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.font_size",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.end_y",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc5) {
      return new Ok(
        new Item(
          tag,
          "PET scatter_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "PET normal_cal_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "PET theta_compression", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.statistics_type",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "GE Advance ROI.convex", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe7) {
      return new Ok(
        new Item(
          tag,
          "PET superior shift",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "PET scan_id", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "PET file_exists", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.foreground_color",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xcd) {
      return new Ok(
        new Item(
          tag,
          "PET vqc_y_axis_trans",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xab) {
      return new Ok(
        new Item(
          tag,
          "PET bp_center_x",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "PET axial_compression", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "PET scan_id", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd8) {
      return new Ok(
        new Item(tag, "PET frame_number", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.footer",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "PET archived", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "PET lower_reject_limit",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.end_x",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "PET cal_description", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "PET source1_activity",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.number_of_points",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "PET recon_method", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.roi_data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "PET window_level_max",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "PET slice_count", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "PET correction_cal_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.image_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.x_axis_max",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "PET scan_mode", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.roi_number",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "PET meas_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "PET lower_coinc_limit", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xdb) {
      return new Ok(
        new Item(tag, "PET ir_z_filter_flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "PET total_prompts",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "PET positron_fraction",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.graph_height",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe9) {
      return new Ok(
        new Item(
          tag,
          "PET acq_bin_dur_percent",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.y_axis_max",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xea) {
      return new Ok(
        new Item(tag, "3D Filter flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc1) {
      return new Ok(
        new Item(tag, "PET ac_img_smooth", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "PET software_version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3f) {
      return new Ok(
        new Item(
          tag,
          "PET half_life",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "PET window_level_type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe3) {
      return new Ok(
        new Item(
          tag,
          "PET phase percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.width",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe0) {
      return new Ok(
        new Item(
          tag,
          "PET num_of_time_slices",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "PET scan_perspective", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "PET software_version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.deadtime",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "PET axial_filter_3d", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "PET event_separation", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "PET software_version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "PET source2_activity",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe2) {
      return new Ok(
        new Item(tag, "PET rest_stress", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "PET zoom", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "PET raw_data_size", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd5) {
      return new Ok(
        new Item(
          tag,
          "PET loop_filter_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "GE Discovery PET Implementation Version Name",
          toList([new LongString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "PET coinc_delay_offset",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "PET upper_coinc_limit", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "PET activity_factor_hs",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.point_symbol",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.center_x",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.x_axis_min",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.curve_label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "PET cal_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "PET scan_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "PET wc_cal_rec_method", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe1) {
      return new Ok(
        new Item(tag, "PET unlisted_scan", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "PET slice_number", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.axes_color",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xce) {
      return new Ok(
        new Item(
          tag,
          "PET vqc_y_axis_swivel",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.legend_font_name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5b) {
      return new Ok(
        new Item(tag, "PET contrast_agent", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd0) {
      return new Ok(
        new Item(
          tag,
          "PET vqc_z_axis_roll",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "PET software_version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "PET other_atts", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "PET word_size", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.title",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "PET source1_half_life",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "PET post_inj_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "PET isotope", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "PET attenuation", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4e) {
      return new Ok(
        new Item(tag, "PET lower_axial_acc", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "Reformat group", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xda) {
      return new Ok(
        new Item(
          tag,
          "PET where_is_list_frame",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.graph_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "PET meas_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd6) {
      return new Ok(
        new Item(
          tag,
          "PET image_one_loc",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.how_derived",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "PET axial_angle_3d", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "PET activity_factor_hr",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "PET trig_rej_method", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "PET scan_ready", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.annotation_data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "PET where_is_corr", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb9) {
      return new Ok(
        new Item(
          tag,
          "PET response_filt_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xdf) {
      return new Ok(
        new Item(tag, "PET num_of_slices", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3b) {
      return new Ok(
        new Item(tag, "PET admin_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.start_x",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x79) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5a) {
      return new Ok(
        new Item(tag, "PET derived", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xba) {
      return new Ok(
        new Item(tag, "PET post_filter", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.roi_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "PET delayed_events", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.graph_border",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "PET wc_cal_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd4) {
      return new Ok(
        new Item(tag, "PET ctac_conv_scale", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "PET activity_factor_3d",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "PET exam_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "PET patient_position", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc9) {
      return new Ok(
        new Item(
          tag,
          "PET ovlp_trans_frm_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "PET tracer_name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "PET for_identifier",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "PET activity_factor_2d",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9a) {
      return new Ok(
        new Item(
          tag,
          "PET cac_edge_threshold",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "PET source2_holder", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "PET cal_hardware", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xad) {
      return new Ok(
        new Item(
          tag,
          "PET trans_frame_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.legend_font_size",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "PET landmark_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.curve_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "PET source2_half_life",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "PET default_flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "PET axial_angles_used", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x57) {
      return new Ok(
        new Item(
          tag,
          "PET normal_2d_cal_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "PET rotate", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "PET manufacturer", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "PET table_height",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.coordinate_system",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.start_y",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "PET frame_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.type",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Patient.software_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "PET actual_stop_cond", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "PET atten_smooth_param",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.software_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xca) {
      return new Ok(
        new Item(
          tag,
          "PET ovlp_tpulse_frm_id",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "PET wc_cal_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.software_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xbc) {
      return new Ok(
        new Item(tag, "PET ir_regularize", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "PET frame_size", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "PET total_counts",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.line_width",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8f) {
      return new Ok(
        new Item(
          tag,
          "PET bp_filter_cutoff",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "PET compatible_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.label_id",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "PET number_of_normals", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "PET axial_acceptance", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd1) {
      return new Ok(
        new Item(tag, "PET ctac_conv_scale", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "PET software_version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe4) {
      return new Ok(
        new Item(tag, "Recon Protocol", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.font_name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x85) {
      return new Ok(new Item(tag, "PET flip", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb8) {
      return new Ok(
        new Item(tag, "PET ir_loop_filt_parm", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "PET patient_id", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.footer_font_size",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3a) {
      return new Ok(
        new Item(
          tag,
          "PET pre_inj_volume",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4c) {
      return new Ok(
        new Item(
          tag,
          "PET source_location",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.line_type",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.legend_height",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "PET multi_patient", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "PET archived", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "PET scan_id", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7c) {
      return new Ok(
        new Item(tag, "PET is_source", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.roi_datetime",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9b) {
      return new Ok(
        new Item(
          tag,
          "PET cac_skull_offset",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc6) {
      return new Ok(
        new Item(
          tag,
          "PET seg_qc_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.start_symbol",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "PET collect_countrate", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xbd) {
      return new Ok(
        new Item(
          tag,
          "PET regularize_parm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "PET scan_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.graph_datetime",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc7) {
      return new Ok(
        new Item(tag, "PET overlap", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "GE Advance ROI.line_width",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation.point_symbol_dim",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "PET acq_duration", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "PET hosp_identifier", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3e) {
      return new Ok(
        new Item(
          tag,
          "PET radionuclide_name",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "PET start_cond_data", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "PET axial_cutoff_3d",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3c) {
      return new Ok(
        new Item(
          tag,
          "PET post_inj_activity",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "PET where_is_frame", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "PET pan_y", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.title_font_size",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9d) {
      return new Ok(
        new Item(tag, "PET radial_filter_3d", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9e) {
      return new Ok(
        new Item(
          tag,
          "PET radial_cutoff_3d",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "PET ac_bp_filt_order", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "PET triggers_acquired", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "PET triggers_rejected", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.legend_location_x",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "PET cal_type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x5 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "GE Advance CurvePresentation Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "PET upper_axial_acc", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "GE Advance ROI.color", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8d) {
      return new Ok(
        new Item(
          tag,
          "PET atten_coefficient",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Annotation.background_color",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "PET is_type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "PET archived", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "PET frame_valid", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "PET collect_singles", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "PET scan_description", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd9) {
      return new Ok(
        new Item(tag, "PET list_file_exists", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb5) {
      return new Ok(
        new Item(tag, "PET ir_corr_model", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "PET scan_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc4) {
      return new Ok(
        new Item(tag, "PET scatter_num_iter", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Curve.software_version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "PET bp_center_p",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "PET raw_data_type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "PET collect_deadtime", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xbf) {
      return new Ok(
        new Item(
          tag,
          "PET ac_bp_filt_cut_off",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "PET mask_width", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6f) {
      return new Ok(
        new Item(tag, "PET acq_bin_start", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.y_major_tics",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "PET cal_datetime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xdd) {
      return new Ok(
        new Item(
          tag,
          "PET num_of_rr_interval",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb4) {
      return new Ok(
        new Item(
          tag,
          "PET ir_recon_fov",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x3 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "GE Advance Graph.x_axis_label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Siemens: Thorax/Multix FD Image Stamp") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P Release 1") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Series Unique Identifier",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Acquisition Delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(new Item(tag, "Window ID", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "PACS Unique Identifier",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Physiological Display Enable Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Pixel Aspect Ratio", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xbf) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "ECG Triggering", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "ECG 2 Offset 1", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Physiological Display ID",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8f) {
      return new Ok(
        new Item(
          tag,
          "Physiological Display Select Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc5) {
      return new Ok(
        new Item(
          tag,
          "Field Of Shutter Rectangle",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x10) {
      return new Ok(new Item(tag, "Pixel Data", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc1) {
      return new Ok(
        new Item(tag, "Field Of Shutter", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Iris Diaphragm", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Preferred Physiological Channel Display",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "ECG Display Printing", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Video LineRate", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Cine Master", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Angulation", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x91) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf3) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Data Object Recognition Code",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Patient Entry ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "System Unique Identifier",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x77) {
      return new Ok(
        new Item(tag, "Window Select Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "Video Invert Nonsubtracted",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unique Identifier", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xce) {
      return new Ok(
        new Item(tag, "Shutter Enable Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Cine Parallel", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Mains Frequency", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "ECG 2 Offset 2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Study Unique Identifier",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7e) {
      return new Ok(
        new Item(
          tag,
          "ECG Display Printing Enable Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Video White Compression",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Series Unique Identifier",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x32) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xcf) {
      return new Ok(
        new Item(tag, "Shutter Select Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Video Scan Mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "ECG 1 Offset", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Exposure Channel First Image",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "ECG Display Printing ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xaf) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Image Identifier Format",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Video Invert Subtracted",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "Functional Shutter ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Image Data Consistency",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x67) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Processed Pixel Data Quality",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Exposure Channel", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Rotation", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa0) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Original Pixel Data Quality",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Cluster Unique Identifier",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Xray Technique", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Relative Image Time", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7f) {
      return new Ok(
        new Item(
          tag,
          "ECG Display Printing Select Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Processing Channel", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x61) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf5) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(new Item(tag, "Filter", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS TABLE LONGITUDINAL POSITION") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x99) {
      return new Ok(
        new Item(
          tag,
          "Longitudinal Table Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "VEPRO BROKER 1.0") {
    if (g0 === 0x0 && g1 === 0x57 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "VEPRO Data replace sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA ENCRYPTED SR DATA") {
    if (g0 === 0x70 && g1 === 0x15 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Toshiba US Private Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA_MEC_CT3") {
    if (g0 === 0x70 && g1 === 0x5 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Cardiac Reconstruction Gating Phase in Percent",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "The Acquisition Date of NRA", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Cardiac R-R Mean Time",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xb) {
      return new Ok(new Item(tag, "Filter", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Direction", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Frame Sort Key", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xd) {
      return new Ok(new Item(tag, "Organ", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "CT Private Data 2",
          toList([new OtherByteString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Number",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Pitch Factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "End Frame", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Local Series Number", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "CT Private Data 1",
          toList([new OtherByteString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Cardiac Reconstruction Mode",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "File Type Remarks", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xf1) {
      return new Ok(
        new Item(
          tag,
          "Protect Mark for Image, Curve or Private Record",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Scan Range", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Volume Vector", toList([new DecimalString()]), vm_3),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Contrast/Bolus Agent", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xf2) {
      return new Ok(
        new Item(
          tag,
          "Protect Mark for Series Record",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Local Frame No", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x48) {
      return new Ok(
        new Item(
          tag,
          "Respiratory Gating Inf.",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Large Data File Name",
          toList([new CodeString()]),
          new ValueMultiplicity(1, new Some(8)),
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Frame No.", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Expert Plan No.", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Table Speed in mm/rot",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Center",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Interval",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Total Frame Count in the Volume",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Raw Slice Information",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Raw Data Number", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Frame UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Cardiac Reconstruction Gating Phase in ms",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Large Data File Attribute",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Respiration Phase", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Special Helical ACQ No.",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Total Frames", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "Slice Pitch of 4D Volume",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Decrease in Artifact Filter",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Volume Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Main Modality in Study",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x46) {
      return new Ok(
        new Item(
          tag,
          "Absolute Table Position of 4D Volume",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Detector Slice Thickness in mm",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Convolution Kernel", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "DLP Dose Length Product",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "Relative Table Position of 4D Volume",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Enhanced CT Private Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Number of Detector rows to Reconstruct",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Start Frame", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Position", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "CT Private Data 3",
          toList([new OtherByteString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction ROI No.",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Volume Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Volume UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Series Comment", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xf3) {
      return new Ok(
        new Item(
          tag,
          "Protect Mark for Study Record",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Frame Sort Order", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Correction Type",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Mitra Object Document 1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "IMPAX object document",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "IMPAX markup XML stored",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "QVA") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Calibration Frame", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "End Diastolic Frame",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "End Systolic Frame", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "End Diastolic Volume",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "End Systolic Volume",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Stroke Volume", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Cardiac Output", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Ejection Fraction", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Body Surface Area", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "Artery Territory Region",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Number of Diseased Vessels",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Hypokinesis in Region",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Hyperkinesis in Region",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "percent of chords with hyperkinesis <- 2 SD",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "percent of chords with alkinesis/dyskinesis",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Calibration Factor", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_IMAG_01") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Version of the hdr struct",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Imaging Options", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Scan End Location",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "RAS letter for anterior/posterior",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Image location",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "Normal S coord",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Plane Type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels2",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x4c) {
      return new Ok(
        new Item(
          tag,
          "A Coord of Bottom Right Corner",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "RAS letter for scout end loc",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x4d) {
      return new Ok(
        new Item(
          tag,
          "S Coord of Bottom Right Corner",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "Normal R coord",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "RAS letter of image location",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Image dimension - Y",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "RAS letter for scout start loc",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Vma phase", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Scan Start Location",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Vma mamp", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Pulse Sequence", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x4b) {
      return new Ok(
        new Item(
          tag,
          "R Coord of Bottom Right Corner",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Number of Excitations",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x46) {
      return new Ok(
        new Item(
          tag,
          "Normal A coord",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Smart scan ON/OFF flag",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Oblique Plane", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "RAS letter for side of image",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Foreign Image Revision",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Vma mod", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Upper range of Pixels2",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Center A coord of plane image",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Scout Type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Image archive flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Center R coord of plane image",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Advantage comp. Overflow",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "S Coord of Top Right Corner",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Center S coord of plane image",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Advantage comp. Underflow",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Image dimension - X",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "A Coord of Top Right Corner",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x1f) {
      return new Ok(new Item(tag, "Vma clip", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Len of tot hdr in bytes No longer supported",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x48) {
      return new Ok(
        new Item(
          tag,
          "R Coord of Top Right Corner",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Imaging Mode", toList([new SignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "CARDIO-SMS 1.0") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Private Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Private Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Private Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Private Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Private Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "ACOM flags", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Private Data stream", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Canon Inc.") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Canon Internal Data 1",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1f) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Performed number of series",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Performed number of images",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7f) {
      return new Ok(
        new Item(
          tag,
          "Canon Internal Data 111",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GE LUT Asymmetry Parameter") {
    if (g0 === 0x0 && g1 === 0x45 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "LUT Assymetry", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips MR Imaging DD 004") {
    if (g0 === 0x20 && g1 === 0x5 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x78) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x54) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_2),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x58) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x57) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x25) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x64) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x76) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x72) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x96) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x89) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x90) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x79) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x48) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_2),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x42) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x77) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x97) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x46) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x98) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x73) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x71) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x45) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x91) {
      return new Ok(new Item(tag, "Unknown", toList([new PersonName()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_2));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new CodeString()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x43) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x56) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x75) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x74) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x35) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x99) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips Imaging DD 067") {
    if (g0 === 0x40 && g1 === 0x1 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "BioPri3D") {
    if (g0 === 0x0 && g1 === 0x11 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Segmentation Data",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x63 && e0 === 0x10) {
      return new Ok(
        new Item(tag, "Private Creator", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GDCM CONFORMANCE TESTS") {
    if (g0 === 0x4d && g1 === 0x4d && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Array Container Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x4d && g1 === 0x4d && e1 === 0x2) {
      return new Ok(
        new Item(tag, "0-Filled Array", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS_FLCOMPACT_VA01A_PROC") {
    if (g0 === 0x0 && g1 === 0x17 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Internal Data",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Internal Data",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "Internal Data",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4d) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x8d) {
      return new Ok(
        new Item(
          tag,
          "Internal Data",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x5a) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x5b) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Internal Data",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x8c) {
      return new Ok(
        new Item(
          tag,
          "Internal Data",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4e) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x89) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4c) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Internal Data", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Siemens: Thorax/Multix FD Raw Image Settings") {
    if (g0 === 0x0 && g1 === 0x25 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Manual Cropping", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Image Crop Upper Right",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Image Alignment", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Harmonization Kernel", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "Image Crop Lower Left",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Collimator Low Right X Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Gamma LUT Parameter 2",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "System Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Raw Image File Name", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Collimator Manual", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Gamma LUT", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Collimator Up Right X Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Gain",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Set Gray", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Image Rows", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Active Image Columns", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Collimator Low Left X Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Collimator Up Left Y Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Image Crop Upper Left",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Global Offset", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Collimator Low Left Y Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Gamma LUT Parameter 1",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Image Columns", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Collimator Up Left X Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Auto Gain", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Gamma LUT Parameter 4",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Image Crop Lower Right",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Collimator Low Right Y Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Active Image Rows", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Kernel",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Raw Image Amplification",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Harmonization Gain",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Gamma LUT Parameter 3",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Collimator Up Right Y Percentage",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Ortho Sub Sampling", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS SC IMG SAD") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Non-RT Image SAD", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ACRQA_1.0 BLOCK3") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "CR DRE", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CR DRN", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "CR ORE", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "CR ORN", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "CR ORD", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "CR Cassette Size", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "CR Machine ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "CR Machine Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "CR Technician Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "CR ES Parameters", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SCHICK TECHNOLOGIES - Change Item Creator ID") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Change List Item UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Operation", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(new Item(tag, "Date", toList([new DateTime()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "User Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Additional Change Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ADWSoft_3D1") {
    if (g0 === 0x0 && g1 === 0x47 && e1 === 0xc2) {
      return new Ok(
        new Item(
          tag,
          "Volume Upper Left High Corner TLOC",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Volume Skew Base", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x9c) {
      return new Ok(
        new Item(tag, "Transform Label", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Contrast Agent Volume List",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf8) {
      return new Ok(
        new Item(
          tag,
          "Max Converted Density",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb8) {
      return new Ok(
        new Item(tag, "Wireframe Attributes", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xfc) {
      return new Ok(
        new Item(
          tag,
          "Volume midscan times list",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Volume Registration Transform Translation Vector",
          toList([new DecimalString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Volume Tilt", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xbb) {
      return new Ok(
        new Item(tag, "Wireframe Point List", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Acquisition DLX 2D Series Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xff) {
      return new Ok(
        new Item(tag, "Protocol Title", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Volume Segment Count",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Volume Voxel Count", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xfe) {
      return new Ok(
        new Item(tag, "Protocol Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x9a) {
      return new Ok(
        new Item(
          tag,
          "Transform Rotation Matrix",
          toList([new DecimalString()]),
          new ValueMultiplicity(9, new Some(9)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "DLX Calibration Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb9) {
      return new Ok(
        new Item(tag, "Wireframe Point Count", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x64) {
      return new Ok(
        new Item(
          tag,
          "Volume Registration Transform Rotation Matrix",
          toList([new DecimalString()]),
          new ValueMultiplicity(9, new Some(9)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "Location System", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "Frame Count", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd2) {
      return new Ok(
        new Item(
          tag,
          "Volume Gradient List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb6) {
      return new Ok(
        new Item(tag, "Wireframe Group Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Exposure List", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xbc) {
      return new Ok(
        new Item(
          tag,
          "Wireframe Points Coordinates",
          toList([new DecimalString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb1) {
      return new Ok(
        new Item(tag, "Wireframe Count", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "Volume Voxel Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd3) {
      return new Ok(
        new Item(
          tag,
          "Volume Density List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x9b) {
      return new Ok(
        new Item(
          tag,
          "Transform Translation Vector",
          toList([new DecimalString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "Volume Voxel Ratio", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x99) {
      return new Ok(
        new Item(tag, "Transform Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd1) {
      return new Ok(
        new Item(
          tag,
          "Volume Segment List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "DLX Calibration Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf5) {
      return new Ok(
        new Item(
          tag,
          "Min original density",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xba) {
      return new Ok(
        new Item(tag, "Wireframe Timestamp", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb7) {
      return new Ok(
        new Item(tag, "Wireframe Color", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf4) {
      return new Ok(
        new Item(tag, "Volume Name(s)", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Acquisition DLX Identifier",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Volume Center Point",
          toList([new DecimalString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "Volume Threshold Value",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "XA 3D Reconstruction Algorithm Version",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Transform Count", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb5) {
      return new Ok(
        new Item(tag, "Wireframe Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Number Of Injections",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xfd) {
      return new Ok(
        new Item(
          tag,
          "Volume Registered Phases List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Volume Slice Count", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Parameters Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Used Frames", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "XA 3D Reconstruction Algorithm Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Acquisition DLX 2D Series Count",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "KPV List", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Volume Slice Size", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Volume Color", toList([new UnsignedLong()]), vm_3_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xfb) {
      return new Ok(
        new Item(
          tag,
          "Phase Number (percent)",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd4) {
      return new Ok(
        new Item(
          tag,
          "Volume Z Position List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf7) {
      return new Ok(
        new Item(
          tag,
          "Min Converted Density",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf6) {
      return new Ok(
        new Item(
          tag,
          "Max original density",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xfa) {
      return new Ok(
        new Item(
          tag,
          "Protocol Resolution",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xc1) {
      return new Ok(
        new Item(
          tag,
          "Volume Slice To RAS Rotation Matrix",
          toList([new DecimalString()]),
          new ValueMultiplicity(9, new Some(9)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd5) {
      return new Ok(
        new Item(
          tag,
          "Volume Original Index List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xc0) {
      return new Ok(
        new Item(
          tag,
          "Volume Upper Left High Corner RAS",
          toList([new DecimalString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "X-Ray Tube Current List",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x59) {
      return new Ok(
        new Item(
          tag,
          "Volume Z Position Size",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "DLX Calibration Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf9) {
      return new Ok(
        new Item(tag, "Protocol Film Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "Wireframe List", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Volume Base Line",
          toList([new DecimalString()]),
          new ValueMultiplicity(9, new Some(9)),
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS I0 MU SCALE FACTOR") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x97) {
      return new Ok(
        new Item(tag, "I0-MU Scale Factor", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_HINO_CT_01") {
    if (g0 === 0x0 && g1 === 0x4b && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Beam Thickness",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x4b && e1 === 0x2) {
      return new Ok(
        new Item(tag, "R Time", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x4b && e1 === 0x3) {
      return new Ok(
        new Item(tag, "HBC number", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "QCA_RESULTS") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Analysis Views", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Segment", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Pre Catheter Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Pre Catheter Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Pre Reference Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Pre Minimum Lumen Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Pre Average Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Pre Stenosis Length",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Pre Stenosis %", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Pre Geometric Area Reduction %",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Post Catheter Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Post Catheter Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Post Reference Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Post Minimum Lumen Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Post Average Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Post Stenosis Length",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Post Stenosis %", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Post Geometric Area Reduction %",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Calibration Frame", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "End Diastolic Frame",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "End Systolic Frame", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "End Diastolic Volume",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "End Systolic Volume",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Stroke Volume", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Ejection Fraction", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Body Surface Area", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "Artery Territory Region",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Number of Diseased Vessels",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Hypokinesis in Region",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Hyperkinesis in Opposite Region",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "Percent Total LV Hypokinesis",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Calibration Factor", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "POLYTRON-SMS 2.5") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Private Data 1", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Private Data 2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Private Data 3", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Private Data 3", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Private Data 4", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Private Data 5", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Private Data 6", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x89 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CSA ENVELOPE") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "syngo Report Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "syngo Report Presentation",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CT VA0  OST") {
    if (g0 === 0x60 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Osteo Contour Comment", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x60 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Osteo Contour Buffer",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(256, new Some(256)),
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MR HEADER") {
    if (g0 === 0x0 && g1 === 0x51 && e1 === 0xd) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "TablePositionOrigin", toList([new SignedLong()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "GradientMode", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "AcquisitionMatrixText",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "BandwidthPerPixelPhaseEncode",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "CoilString", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "CSA Image Header Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "CSA Image Header Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "B_value", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "FMRIStimulInfo", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "RBMoCoRot", toList([new FloatingPointDouble()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "FlowCompensation", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "NumberOfImagesInMosaic",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "MosaicRefAcqTimes",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "DiffusionDirectionality",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "SlicePosition_PCS",
          toList([new FloatingPointDouble()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "B_matrix", toList([new FloatingPointDouble()]), vm_6),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "SliceResolution", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "RealDwellTime", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "CSA Image Header Version ??",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "SliceMeasurementDuration",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "CSA Image Header Version ??",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "TimeAfterStart", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "PATModeText", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "ImaAbsTablePosition", toList([new SignedLong()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "PositivePCSDirections",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "DiffusionGradientDirection",
          toList([new FloatingPointDouble()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "RBMoCoTrans", toList([new FloatingPointDouble()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "ImaRelTablePosition",
          toList([new IntegerString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x19) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SET WINDOW") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Set Window Image Filter", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Set Window Magnification Power",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS FIELD ID") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x80) {
      return new Ok(new Item(tag, "Field ID", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ADWSoft_DPO") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Private Entity Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Private Entity Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Private Entity Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Private Entity Launch Command",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "Private Entity Type", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SCHICK TECHNOLOGIES - Note Item Creator ID") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(new Item(tag, "Text", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(new Item(tag, "Date", toList([new DateTime()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "User Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Coordinates (X, Y)", toList([new UnsignedShort()]), vm_2),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Comments", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unique Identifier", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Data Object Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Data Object Subtype", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(new Item(tag, "Organ", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Allergy Indication", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Pregnancy", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Compression Algorithm", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DLX_EXAMS_01") {
    if (g0 === 0x0 && g1 === 0x15 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Stenos_calibr_ratio;",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Stenos_magnification;",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Cardiac_calibr_ratio;",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS RA GEN") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Table Tilt", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "InversNot Invers", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Images in All Scenes",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "PERI Overlap Bottom", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "XRay Data Valid", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Patient DOB", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "FramesPhase", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Stepping Direction", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2a) {
      return new Ok(
        new Item(
          tag,
          "Number of Positions",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "Table Isocenter Height",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "PERI Total Scenes", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Image Transfer Delay",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Mixed Pulse Mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Images in Study", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Scenes in Study", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "Table Side Offset", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "Filling Average Factor",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "PERI Overlap Top", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Acquisition Index", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4c) {
      return new Ok(
        new Item(
          tag,
          "Blanking Circle Diameter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Scene Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Number of Phases", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9e) {
      return new Ok(
        new Item(tag, "Nativ Review Flag", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "Table Longitudinal Position",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Acquired Plane", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Table Axis Rotation",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Total Fluoro TimePatient",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9c) {
      return new Ok(
        new Item(
          tag,
          "II Level CalibrationFactor",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Stand Data Valid", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Dose Area ProductPatient",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2e) {
      return new Ok(
        new Item(
          tag,
          "Framerate for 8 Positions",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5e) {
      return new Ok(
        new Item(
          tag,
          "Collimation Data Valid",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5c) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Images in Photofile",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Patient Initial Puck Counter",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "ReferencePhotofile Flag",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "Raw Image Number", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Scene Flag", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "PERI Sequence Number",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Patient Initial Position",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "RadWorksTBR") {
    if (g0 === 0x31 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "AMI Compression Type (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x11 && e1 === 0xff) {
      return new Ok(new Item(tag, "<internal", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DL_FRAME_01") {
    if (g0 === 0x0 && g1 === 0x25 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Collimator Up Horizontal Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Fov Dimension", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Table Vertical Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x3a) {
      return new Ok(
        new Item(
          tag,
          "Contour Filter Angle",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x3c) {
      return new Ok(
        new Item(tag, "Internal Label Frame", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2b) {
      return new Ok(
        new Item(
          tag,
          "Spectral Filter Znb",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Beam Cover Area", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "Table Longitudinal Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Positioner Primary Angle",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x39) {
      return new Ok(
        new Item(
          tag,
          "Contour Filter Distance",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Pw Commanded", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Pivot Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Mas Commanded", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Vertices Polygonal Collimator",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Frame Id", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Sensor Feedback", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Distance Source To Patient",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Kvp Commanded", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Target Cnr", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Contrast Commanded", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Distance Source To Skin",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Positioner Secondary Angle",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Kvp Actual", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2d) {
      return new Ok(
        new Item(
          tag,
          "Spectral Filter Density",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Arc Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2c) {
      return new Ok(
        new Item(
          tag,
          "Spectral Filter Weight",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Larm Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2f) {
      return new Ok(
        new Item(
          tag,
          "Spectral Filter Status",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x37) {
      return new Ok(
        new Item(
          tag,
          "Collimator Low Horizontal Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Cnr Commanded", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Distance Source To Detector",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x3b) {
      return new Ok(
        new Item(tag, "Table Rotation Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Target Entrance Dose",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Ept Actual", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Collimator Right Vertical Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Collimator Left Vertical Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Table Lateral Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x25) {
      return new Ok(new Item(tag, "Grid", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Frame Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Mas Actual", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Fov Origin", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Pw Actual", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Beam Orientation", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2e) {
      return new Ok(
        new Item(
          tag,
          "Spectral Filter Thickness",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ACUSON:1.2.840.113680.1.0:7f10") {
    if (g0 === 0x7f && g1 === 0xdf && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Gamma coefficient", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "ECG Sample Size", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x64) {
      return new Ok(
        new Item(tag, "CD Velocity Scale Max", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf5) {
      return new Ok(
        new Item(tag, "Teaching Study", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "B-mode 1D Post Processing Curve",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x7f) {
      return new Ok(new Item(tag, "B Delta", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Perspective Capture Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x69) {
      return new Ok(
        new Item(tag, "CD Pan Box Min X0", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Persistence adaptive flag",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x28) {
      return new Ok(
        new Item(tag, "CD Color Mix Points X1", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Capture Type Name", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "CD Pan Box Min Y0", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Last Destruction Timestamp",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xd) {
      return new Ok(
        new Item(tag, "B-Color-On Flag", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Pixels Per Second", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x6f) {
      return new Ok(
        new Item(tag, "CPS Balance Setting", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x67) {
      return new Ok(new Item(tag, "CD Balance", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Number of Capture Types", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x66) {
      return new Ok(
        new Item(tag, "CD Frequency", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x20) {
      return new Ok(new Item(tag, "Left angle", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x7d) {
      return new Ok(
        new Item(tag, "B-mode Post Processing", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "ECG Sample Count", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Acquisition Type:", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Observation Date Time SQ", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf1) {
      return new Ok(
        new Item(tag, "Trigger Mask.", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Persistence ID", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x73) {
      return new Ok(
        new Item(tag, "B-mode Dynamic Range", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Color Invert", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x78) {
      return new Ok(
        new Item(tag, "B-mode Display Depth End", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x62) {
      return new Ok(
        new Item(tag, "CD Dynamic Range", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "CD Pan Box Min Y1", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf6) {
      return new Ok(
        new Item(tag, "Series Base UID", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x72) {
      return new Ok(
        new Item(tag, "B-mode Frequency", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x76) {
      return new Ok(
        new Item(tag, "B-mode Persistence", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Transformation Matrix Sequence",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x8d) {
      return new Ok(
        new Item(tag, "ECG Data Value", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x7c) {
      return new Ok(
        new Item(tag, "B Preset Image Look", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "ECG Sampling Interval (milliseconds)",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x7e) {
      return new Ok(new Item(tag, "B Edge", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "CD Pan Box Min X1", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Alpha coefficient", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Capture Type Number", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x75) {
      return new Ok(
        new Item(tag, "B-mode Space Time", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x89) {
      return new Ok(
        new Item(tag, "ECG Reference Timestamp", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "Live Dual Mode Indicator", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x71) {
      return new Ok(
        new Item(tag, "3DCard Xdcr Angle", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "B-mode Delta (ECRI) Map Diagonal",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x92) {
      return new Ok(
        new Item(tag, "3DCard HRWave Max", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Microseconds in unit timestamp",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Acuson Region Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf4) {
      return new Ok(
        new Item(tag, "Last Modify Time", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Bytes Per Timestamp", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Persistence SQ", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Full Colormap.", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Color Map Family", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x63) {
      return new Ok(
        new Item(tag, "CD Velocity Scale Min", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x70) {
      return new Ok(
        new Item(tag, "3DCard Step Angle", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "CPS Map Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Color Accent", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Persistence Coefficient Mode",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf3) {
      return new Ok(
        new Item(tag, "Last Modify Date", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Acuson Mechanical Apex Y", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "CPS Map Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "CD Color Mix Points Y2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Persistence Mode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x79) {
      return new Ok(
        new Item(tag, "B-mode Res Mode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x86) {
      return new Ok(
        new Item(tag, "R-Wave Timestamp", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x65) {
      return new Ok(
        new Item(tag, "CD Color Mode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Persistence Time Flag", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Start Stopwatch Timestamp",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x77) {
      return new Ok(
        new Item(
          tag,
          "B-mode Display Depth Start",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x7a) {
      return new Ok(
        new Item(
          tag,
          "B-mode Preset Application",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf2) {
      return new Ok(
        new Item(tag, "Study Directory", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x7b) {
      return new Ok(
        new Item(tag, "Image Spec Name", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Acuson Mechanical Apex X", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x61) {
      return new Ok(new Item(tag, "CD PRI", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Acoustic Frame Timestamp", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Acuson Image Apex Y", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Image Format", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Acuson Image Apex X", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Contrast/Active Image Indicator",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x90) {
      return new Ok(
        new Item(tag, "3DCard Clipset ID", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "CD Color Mix Points X2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x22) {
      return new Ok(new Item(tag, "Right angle", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x68) {
      return new Ok(new Item(tag, "CD Delta", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Color Baseline", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x91) {
      return new Ok(
        new Item(tag, "3DCard HRWave Min", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x29) {
      return new Ok(
        new Item(tag, "CD Color Mix Points Y1", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Persistence Frame Rate", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Lossy Compression Ratio", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x60) {
      return new Ok(
        new Item(tag, "CD Steering Angle", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x74) {
      return new Ok(
        new Item(tag, "B-mode Frame Rate", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Imaging Dynamics Company Ltd.") {
    if (g0 === 0x43 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(new Item(tag, "Custom Tag", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x43 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(new Item(tag, "Custom Tag", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x43 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x43 && g1 === 0x21 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x43 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Custom Tag", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x43 && g1 === 0x21 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Custom Tag", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x43 && g1 === 0x21 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Custom Tag", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMICAS0") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(new Item(tag, "", toList([new UniqueIdentifier()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x8) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x16) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS RIS") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Patient UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Patient ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Patient Registration Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Patient Registration Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Patient NameRIS", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Patient Prename", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Patient Hospital Status",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Medical Alerts", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Contrast Allergy", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Request UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Requesting Physician", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Requested Physician", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Patient Study UID", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "IMS s.r.l. Biopsy Private Code") {
    if (g0 === 0x12 && g1 === 0x69 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Biopsy Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x69 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Biopsy Markers X",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x12 && g1 === 0x69 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Biopsy Markers Y",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x12 && g1 === 0x69 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Biopsy Markers Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x12 && g1 === 0x69 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Biopsy Area Left Border",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x12 && g1 === 0x69 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Biopsy Area Right Border",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x12 && g1 === 0x69 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Biopsy Area Top Border",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x12 && g1 === 0x69 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Biopsy Area Bottom Border",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Picker NM Private Group") {
    if (g0 === 0x70 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Private", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(new Item(tag, "Private", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x11) {
      return new Ok(new Item(tag, "Private", toList([new LongString()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Private", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Contains a text string that includes some of the same information that appears on the Odyssey Clinical Index (image directory) for this Image.",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x43 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Private.", toList([new ShortString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SVISION") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Ref. Image Instance UID",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Extended Body Part", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Rel. Presentation State Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Bucky Format", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Lower Window Offset",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "Images SOP Class", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Tube Turn Angle", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Shape Factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Bucky Grid", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Brightness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Filter Thickness 1", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Image Laterality", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb1) {
      return new Ok(
        new Item(
          tag,
          "Shift Reference Value",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Burned In Annotation",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "Stand drive level", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Max. Window Latitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Number of Series", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Min. Window Latitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "New Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Newest Study", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Threshold C-Algorithm",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Cut Out Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Not Processed Image",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Tube Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Find Range Algorithm", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Stored Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Extended Exposure Time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Decomposition Layer",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(new Item(tag, "Focus", toList([new IntegerString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Letter Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Collimator Distance X",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Upper Window Offset",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Sensometric Curve", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "AEC Field", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Retrieved Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Media Stored Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Max. Printable Density",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "Dose Indicator", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Patient Thickness", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Contrast", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Age Group", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Scheduled Procedure Step",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Edge Contrast Boosting",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "Filter Material 2", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Fixed Grid System", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Key Note Instance UID",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Desk Command", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Image Stitched Manually",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Rel. Window Alignment",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Beam Distance", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Bucky Height", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Newest Series", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Latitude Reduction", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Referenced Image SOP Class",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Filter Thickness 2", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Number of Studies", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Collimator Distance Y",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "Image SOP Class", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "AEC Density", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Extended View Position",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Noise Reduction", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Duplicated Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Central Beam Y", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "AEC Film Screen", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "Collimator Angle", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Filter Material 1", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Oldest Study", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Filter Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(
          tag,
          "Extended X-ray Tube Current",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Image Stitched Automatically",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Original Image", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "Actual Exposure Time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "C-Arm Angle", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Oldest Series", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Workstation Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Source Image File", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Min. Printable Density",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Bucky Angle", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Object Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Source UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Image State", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Storage State", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Central Beam X", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Contrast Amplification",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Rel. Presentation State UID",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Mortara_Inc") {
    if (g0 === 0x14 && g1 === 0x55 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "ELI Interpretation Vector",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x1) {
      return new Ok(new Item(tag, "Custom ID", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x2) {
      return new Ok(new Item(tag, "Race", toList([new UnlimitedText()]), vm_1));
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Social Security Number",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Attending Physician",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Procedural Diagnosis",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x6) {
      return new Ok(new Item(tag, "Note1", toList([new UnlimitedText()]), vm_1));
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x7) {
      return new Ok(new Item(tag, "Note2", toList([new UnlimitedText()]), vm_1));
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Order Request Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x14 && g1 === 0x55 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Manufacturer Name", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_ICS Release 1;6") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x37) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2e) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2f) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x36) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4f) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2b) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2d) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3d) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5c) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6d) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x38) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x65) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_ICS Release 1;1") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xcb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xcc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xcd) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd6) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "EMAGEON STUDY HOME") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_XR3DCAL_01") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "3Dcal image rows", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "3Dcal image columns",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "3Dcal field of view",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "3Dcal acquisition date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "3Dcal acquisition time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "3Dcal calibration processing date",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "3Dcal calibration processing time",
          toList([new Time()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "3Dcal L arm angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "3Dcal Pivot angle vector",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "3Dcal C arm angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "3Dcal matrix sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "3Dcal matrix elements",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "3Dcal algorithm version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "3Dcal 3D frame unit size",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "3Dcal calibration mode",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "3Dcal image frame origin row",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "3Dcal image frame origin column",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "3Dcal positioner pivot rotation speed",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "3Dcal number of images",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "3Dcal Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "3Dcal image pixel spacing",
          toList([new FloatingPointSingle()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "3Dcal centering mode", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AGFA") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Identification Code",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Identification Data (Note 2)",
          toList([new LongString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Sensitometry Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Window/Level List (Note 3)",
          toList([new ShortText()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Dose Monitoring List", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Other Info (Note 5)", toList([new LongString()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Clipped Exposure Deviation",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Logarithmic PLT Full Scale",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Total number of series",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Session Number", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "ID Station name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Number of images in study to be transmitted (only sent with autoverify: on)",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Total number of images",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Geometrical Transformations",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Roam Origin", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Zoom factor", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(new Item(tag, "Status", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/Print/Version 5.1") {
    if (g0 === 0x41 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(new Item(tag, "<internal", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "<internal", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_GENIE_1") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Interpolation Center Y",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x18) {
      return new Ok(new Item(tag, "Time", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "Energy Peak (retired)", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "StylePSize", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Study Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "SOPClassUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Number View Sets", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "ShapePtsSpace", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "FOV", toList([new FloatingPointDouble()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Xeleris Data Object Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "Ref Slice Width", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Num Views Acquired (retired)",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "Pixel Overflow Flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "FOV Mask Y Cutoff Distance",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Seeds", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "CurveType", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "BulkDataFormat", toList([new LongText()]), vm_1_to_n),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Software version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "DatasetROIMapping",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "SOPInstanceUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Xeleris Frame Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Num Beats", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Preceding Beat", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x25) {
      return new Ok(new Item(tag, "TxtText", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "Axial Acceptance Angle",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Patient Flags", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Rotation Angle",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2a) {
      return new Ok(
        new Item(
          tag,
          "Phase Duration (retired)",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "TxtY", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Study Flags", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Cursor Coordinates", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xa) {
      return new Ok(new Item(tag, "XUnits", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Start Angle",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "CurveName", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2f) {
      return new Ok(
        new Item(tag, "Table Direction", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Patient Creation Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Use FOV Mask", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "SegStyleLine", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Picture Object Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "Number of Cursors", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "LineDashLength", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Source Translator", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Dataset Name", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Energy Range", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Number of triggers", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Series Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x41) {
      return new Ok(new Item(tag, "Modified", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4d) {
      return new Ok(
        new Item(tag, "Interactivity", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "DerivedFromImageUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Back Proj Filter Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Copper Attenuator Thickness",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Rotational Continuous Speed",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7b) {
      return new Ok(
        new Item(
          tag,
          "Back Proj Filter Param",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Reference Dataset UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Shape", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "ProtocolName", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "ROI Top Left", toList([new SignedLong()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Window Inverse Flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5d) {
      return new Ok(new Item(tag, "ROIFlags", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x36) {
      return new Ok(new Item(tag, "CurveUID", toList([new LongString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x39) {
      return new Ok(new Item(tag, "Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6d) {
      return new Ok(
        new Item(
          tag,
          "Motion Curve UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xd) {
      return new Ok(new Item(tag, "Suspend", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Fscalar", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7f) {
      return new Ok(
        new Item(
          tag,
          "Ref Trans Pixel Volume",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Energy Number", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Series Comments", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Period", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x65) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "RelevantDataUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x63) {
      return new Ok(
        new Item(
          tag,
          "Xeleris Data Information Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Number MG Time Slots", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Threshold Center",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x30) {
      return new Ok(new Item(tag, "ROIName", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Orientation Angle", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xc) {
      return new Ok(new Item(tag, "Edit", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5b) {
      return new Ok(
        new Item(
          tag,
          "ShapeCtrlPts",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3b) {
      return new Ok(
        new Item(tag, "StartDate", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4c) {
      return new Ok(
        new Item(tag, "LineThickness", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "ECT Phase Num", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2f) {
      return new Ok(
        new Item(tag, "Overflow Level", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "StyleFill", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Det Ang Separation",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x44) {
      return new Ok(new Item(tag, "Name", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Initiation Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "TextAnnots", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "Recon Area", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "ShapeCPSpace", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Series Flags", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Xeleris Detector Information Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Picture Format", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "SegAllowDirInt", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "DoubleDataFormat", toList([new LongText()]), vm_1_to_n),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x38) {
      return new Ok(new Item(tag, "Modified", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(new Item(tag, "Modified", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5f) {
      return new Ok(new Item(tag, "Id", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Allocate trigger buffer",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "SOPInstanceUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "SDODoubleData SQ", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "Trigger History UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3c) {
      return new Ok(
        new Item(tag, "CompletionDate", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Acq Zoom (retired)", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "LineStyle", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Dataset Object Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "ROIArea", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "NameDisplay", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x8d) {
      return new Ok(
        new Item(tag, "Three-D Zero In", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "RR Window Width", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "SegStylePoint", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Start View", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "ShapeTilt",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "NormalColor", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x64) {
      return new Ok(
        new Item(
          tag,
          "Spatial Orientation",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Transmission Mask Width",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "SegStylePColour", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Xeleris Energy Window Range Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Starting Heart Rate", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "SegStyleFill", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Number Detectors", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "RR Interval Window Number",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(new Item(tag, "Srid", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Detector Number", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(new Item(tag, "Legend", toList([new LongString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x20) {
      return new Ok(new Item(tag, "SegName", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Quant Filter Flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x42) {
      return new Ok(new Item(tag, "Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6c) {
      return new Ok(
        new Item(
          tag,
          "Motion Threshold",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Description", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Linear FOV", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Energy Correct Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Accepted Beats Time",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Number RR Windows", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Acq Pan (retired)", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "DoubleData",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Series Accepted Beats", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7d) {
      return new Ok(
        new Item(tag, "Attenuation Coef", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "IntData", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xb) {
      return new Ok(new Item(tag, "YUnits", toList([new LongString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "DatasetName", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Threshold", toList([new FloatingPointDouble()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Spatial Correct Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Patient Creation Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Trigger data",
          toList([new OtherByteString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Radio Nuclide Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Xeleris Energy Window Information Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Completion Time", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3e) {
      return new Ok(
        new Item(tag, "FOV Shape", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Attenuation Threshold",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Patient Object Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7c) {
      return new Ok(
        new Item(
          tag,
          "Back Proj Filter Param 2",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "StylePoint", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "FillPattern", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Effective Series Duration",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "SeedSpace", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "AutoTrack Width", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "StyleLine", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "Pre Filter Param 2", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "GraphType", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Uniformity Correct Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "Starcam Reference Dataset",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "Track Beat Average", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "Cursor Length", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Trigger size", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "Dual Energy Processing",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "TxtX", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Image Orientation", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x17) {
      return new Ok(new Item(tag, "Date", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "StringDataFormat", toList([new LongText()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3b) {
      return new Ok(
        new Item(tag, "Pixel Scale", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Num ECT Phases", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "Threshold Width",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x77) {
      return new Ok(
        new Item(tag, "Attenuation Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Byte Order", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "SegStylePSize", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Image Size", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Pre Filter Param", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Interpolation Distance",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x37) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Specific Correction Name",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "DerivedFromImages",
          toList([new SignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "Three-D Zero", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x15) {
      return new Ok(new Item(tag, "Segments", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Initiation Delay", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x45) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "WB Scan Num", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x63) {
      return new Ok(
        new Item(
          tag,
          "Spatial Offset",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Recon Pan LR Offset",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Processing Parent UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "RR Window Offset", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Recon Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "SOPClassUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "FOV Mask Cutoff Angle", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Number Energy Sets", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Rfmtr Trans Ref mm",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "MG Bin Number", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "ProtocoldataFlags", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "RAL Flags", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1c) {
      return new Ok(new Item(tag, "BulkData", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Study Comments", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Comb Head Number", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "Three-D Zero Length", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "Two Line Trans Ref", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "CurveFlags", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "User Orientation", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(new Item(tag, "Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "BpSegPairs", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "Slice Width Pixels", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Recon Arc", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "ProtocolDataUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "BpSeg", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Theta Acceptance Value",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "ShapeCtrlPtsCounts",
          toList([new SignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2d) {
      return new Ok(
        new Item(
          tag,
          "View Y Adjustment",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "ROI Bottom Right", toList([new SignedLong()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Frame Termination Value",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Uniformity Mean", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Interpolation Center X",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Energy Width (retired)",
          toList([new SignedLong()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Parent UID",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "SegEnd", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5f) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Detector Count Zone", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Study Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Xeleris Gated Information Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Xeleris Rotation Information Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Tuning Calib Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Elapsed Time", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x43) {
      return new Ok(new Item(tag, "Name", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Radius Of Rotation",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Head Conversion", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x50) {
      return new Ok(new Item(tag, "Label", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "IntDataFormat", toList([new LongText()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Linear Depth", toList([new FloatingPointDouble()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Series Rejected Beats", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Original Image Num", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Initiation Count Rate", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Num WB Scans", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Orig SOP Instance UID",
          toList([new Sequence()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "StringData", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unif Date Time", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x16) {
      return new Ok(new Item(tag, "SegType", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Percent Cycle Imaged", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Tomo View Offset",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "DetectorName", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Where Object Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3c) {
      return new Ok(
        new Item(tag, "Pixel Offset", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x26) {
      return new Ok(new Item(tag, "TxtName", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "Recon Pan AP Offset",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3f) {
      return new Ok(
        new Item(tag, "Dataset Flags", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Digital FOV", toList([new FloatingPointDouble()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Series Object Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x48) {
      return new Ok(new Item(tag, "NameFont", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Transmission Scan Time",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "FrameNumber", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Rfmtr Trans Ref", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4e) {
      return new Ok(new Item(tag, "NamePos", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Compression Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "SegStart",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Dataset Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "StylePColour", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Trigger data size", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Interpolation Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "SegStyleColour", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Gantry Motion Type (retired)",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Gantry Locus Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6f) {
      return new Ok(
        new Item(tag, "Pre Filter Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Energy Offset", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2c) {
      return new Ok(
        new Item(
          tag,
          "View X Adjustment",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Dataset Modified", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x10) {
      return new Ok(new Item(tag, "Modified", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Recon Options Flag", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x11) {
      return new Ok(new Item(tag, "Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Num Energy Windows", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "StyleWidth", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Frame Termination Condition",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(new Item(tag, "Cid", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "AutoTrack Peak", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Dataset UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2e) {
      return new Ok(
        new Item(
          tag,
          "Distance Prescribed",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Table Orientation", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Viewing Object Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x67) {
      return new Ok(
        new Item(
          tag,
          "Reference Frame Number",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "StyleColour", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "SegStyleWidth", toList([new SignedLong()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SCHICK TECHNOLOGIES - Note List Creator ID") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Reference Image Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(new Item(tag, "Item", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips PET Private Group") {
    if (g0 === 0x5 && g1 === 0x11 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x5 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x5 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x5 && g1 === 0x11 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x5 && g1 === 0x11 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x5 && g1 === 0x11 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "SUV Scale Factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Private", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Original image file name",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "File Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Worklist Info File Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Acquisition File Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Activity Concentration Scale Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Segment Size", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Segment Number", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Number of Segments", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "File Data Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x53 && e1 === 0xc2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_FALCON_03") {
    if (g0 === 0x0 && g1 === 0x45 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "A_Coefficients",
          toList([new DecimalString()]),
          new ValueMultiplicity(8, new Some(8)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "User Window Center", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "User Window Width", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Requested Detector Entrance Dose",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x67) {
      return new Ok(
        new Item(
          tag,
          "VOI LUT Assymmetry parameter beta",
          toList([new DecimalString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x69) {
      return new Ok(
        new Item(
          tag,
          "Collimator rotation",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Collimator Width", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Collimator Height", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR SPECTRO;1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x77) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Siemens: Thorax/Multix FD Post Processing") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Label Left", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Label Left Orientation",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Label Left Percentage X",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Label Left Percentage X",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Label Right", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Label Right Orientation",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Label Right Percentage X",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Label Right Percentage X",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Auto Window Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Auto Window Center", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Auto Window Width", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Filter ID", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Degree of Edge Enhancement",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Half Kernel Size", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Dose Control Value", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Deleted Image Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Same Size Support", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Label Left Init Position",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Label Right Init Position",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Patient Rotation", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Anatomic Correct View Flag",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Auto Window Shift", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Auto Window Expansion",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/Centricity Radiology Web/Version 1.0") {
    if (g0 === 0x41 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Mammography Laterality",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Mammography View Name",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Mammography View Modifier",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips Imaging DD 073") {
    if (g0 === 0x40 && g1 === 0x7 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEHC_CT_ADVAPP_001") {
    if (g0 === 0x0 && g1 === 0x53 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "ShuttleFlag", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "TableSpeedNotReachesTargetFlag",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "IterativeReconAnnotation",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "IterativeReconMode", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "IterativeReconConfiguration",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "IterativeReconLevel", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "reconFlipRotateAnno", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "highResolutionFlag", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "RespiratoryFlag", toList([new ShortString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ACUSON") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Siemens: Thorax/Multix FD Version") {
    if (g0 === 0x0 && g1 === 0x17 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Build Date", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "IOD Version", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P Release 1;1") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Zoom Factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Zoom Function", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Sample Data 2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Zoom Enable Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Sample Bits Allocated 2",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "Magnifying Glass Enable Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x45) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Sample Bits Stored", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Sample Representation",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Number Of Samples", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Magnifying Glass Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Magnifying Glass Rectangle",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Physiological Data Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Smallest Sample Value", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Magnifying Glass Function",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Physiological Data Type 2",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Zoom Select Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4f) {
      return new Ok(
        new Item(
          tag,
          "Magnifying Glass Select Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Sample Rate 2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Physiological Data Channel And Kind 2",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(new Item(tag, "Sample Rate", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(new Item(tag, "Zoom ID", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Sample Representation 2",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Largest Sample Value 2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Number Of Samples 2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(new Item(tag, "Sample Data", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Smallest Sample Value 2", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Largest Sample Value", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Sample Bits Allocated",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Magnifying Glass ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Sample Bits Stored 2",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Physiological Data Channel And Kind",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Sample High Bit 2", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Zoom Rectangle",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Sample High Bit", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT RECON SLICE HEIGHT") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x88) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Slice Height",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DL_INTERNAL_USE") {
    if (g0 === 0x0 && g1 === 0x15 && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips EV Imaging DD 019") {
    if (g0 === 0x20 && g1 === 0x7 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnlimitedText()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CM VA0  OST") {
    if (g0 === 0x60 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Osteo Contour Comment", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x60 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Osteo Contour Buffer",
          toList([new SignedShort()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/RadWorks/Version 6.0") {
    if (g0 === 0x41 && g1 === 0x3 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Internal: non-existent tags",
          toList([new AttributeTag()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x3 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Internal: non-existent objects",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Annotation Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Annotation Value", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Cutline Image UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Cutline Set UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Annotation Color", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Annotation Line Style", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Annotation Label", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Annotation Creator", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Annotation Creation Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Annotation Creation Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Annotation Modification Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Annotation Modifier", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Annotation Modification Date",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "Annotation Modification Time",
          toList([new Time()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Palette Color LUT Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x41 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Annotation Number", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x7 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Requested Palette Color LUT",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED DISPLAY 0000") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x99) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P Release 1;3") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Image Enhancement ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Image Enhancement", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Convolution ID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Convolution Type", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Size ID",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Size",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Enhancement Gain", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Image Enhancement Enable Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "Image Enhancement Select Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "A.L.I. Technologies, Inc.") {
    if (g0 === 0x37 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(new Item(tag, "Filename", toList([new LongString()]), vm_1));
    } else if (g0 === 0x37 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Data Blob of a Visit",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x37 && g1 === 0x11 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Revision Number", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x37 && g1 === 0x11 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unix Timestamp", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x37 && g1 === 0x11 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Bag ID", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x37 && g1 === 0x11 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Original Study UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x37 && g1 === 0x11 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Overlay Grayscale Value",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x37 && g1 === 0x11 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Anonymization Status", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA_MEC_OT3") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "HIS/RIS Study ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Indicator of creator", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "ID of quality assurance reviewer",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "Name of quality assurance reviewer",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Date of completion of quality assurance",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "Time of completion of quality assurance",
          toList([new Time()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "Host name of quality assurance station",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x77) {
      return new Ok(
        new Item(
          tag,
          "Station name and version of quality assurance station",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "Flag of completion of quality assurance",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x79) {
      return new Ok(
        new Item(
          tag,
          "Status of quality assurance review",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x7a) {
      return new Ok(
        new Item(
          tag,
          "Original SOP Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x7b) {
      return new Ok(
        new Item(
          tag,
          "Original Series Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x7c) {
      return new Ok(
        new Item(
          tag,
          "Original Study Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x7d) {
      return new Ok(
        new Item(
          tag,
          "Rotation information for image display from original image",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "Sequence of LR mark", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x7f) {
      return new Ok(
        new Item(
          tag,
          "Rotation status at creation of LR mark",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Original image data on area of original LR mark",
          toList([new OtherByteString(), new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "X start position of LR mark",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Y start position of LR mark",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Size of LR mark in X direction",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Size of LR mark in Y direction",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Previous Patient ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Previous modality", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MR VA0  RAW") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Sequence Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Vector Size original",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Vector Size extended",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Acquired Spectral Range",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "VOI Position", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "VOI Size", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "CSI Matrix Size original",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "CSI Matrix Size extended",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Spatial Grid Shift",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Signal Limits Minimum",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Signal Limits Maximum",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Spec Info Mask", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "EPI Time Rate of Change of Magnitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "EPI Time Rate of Change of X Component",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "EPI Time Rate of Change of Y Component",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "EPI Time Rate of Change of Z Component",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "EPI Time Rate of Change Legal Limit 1",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "EPI Operation Mode Flag",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "EPI Field Calculation Safety Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "EPI Legal Limit 1 of Change Value",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "EPI Legal Limit 2 of Change Value",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "EPI Rise Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "AC ADC Offset", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "AC Preamplifier Gain",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Saturation Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Saturation Normal Vector",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Saturation Position Vector",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "Saturation Thickness",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Saturation Width",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "Saturation Distance",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS DLR.01") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Cassette Submatrix", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Reader Header", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "RT Frequency Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Orientation", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Rotation on DRC", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Film Format", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "GC Rotation Center", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Subregion", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Cassette Matrix", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "RE Frequency Enhancement",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Reader Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Filterset", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "RN Frequency Rank", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(new Item(tag, "EDR", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Measurement Mode", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Preset Mode", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Full Film Format", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(new Item(tag, "l fix", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Image Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "UID Original Image", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "PLA of Secondary Destination",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Software Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(new Item(tag, "Region", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Cassette Scale", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Mark on Film", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Sub Modality", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "PLA Destination", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "GA Rotation Amount", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "Convulsion Mode", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "PLA Source", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Sensitivity", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "Kernel Mode", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(new Item(tag, "MPM Code", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(new Item(tag, "s fix", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Reader Serial Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x53) {
      return new Ok(new Item(tag, "Barcode", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Film Size", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Number of Hardcopies",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "GT Contrast Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(new Item(tag, "Latitude", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "GS Density Shift", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "Kernel Length", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CSA REPORT") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "syngo Report Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "syngo Report", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "SR Variant", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "SC SOP Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS ACKNOWLEDGE FLAG") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Acknowledge Flag", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS SC IMG PIX SPC") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Non-RT Image Pixel Spacing",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_IMPS_01") {
    if (g0 === 0x0 && g1 === 0x29 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels1",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Upper range of Pixels1",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Lower range of Pixels2",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Upper range of Pixels2",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Len of tot hdr in bytes",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Version of the hdr struct",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Advantage comp. Overflow",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Advantage comp. Underflow",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Decon kernel parameters",
          toList([new SignedShort()]),
          vm_5,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "INTELERAD MEDICAL SYSTEMS") {
    if (g0 === 0x3f && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Institution Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x3f && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Routed Transfer AE", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x3f && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Source AE", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x3f && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Deferred Validation", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x3f && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Series Owner", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ACRQA_1.0 BLOCK1") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "CR Exposure Menu Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "CR Exposure Menu String",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "CR EDR Mode", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "CR Latitude", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "CR Group Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "CR Image Serial Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "CR Bar Code Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "CR Film Output Exposure",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "CR Film Format", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "CR S-Shift String", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS SMS-AX  VIEW 1.0") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Review Mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Anatomical Background Percent",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Number of Phases", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Apply Anatomical Background",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Pixel Shift Array",
          toList([new SignedShort()]),
          new ValueMultiplicity(4, new None()),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Brightness", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Contrast", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Enabled", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Native Edge Enh. Percent Gain",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Native Edge Enh. LUT Index",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Native Edge Enh. Kernel Size",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Subtr. Edge Enh. Percent Gain",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Subtr. Edge Enh. LUT Index",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Subtr. Edge Enh. Kernel Size",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Fade Percent", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Flipped Before Laterality Applied",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Apply Fade", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "RefImages Taken", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(new Item(tag, "Zoom", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(new Item(tag, "Pan X", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(new Item(tag, "Pan Y", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Native Edge Enh. Adv Perc. Gain",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Subtr. Edge Enh. Adv Perc. Gain",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Invert Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Quant 1K Overlay", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Original Resolution",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Auto Window Center", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Auto Window Width", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "INTEGRIS 1.0") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Exposure Channel", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Exposure Start Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(new Item(tag, "APR Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Frame Rate", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Exposure Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Size",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Coefficients",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Gain",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Number of Exposure Results",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Accumulated Fluoroscopy Dose",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Accumulated Exposure Dose",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Total Dose", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Total Number of Frames",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Exposure Information Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS UNKNOWN") {
    if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "MRSeriesNrOfEchoes", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "MRSeriesScanningTechniqueDescription",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "StackSequence", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Examination Source", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "MRSeriesAcquisitionNumber",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "MRSeriesNrOfDynamicScans", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "MRSeriesNrOfChemicalShifts",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "MRSeriesRepetitionTime", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "MRVolumeSelection", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PMOD_GENPET") {
    if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Slices Names", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Gene Codes", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Gene Labels", toList([new UnlimitedText()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MITRA OBJECT UTF8 ATTRIBUTES 1.0") {
    if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Patient's Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Study Description", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Referring Physician's Name",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Requesting Physician's Name",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Performing Physician's Name",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Reason for Study", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Study Comments", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Patient's Name Single Byte",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Patient's Name Ideographic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Patient's Name Phonetic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Referring Physician's Name Single Byte",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Referring Physician's Name Ideographic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Referring Physician's Name Phonetic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Requesting Physician's Name Single Byte",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Requesting Physician's Name Ideographic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Requesting Physician's Name Phonetic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "Performing Physician's Name Single Byte",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Performing Physician's Name Ideographic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Performing Physician's Name Phonetic",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MR VA0  COAD") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Receiver Preamplifier Gain",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Gradient Delay Time",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd6) {
      return new Ok(
        new Item(
          tag,
          "3D Phase Oversampling Part",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd9) {
      return new Ok(
        new Item(tag, "Lines per Segment", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Magnetic Field Strength",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc1) {
      return new Ok(
        new Item(tag, "EPI Capacity", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "Receiver Reference Gain",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd4) {
      return new Ok(
        new Item(
          tag,
          "Base Raw Matrix Size",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Reference Scale Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd2) {
      return new Ok(
        new Item(tag, "Calculation Submode", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Receiver Amplifier Gain",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd7) {
      return new Ok(
        new Item(tag, "Echo Line Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Total Gradient Delay Time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "RF Watchdog Mask", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(
          tag,
          "Specific Energy Dose SED",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd8) {
      return new Ok(
        new Item(
          tag,
          "Echo Column Position",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc3) {
      return new Ok(
        new Item(
          tag,
          "EPI Switch Configuration Code",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd1) {
      return new Ok(
        new Item(tag, "Flow Sensitivity", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd3) {
      return new Ok(
        new Item(
          tag,
          "Field of View Ratio",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xda) {
      return new Ok(
        new Item(
          tag,
          "Phase Coding Direction",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc5) {
      return new Ok(
        new Item(
          tag,
          "EPI Switch Delay Time",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc4) {
      return new Ok(
        new Item(
          tag,
          "EPI Switch Hardware Code",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "Adjustment Status Mask",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Transmitter Reference",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Transmitter Calibration",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc2) {
      return new Ok(
        new Item(
          tag,
          "EPI Inductance",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Sensitivity Correction Label",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "Receiver Filter Frequency",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Receiver Cable Attenuation",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd5) {
      return new Ok(
        new Item(
          tag,
          "2D Phase Oversampling Lines",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Receiver Total Gain",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(
          tag,
          "Specific Absorption Rate SAR",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "RF Power Error Indicator",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "ADC Offset", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Readout Gradient Amplitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Saturation Readout Vector Coronal Component",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Phase Gradient Amplitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Transmitter Attenuator",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "EPI Reconstruction Slope",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Transmitter Amplitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Scale Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "ADC Voltage", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Number of Transmitter Amplitudes",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "Selection Gradient Amplitude",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Saturation Phase Encoding Vector Coronal Component",
          toList([new DecimalString()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED MG") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "List of Group Numbers",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "List of Shadow Owner Codes",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "List of Element Numbers",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "List of Total Display Length",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "List of Display Prefix",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "List of Display Postfix",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "List of Text Position",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "List of Text Concatenation",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Voxar 2.16.124.113543.6003.1999.12.20.12.5.0") {
    if (g0 === 0x11 && g1 === 0x35 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Capture UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Saved State",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Icon Image Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Top Right Display Demographics",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Bottom Left Display Demographics",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Span State Schema",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Live Image Restored Size",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar CaptureType",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Capture Source Series UID Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Capture Source Series UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Background Gray For Capture",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Calcium Scoring Report Schema",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Source Series Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x11 && g1 === 0x35 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Private Voxar Bottom Left Display Demographics",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 042") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_3));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x54) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x55) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x56) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x57) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x58) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x59) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5a) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5b) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5c) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5d) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5e) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5f) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x71) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x72) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x73) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x74) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x75) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x76) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x77) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEIIS") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "GE IIS Thumbnail Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Shift Count", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(new Item(tag, "Offset", toList([new UnsignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Actual Frame Number", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x4b && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x4b && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x9 && g1 === 0x5 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Assigning Authority For Patient ID",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Original Study Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Original Series Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Original SOP Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xd1 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "GE IIS Compression ID",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xd1 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "GE IIS Multiframe Offsets",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xd1 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xd1 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xd1 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xd1 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS DFR.01 ORIGINAL") {
    if (g0 === 0x0 && g1 === 0x17 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Image Intensifier Zoom",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "ROSA Receiver ErrCount",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x37) {
      return new Ok(
        new Item(
          tag,
          "Rectangle Shutter Horizontal Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xb2) {
      return new Ok(
        new Item(
          tag,
          "L2 Acquisition Monitor",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Landmark Original", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x7b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Number of Maske Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xb1) {
      return new Ok(new Item(tag, "L2 Image", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "Image Intensifer Format",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x41) {
      return new Ok(new Item(tag, "Dose", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Series Numbers of Petri",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Window Width Native Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x44) {
      return new Ok(new Item(tag, "SDM", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Native Original",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Dose Area Product", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "LUT Number for Autowindow",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x43) {
      return new Ok(new Item(tag, "Focus", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Slice Position", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xc2) {
      return new Ok(
        new Item(tag, "Series UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "DSA Representation Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Filter Type Native Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement LUTs Original",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Kernelsize Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xc3) {
      return new Ok(
        new Item(tag, "Subseries UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Mode Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Density Correction", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Exposure Curves", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Rectangle Vertical Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Table Position Peri",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "RightLeft Mark Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Window Center Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xc1) {
      return new Ok(
        new Item(tag, "Folder UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Subtraction Original",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Organ Program Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Filter Type Subtraction Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Window Width Subtraction Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "Count of Images in Series",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "Invers Original", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Window Center Subtraction Original",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "BrainLAB_Conversion") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Export Platform Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Export Platform Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "VEPRO VIF 3.0 DATA") {
    if (g0 === 0x0 && g1 === 0x55 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Icon data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Image hash value", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "BrainLAB_PatientSetup") {
    if (g0 === 0x32 && g1 === 0x73 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Isocenter Position", toList([new DecimalString()]), vm_3),
      );
    } else if (g0 === 0x32 && g1 === 0x73 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Patient Position", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Silhouette Sequence Ids V1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x42) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x43) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging 60") {
    if (g0 === 0x0 && g1 === 0x31 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Private data", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI Sequence AnnotElements_01") {
    if (g0 === 0x31 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Element Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x5 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Element Text",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT TOTAL_MU") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "Total MU delivered during Cone Beam",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips X-ray Imaging DD 001") {
    if (g0 === 0x20 && g1 === 0x3 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x26) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_4),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Private enhanced Table Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x2e) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x2c) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x19) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x2f) {
      return new Ok(
        new Item(
          tag,
          "IsResolvePatientMixApplied",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x2a) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x25) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x3 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SEGAMI MIML") {
    if (g0 === 0x0 && g1 === 0x31 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED HG") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "List of Group Numbers",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "List of Shadow Owner Codes",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "List of Element Numbers",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "List of Total Display Length",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "List of Display Prefix",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "List of Display Postfix",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "List of Text Position",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "List of Text Concatenation",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ATL PRIVATE TAGS") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Loop Mode", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Trigger mode", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Number of Loops", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Loop Indexes", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Loop Heart Rates",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Medications", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MAROTECH Inc.") {
    if (g0 === 0x0 && g1 === 0x37 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Some kind of version number",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Icon Row", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Icon Col", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "JPEG Compressed Icon",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_IDEN_01") {
    if (g0 === 0x0 && g1 === 0x9 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Full fidelity", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Suite id", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Product id", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Series Description", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Image actual date", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2f) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Service id", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Mobile location number",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe2) {
      return new Ok(
        new Item(
          tag,
          "Image Type (ORIGINAL\\PROSPECTIVE ...)",
          toList([new LongText()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe3) {
      return new Ok(
        new Item(tag, "Equipment UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe6) {
      return new Ok(
        new Item(
          tag,
          "Genesis Version - now",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe7) {
      return new Ok(
        new Item(
          tag,
          "Exam Record checksum",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe8) {
      return new Ok(
        new Item(tag, "Series Suite Id", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xe9) {
      return new Ok(
        new Item(
          tag,
          "Actual series data time stamp",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CSA HEADER") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "CSA Image Header Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "CSA Image Header Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "CSA Image Header Info",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "CSA Series Header Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "CSA Series Header Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "CSA Series Header Info",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Acuson X500") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "(a)View Name", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2a) {
      return new Ok(new Item(tag, "View List", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Siemens Medical", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "DIMAQ Software", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Siemens Medical", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "DIMAQ Software", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x13 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Siemens Medical", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "DIMAQ Software", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Siemens Medical", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "DIMAQ Software", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Private Data", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Import Structured", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MMCPrivate") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x48) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4e) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips Imaging DD 065") {
    if (g0 === 0x40 && g1 === 0x7 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips NM Private Group") {
    if (g0 === 0x70 && g1 === 0x43 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA MDW NON-IMAGE") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Application Header Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Application Header Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Application Header Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Application Header Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Toshiba US Private Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_QVA_PHOTO_01") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Dodge End Diastolic Volume ml",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Dodge End Systolic Volume ml",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Dodge Stroke Volume ml",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x63) {
      return new Ok(
        new Item(
          tag,
          "Dodge Ejection Fraction",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x64) {
      return new Ok(
        new Item(
          tag,
          "Simpson End Diastolic Volume ml",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Simpson End Systolic Volume ml",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "Simpson Stroke Volume ml",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x67) {
      return new Ok(
        new Item(
          tag,
          "Simpson Ejection Fraction",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x68) {
      return new Ok(
        new Item(
          tag,
          "CFX Single Hypokinesia in Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x69) {
      return new Ok(
        new Item(
          tag,
          "CFX Single Hyperkinesia in Opposite Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6a) {
      return new Ok(
        new Item(
          tag,
          "CFX Single Total LV contour Percent",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6b) {
      return new Ok(
        new Item(
          tag,
          "CFX Multiple Hypokinesia in Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6c) {
      return new Ok(
        new Item(
          tag,
          "CFX Multiple Hyperkinesia in Opposite Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6d) {
      return new Ok(
        new Item(
          tag,
          "CFX Multiple Total LV contour Percent",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6e) {
      return new Ok(
        new Item(
          tag,
          "RCA Single Hypokinesia in Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6f) {
      return new Ok(
        new Item(
          tag,
          "RCA Single Hyperkinesia in Opposite Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "RCA Single Total LV contour Percent",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "RCA Multiple Hypokinesia in Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "RCA Multiple Hyperkinesia in Opposite Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "RCA Multiple Total LV contour Percent",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "LAD Single Hypokinesia in Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "LAD Single Hyperkinesia in Opposite Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "LAD Single Total LV contour Percent",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x77) {
      return new Ok(
        new Item(
          tag,
          "LAD Multiple Hypokinesia in Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "LAD Multiple Hyperkinesia in Opposite Region",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x79) {
      return new Ok(
        new Item(
          tag,
          "LAD Multiple Total LV contour Percent",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7a) {
      return new Ok(
        new Item(
          tag,
          "Dodge End Diastolic Volume ml/m2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7c) {
      return new Ok(
        new Item(
          tag,
          "Dodge End Systolic Volume ml/m2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7e) {
      return new Ok(
        new Item(
          tag,
          "Dodge Stroke Volume ml/m2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Simpson End Diastolic Volume ml/m2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Simpson End Systolic Volume ml/m2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Simpson Stroke Volume ml/m2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MITRA OBJECT DOCUMENT 1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_CDS Release 1") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "BRIT Systems, Inc.") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Object Action", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Original Study Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Physician ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "QC Done Time", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Software Version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Original Sender AE Title",
          toList([new ApplicationEntity()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Person Pager Phone", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Patient ICN", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Patient Class", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "QC Deletion Requested", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Local AE Title", toList([new ApplicationEntity()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Original Patient ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x34) {
      return new Ok(new Item(tag, "QC Done Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "QC Image Accepted By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Serial Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Order Category", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "QC Image Rejected By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "Remote AE Title",
          toList([new ApplicationEntity()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Original Series Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Patient DFS", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "QC Last Modification Time",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "QC Study Assigned By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "Remote IP Address", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Object Action Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "QC Study Moved By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Patient Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Person Work Phone", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Software Title", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Object Action Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Person Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "QC Series Split By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Person Password", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Person Cell Phone", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Person Role", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Person Address", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "QC Series Edited By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Person Home Phone", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Person Information Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Object Action Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "QC Image Moved By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "QC Series Moved By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Local IP Address", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "QC Image Edited By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Master Accession Number",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Person Fax Phone", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "QC Study Edited By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Generic String", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "QC Study Split By", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Person EMail", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Person ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Person Emergency Phone",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT MISSING PROJECTION FRAMES") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Missing Projection Frames",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips Imaging DD 002") {
    if (g0 === 0x20 && g1 === 0x1 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x33) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3b) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2e) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2b) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3e) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2f) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3c) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3a) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x32) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3f) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3d) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Mayo/IBM Archive Project") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x19) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1b) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1d) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1f) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x65) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS DFR.01 MANIPULATED") {
    if (g0 === 0x0 && g1 === 0x17 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Number of Series Representative",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "Image Name Extension 1",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x37) {
      return new Ok(
        new Item(
          tag,
          "Rectangle Shutter Horizontal Current",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Zoom Factor", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Landmark Current", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Number of Mask Current",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "Pixel Shift Vertical",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Image Flip", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Summation Count Mask",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Window Width Native Current",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Native Current",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Roam Vertical", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "PeakOp Start", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Edge Enhancement %", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa3) {
      return new Ok(
        new Item(
          tag,
          "Image Name Extension 2",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "DSA Representation Current",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Image Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Cine Rate", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Summation Count Filling",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x77) {
      return new Ok(
        new Item(
          tag,
          "Pixel Shift Horizontal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Right Marker", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "PeakOp End", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Documentation Flag", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Rectangle Shutter Vertical Aktuell",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "RightLeft Mark Current",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Window Center Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Harmonization %", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Subtraction Current",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Roam Horizontal", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Window Width Subtraction Current",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "Invers Current", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Window Center Subtraction Current",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ELGEMS_XPERT") {
    if (g0 === 0x7f && g1 === 0xa1 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "XPert Composite Report Item buffer",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xa1 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Xpert Composite Report Item Identificator",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_MR_RAW_01") {
    if (g0 === 0x70 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "rdb_hdr_rec", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "rdb_hdr_per_pass_tab",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "rdb_hdr_unlock_raw",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "rdb_hdr_data_acq_tab",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "rdb_hdr_nex_tab", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "rdb_hdr_nex_abort_tab",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "rdb_hdr_tool", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "rdb_raw_data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "SSP save", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "UDA save", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "rdb_chemsat_data", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "CAMTRONICS IP") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_ICS Release 1;5") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x55) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "IMPAC") {
    if (g0 === 0x30 && g1 === 0xb && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x30 && g1 === 0xb && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x30 && g1 === 0xb && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Mitra Markup 1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Markup1", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Markup2", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Markup3", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Markup4", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Markup5", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Markup6", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Markup7", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Markup8", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Markup9", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Markup10", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Markup11", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Markup12", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Markup13", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Markup14", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Markup15", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0") {
    if (g0 === 0x0 && g1 === 0x25 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "View Native", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Original Series Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Original Image Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Win Center", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Win Width", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Win Brightness", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Win Contrast", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Original Frame Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Original Mask Frame Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x9) {
      return new Ok(new Item(tag, "Opac", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Original Number of Frames",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Original Scene Duration",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Identifier LOID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Original Scene VFR Info",
          toList([new SignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "Original Frame ECG Position",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Original ECG 1st Frame Offset (retired)",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Zoom Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x11) {
      return new Ok(new Item(tag, "Flex", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Number of Mask Frames",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Number of Fill Frames",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Series Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Image Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DRS_1") {
    if (g0 === 0x0 && g1 === 0x37 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Referring Department", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Screen Number", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Left Orientation", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Right Orientation", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Inversion", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x60) {
      return new Ok(new Item(tag, "DSA", toList([new UnsignedShort()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_XELPRV_01") {
    if (g0 === 0x0 && g1 === 0x57 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "FrameNumber", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "ShapePtsSpace", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x18) {
      return new Ok(new Item(tag, "Time", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "PDOSOPClassUID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Object Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "BulkDataFormat", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "DatasetROIMapping",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x5b) {
      return new Ok(
        new Item(
          tag,
          "Shap CtrlPts",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "RTSpecification", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "ShapeTilt",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "ReviewtemplateSQ", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Type", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "DataValidationSpec", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x42) {
      return new Ok(new Item(tag, "Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "SDODoubleDataSQ", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4c) {
      return new Ok(
        new Item(tag, "LineThickness", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Points", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x14) {
      return new Ok(new Item(tag, "StudyId", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "ProtocolName", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "SDOSOPInstanceUID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "ShapeCPSpace", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1b) {
      return new Ok(new Item(tag, "StudyId", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "RTOSOPClassUID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "DoubleDataFormat", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "LineStyle", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "SOPInstanceUID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Seeds", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x28) {
      return new Ok(new Item(tag, "RTName", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Description", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Normal Colour", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "SOPClassUID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "ROINumber", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "IconDescription", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "SOPClassUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "DoubleData",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "ROIFlags", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "IntData", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "SeriesdataSQ", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "SDOSOPClassUID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x43) {
      return new Ok(new Item(tag, "Rid", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Data value Representation",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Description", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x17) {
      return new Ok(new Item(tag, "Date", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "StringDataFormat", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "ProtocoldataSQ", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "ShapeCtrlPtsCount",
          toList([new SignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "ProtocoldataFlags", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "BulkData", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "PDOSOPInstanceUID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "NameDisplay", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "ProtocolDataUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2a) {
      return new Ok(
        new Item(
          tag,
          "ReviewTemplatesFlags",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "IntDataFormat", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "BpSeg", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "SeedSpace", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Shape", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "StringData", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Dimensions", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x50) {
      return new Ok(new Item(tag, "Label", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4e) {
      return new Ok(new Item(tag, "NamePos", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "SOPInstanceUID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Label", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x41) {
      return new Ok(new Item(tag, "Modified", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x48) {
      return new Ok(new Item(tag, "NameFont", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "LineDashLength", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x1) {
      return new Ok(new Item(tag, "ROISQ", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "BpSegpairs", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Data", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x10) {
      return new Ok(new Item(tag, "Modified", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4d) {
      return new Ok(
        new Item(tag, "Interactivity", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x11) {
      return new Ok(new Item(tag, "Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "FillPattern", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Description", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "RTOSOPInstanceUID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CT VA0  ORI") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Original Data Set Owner",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Original Modality", toList([new ShortString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS ISI") {
    if (g0 === 0x1 && g1 === 0x93 && e1 === 0x2) {
      return new Ok(new Item(tag, "RIS Key", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xbc) {
      return new Ok(
        new Item(tag, "Current Location Time", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Contrast Allergy", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0xe2) {
      return new Ok(
        new Item(tag, "Report Transcriber", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "ISI Command Field", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Examination UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Worklist Request End Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Examination Reason", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xa) {
      return new Ok(new Item(tag, "Case ID", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Patient Registration Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "RIS Patient Info IMGEF", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xd0) {
      return new Ok(
        new Item(tag, "Patient Billing Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Medical Alerts", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x30) {
      return new Ok(new Item(tag, "Requested Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x3 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "RIS Report IMGEF", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x4a) {
      return new Ok(new Item(tag, "Requested Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x3 && g1 === 0x7 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "RIS Worklist IMGEF", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "Patient Last Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Attach ID Message Count",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xd2) {
      return new Ok(
        new Item(
          tag,
          "Patient Billing Address",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Request ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0xe1) {
      return new Ok(
        new Item(tag, "Report Author", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Attach ID Application Code",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Patient ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Patient UID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Patient Registration Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Max Waiting Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Max Waiting Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "RIS Patient Info IMGEF", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x14) {
      return new Ok(new Item(tag, "Attach ID Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xc0) {
      return new Ok(
        new Item(
          tag,
          "Patient Insurance Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "Patient First Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x13) {
      return new Ok(new Item(tag, "Attach ID Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Report Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0xe3) {
      return new Ok(
        new Item(tag, "Reporting Radiologist", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Report ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Worklist Request Start Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Report Creation Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Report Approving Physician",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x40 && g1 === 0x9 && e1 === 0xe0) {
      return new Ok(
        new Item(tag, "Report Text", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Message Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Requested Location", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Current Ward", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0xb4) {
      return new Ok(
        new Item(
          tag,
          "Patient Hospital Status",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DLX_PATNT_01") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "patient DOB", toList([new LongText()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DL_STUDY_01") {
    if (g0 === 0x0 && g1 === 0x15 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Study Dose", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Study Total Dap", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Study Fluoro Dap", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Study Fluoro Time", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Study Record Dap", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Study Record Time", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Last Xa Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Default Operator Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Default Performing Physician Name",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Default Patient Orientation",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "Last Sc Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Common Series Instance Uid",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "Study Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Study dose Frontal",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "Study total dap Frontal",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Study fluoro dap frontal",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Study fluoro time frontal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "Study record dap frontal",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x97) {
      return new Ok(
        new Item(
          tag,
          "Study record time frontal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x98) {
      return new Ok(
        new Item(
          tag,
          "Study dose lateral",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x99) {
      return new Ok(
        new Item(
          tag,
          "Study total dap lateral",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x9a) {
      return new Ok(
        new Item(
          tag,
          "Study fluoro dap lateral",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x9b) {
      return new Ok(
        new Item(
          tag,
          "Study fluoro time lateral",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x9c) {
      return new Ok(
        new Item(
          tag,
          "Study record dap leteral",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x9d) {
      return new Ok(
        new Item(
          tag,
          "Study record time lateral",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_ICS Release 1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1b) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1d) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4c) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4d) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4e) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4f) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x67) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6a) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x72) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SCHICK TECHNOLOGIES - Viewset Item Creator ID") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Image Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Number", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(new Item(tag, "Order", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(new Item(tag, "Type", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Orientation", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Rect (Left, Top, Width, Height)",
          toList([new UnsignedShort()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Caption Height", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Source", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Default Width", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Default Height", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "http://www.gemedicalsystems.com/it_solutions/bamwallthickness/1.0") {
    if (g0 === 0x31 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "BAM WallThickness Session Date/Time",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "BAM WallThickness Session Creator",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "BAM WallThickness Session Completion Flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "BAM WallThickness File Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "BAM WallThickness File Name",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "BAM WallThickness File Content",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_VXTLSTATE_001") {
    if (g0 === 0x0 && g1 === 0x57 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "SegList_Label", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Slider_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Wireframe", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x25) {
      return new Ok(new Item(tag, "Count", toList([new IntegerString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "SUV_HalfLife", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Proto_Title", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x42) {
      return new Ok(new Item(tag, "VT_Meas", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "SUV_PostInjectedActivity",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x27) {
      return new Ok(new Item(tag, "View_Slot", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Proto_FilmName", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "SegList_Slots", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x54) {
      return new Ok(new Item(tag, "HTML_Page", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "SegList_Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "VT_Tree", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x40) {
      return new Ok(new Item(tag, "VT_Points", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x47) {
      return new Ok(new Item(tag, "VT_Preset", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "SUV_PostInjectedTime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Wireframe_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "VT_Tree_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "SUV_AdministredTime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Volume_Filename", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "SegList_Seq", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "SState_Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "SUV_ScanTime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Slider_State", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Volumes_info", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "SegList_Pretty_Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Bookmark_Seq", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x6) {
      return new Ok(new Item(tag, "Image_UIDs", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Color_Value_Field",
          toList([new UnsignedLong()]),
          vm_3_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x22) {
      return new Ok(new Item(tag, "Bookmark", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x31) {
      return new Ok(new Item(tag, "Annotation", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "VT_Points_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Preferences", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "HTML_Page_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "Camera_Position",
          toList([new FloatingPointSingle()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x26) {
      return new Ok(new Item(tag, "Views_info", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "SUV_TracerActivity",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Proto_Step", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Preferences_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "VT_Preset_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Proto_Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x57) {
      return new Ok(new Item(tag, "Slider", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "SegList_Count", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "VT_Meas_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Annotation_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "VT_State_Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Cursor_position",
          toList([new FloatingPointSingle()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Volume_ZComb_Filter",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "SegList_List", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "SUV_MeasuredTime", toList([new DateTime()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x49) {
      return new Ok(new Item(tag, "VT_State", toList([new LongText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_ICS Release 1;3") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb0) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc0) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc1) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc2) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc3) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc4) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc5) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS RA PLANE A") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Side Offset", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Peak Opacified", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Collimator Finger Turn Angle",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7a) {
      return new Ok(
        new Item(
          tag,
          "Collimator Square Breadth",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diagphragm Position 1",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "Calibration Isocenter to Source Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Calibration II Zoom", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Native Filter Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Subtracted Filter Type",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3c) {
      return new Ok(
        new Item(
          tag,
          "Window Brightness Phase 1 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "Calibration Gantry Data Valid",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(
        new Item(
          tag,
          "Window Lower Limit Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "Mechanical Magnet Factor",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "XRay System", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Calibration Table to Floor Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Filter Factor Subtraction",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3e) {
      return new Ok(
        new Item(
          tag,
          "Window Brightness Phase 2 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Acquired Display Mode",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Collimator Finger Position",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Pulse Time", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Pulses per Scene", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Filter Factor Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8c) {
      return new Ok(
        new Item(
          tag,
          "Collimator Beam Limit Breadth",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Window Contrast Phase 1 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Exposure Control", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xac) {
      return new Ok(
        new Item(tag, "Dose Rate", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x58) {
      return new Ok(
        new Item(
          tag,
          "SourceImage Distance",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9a) {
      return new Ok(
        new Item(tag, "XRay Voltage", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Mask Frame", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(new Item(tag, "Dose", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "Calibration System II Formats",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(
          tag,
          "Calibration Isocenter to Floor Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4c) {
      return new Ok(
        new Item(
          tag,
          "Center Beam Angulation CaudCran",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "XRay System", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Window Upper Limit Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2c) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Framerate",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9e) {
      return new Ok(
        new Item(
          tag,
          "XRay Current Time Product",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Collimator Beam Limit Diameter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Image Twist", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7c) {
      return new Ok(
        new Item(
          tag,
          "Collimator Square Height",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Isocenter Height", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diaphragm Mode",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9c) {
      return new Ok(
        new Item(tag, "XRay Current", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Longitudinal Position",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "Center Beam Angulation LR Anterior",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "Scene Time Fluoro Clock",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Anatomic Blackground Factor",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2e) {
      return new Ok(
        new Item(
          tag,
          "Maximum Frame Limit",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "XRay Control Mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5e) {
      return new Ok(
        new Item(
          tag,
          "Calibration Angle CranCaud",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "Calibration Flag", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Calibration System Correction",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Maximum PulseRate", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7e) {
      return new Ok(
        new Item(
          tag,
          "Collimator Square Diameter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Calibration Object to Image Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(
          tag,
          "Dose Area Product of Scene",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "XRay Parameter Set Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6c) {
      return new Ok(
        new Item(
          tag,
          "Calibration II Field",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x68) {
      return new Ok(
        new Item(
          tag,
          "Calibration Source to II Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "System Calibration Factor Plane A",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Window Contrast Phase 2 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Collimator Beam Limit Height",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diaphragm Position 2",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Calibration Angle RAOLAO",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Calibration Factor", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Focal Spot", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "Calibration System Factor",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "BIH Frame", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diaphragm Turn Angle",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "VEPRO DICOM TRANSFER 1.0") {
    if (g0 === 0x0 && g1 === 0x59 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Dicom Transfer Info", toList([new Sequence()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS RA PLANE B") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Side Offset", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Peak Opacified", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Collimator Finger Turn Angle",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7a) {
      return new Ok(
        new Item(
          tag,
          "Collimator Square Breadth",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diagphragm Position 1",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "Calibration Isocenter to Source Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Calibration II Zoom", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Native Filter Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Subtracted Filter Type",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3c) {
      return new Ok(
        new Item(
          tag,
          "Window Brightness Phase 1 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "Calibration Gantry Data Valid",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(
        new Item(
          tag,
          "Window Lower Limit Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "Mechanical Magnet Factor",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "XRay System", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Calibration Table to Floor Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Filter Factor Subtraction",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3e) {
      return new Ok(
        new Item(
          tag,
          "Window Brightness Phase 2 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Acquired Display Mode",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Collimator Finger Position",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Pulse Time", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Pulses per Scene", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Filter Factor Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8c) {
      return new Ok(
        new Item(
          tag,
          "Collimator Beam Limit Breadth",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Window Contrast Phase 1 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x98) {
      return new Ok(
        new Item(tag, "Exposure Control", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xac) {
      return new Ok(
        new Item(tag, "Dose Rate", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x58) {
      return new Ok(
        new Item(
          tag,
          "SourceImage Distance",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9a) {
      return new Ok(
        new Item(tag, "XRay Voltage", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Mask Frame", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(new Item(tag, "Dose", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "Calibration System II Formats",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(
          tag,
          "Calibration Isocenter to Floor Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4c) {
      return new Ok(
        new Item(
          tag,
          "Center Beam Angulation CaudCran",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "XRay System", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Window Upper Limit Native",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2c) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Framerate",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9e) {
      return new Ok(
        new Item(
          tag,
          "XRay Current Time Product",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Collimator Beam Limit Diameter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Image Twist", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7c) {
      return new Ok(
        new Item(
          tag,
          "Collimator Square Height",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Isocenter Height", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diaphragm Mode",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9c) {
      return new Ok(
        new Item(tag, "XRay Current", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Longitudinal Position",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "Center Beam Angulation LR Anterior",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "Scene Time Fluoro Clock",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Anatomic Blackground Factor",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2e) {
      return new Ok(
        new Item(
          tag,
          "Maximum Frame Limit",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "XRay Control Mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5e) {
      return new Ok(
        new Item(
          tag,
          "Calibration Angle CranCaud",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "Calibration Flag", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Calibration System Correction",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Maximum PulseRate", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7e) {
      return new Ok(
        new Item(
          tag,
          "Collimator Square Diameter",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Calibration Object to Image Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(
          tag,
          "Dose Area Product of Scene",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "XRay Parameter Set Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6c) {
      return new Ok(
        new Item(
          tag,
          "Calibration II Field",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x68) {
      return new Ok(
        new Item(
          tag,
          "Calibration Source to II Distance",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "System Calibration Factor Plane B",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Window Contrast Phase 2 Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Collimator Beam Limit Height",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diaphragm Position 2",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Calibration Angle RAOLAO",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Calibration Factor", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Focal Spot", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "Calibration System Factor",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "BIH Frame", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Collimator Diaphragm Turn Angle",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 036") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Cols/Rows/Frames", toList([new LongString()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Cols/Rows/Frames", toList([new LongString()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Voxel Spacing", toList([new LongString()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_3));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_FUNCTOOL_01") {
    if (g0 === 0x0 && g1 === 0x51 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Functional Proc Group Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Functional Processing Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Bias of Functional Image",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Scale of Functional Image",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Length of Parameters String",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Store Parameters string, delimited by character ESC=0x1B (27)",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Functional Image Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Store Color Ramp", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Store Width of Functional Image",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Store level of Functional Image",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Store B-Value with Functional Image",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Analysis Package", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ACUSON:1.2.840.113680.1.0:0921") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(new Item(tag, "View Name", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2a) {
      return new Ok(new Item(tag, "View List", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "IMS s.r.l. Mammography Private Code") {
    if (g0 === 0x12 && g1 === 0x71 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x38) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x42) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x12 && g1 === 0x71 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED SMS USG ANTARES 3D VOLUME") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x5a) {
      return new Ok(
        new Item(tag, "BVrGrayMapIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "BVrThresholdLow", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "CFlowStateIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "ZoomLevelVolume", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Release Version", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "VolumeArbMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "CVolumeRenderMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x79) {
      return new Ok(new Item(tag, "ScreenMode", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "IsLeftRightFlippedEn", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "NumDisplaySamples", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe8) {
      return new Ok(
        new Item(tag, "DICOMAttrNameVoiPivotZ", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "BVrBrightness", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "BeamAxialMin", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x5) {
      return new Ok(new Item(tag, "ScanType", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "BMprColorMapIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "ToolLoopMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "VoiSizeRatioY", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "ZRadiusOfCurvature", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "CMprColorMapIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "DVolumeWidth", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "BByteMaskSize", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "DBeamAxialSpan", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x32) {
      return new Ok(new Item(tag, "DVolumePosY", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "BVrThresholdHigh", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "VoiSizeRatioX", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "VolumeRateHz", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x5f) {
      return new Ok(
        new Item(tag, "CCutPlaneEnable", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "IsVolumeZoomEn", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "QualityFactor", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "BByteMaskOffset", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "CVrColorMapIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "DByteMaskSize", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "IsUpDownFlippedEn", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe2) {
      return new Ok(
        new Item(tag, "DICOMAttrNameSliceLayout", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x78) {
      return new Ok(new Item(tag, "ActiveQuad", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "IsVolumeGeomAccurate", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "VolumeRawDataType", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "BCutPlaneEnable", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "DICOMAttrNameCutPlane", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "DBeamAxialMin", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "DVolumeDepth", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x9d) {
      return new Ok(new Item(tag, "VrToolIndex", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x57) {
      return new Ok(new Item(tag, "BVrContrast", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x5b) {
      return new Ok(new Item(tag, "BVrOpacity", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "VolumeDisplayType", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x13) {
      return new Ok(new Item(tag, "BufferSize", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "ScaleAlongDepth", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "ZoomLevelMpr", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "AcquisitionRate", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x66) {
      return new Ok(new Item(tag, "CVrOpacity", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "ScaleAlongHeight", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "BookmarkChunkId", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe9) {
      return new Ok(
        new Item(tag, "DICOMAttrNameCTopVoiQuad", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "BMprGrayMapIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "DVolumeHeight", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "WobbleCorrection", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "AutoRotateAxis", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "MprToolIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "ScaleAlongWidth", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "BVrDynamicRangeDb", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "RendererType", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x6f) {
      return new Ok(new Item(tag, "VoiViewMode", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x15) {
      return new Ok(new Item(tag, "DepthMinCm", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "NumOfVolumesInSequence", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x7c) {
      return new Ok(
        new Item(tag, "CrossmarkMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x7b) {
      return new Ok(
        new Item(tag, "WireframeMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "BVolumeRenderMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "VoiToolIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "BlendingRatio", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x9f) {
      return new Ok(new Item(tag, "VolumeType", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "LastNonFullScreenMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x7d) {
      return new Ok(
        new Item(tag, "MprDisplayType", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x9a) {
      return new Ok(
        new Item(tag, "VoiPositionOffsetX", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "BSubmodeIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "SequenceMinChunkId", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "CVrColorFlowPriorityIndex",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "VoiRotationOffsetDeg", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "ZlateralSpan", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x89) {
      return new Ok(
        new Item(tag, "IsAutoRotateEn", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "DByteMaskOffset", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x69) {
      return new Ok(new Item(tag, "VoiMode", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "AcqPlaneRotationDeg", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "BeamAxialSpan", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "MprOrientationA", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x85) {
      return new Ok(new Item(tag, "MprZoomEn", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x33) {
      return new Ok(new Item(tag, "DVolumePosZ", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x9b) {
      return new Ok(
        new Item(tag, "VoiPositionOffsetY", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "DBeamLateralMin", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe5) {
      return new Ok(
        new Item(
          tag,
          "DICOMAttrNameThinVrThickness",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "DBeamLateralSpan", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "CSubmodeIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "CFrontClipMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "BVrColorMapIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x9c) {
      return new Ok(
        new Item(tag, "VoiPositionOffsetZ", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe4) {
      return new Ok(
        new Item(tag, "DICOMAttrNameThinVrMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe7) {
      return new Ok(
        new Item(tag, "DICOMAttrNameVoiPivotY", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "CutPlaneSide", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "AutoRotateSpeedIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "PrivateCreatorVersionOfBookmark",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x31) {
      return new Ok(new Item(tag, "DVolumePosX", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x77) {
      return new Ok(new Item(tag, "SliceMode", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x21) {
      return new Ok(new Item(tag, "DepthMaxCm", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "AutoRotateRangeIndex", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x7f) {
      return new Ok(new Item(tag, "LastReset", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x68) {
      return new Ok(
        new Item(tag, "CVrThresholdLow", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "VrOffsetVector", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "BeamLateralSpan", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "VrOrientationA", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe0) {
      return new Ok(
        new Item(
          tag,
          "DICOMAttrNameSliceRangeType",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "VolumeAcquisitionDuration",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "VoiSyncPlane", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x8d) {
      return new Ok(
        new Item(tag, "CVrBrightness", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "DICOMAttrNameMprCenterLocation",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "CVrThresholdHigh", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "SequenceMaxChunkId", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "CMprColorFlowPriorityIndex",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe3) {
      return new Ok(
        new Item(
          tag,
          "DICOMAttrNameSliceSpacing",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "BMprDynamicRangeDb", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe6) {
      return new Ok(
        new Item(tag, "DICOMAttrNameVoiPivotX", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "VoiSizeRatioZ", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "BeamLateralMin", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x6) {
      return new Ok(new Item(tag, "ZlateralMin", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xe1) {
      return new Ok(
        new Item(
          tag,
          "DICOMAttrNameSliceMPRPlane",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "FusionBlendMode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "BPreProcessFilterMix", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x9e) {
      return new Ok(
        new Item(tag, "ShadingPercent", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "DICOMAttrNameVrQuadDisplayType",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR R5.6/PART") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Field of View", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS WH SR 1.0") {
    if (g0 === 0x0 && g1 === 0x71 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT ENDING GANTRY ANGLE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Ending Projection Angle",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "WG12 Supplement 43") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Bits Mapped to Color Lookup Table",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Opacity 1 LUT Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Temporal Position Time Offset",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Data Path ID", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Ultrasound Acquisition Geometry",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Transducer Access Code Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Dimension Organization Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Excluded Intervals Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Exclusion Duration",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Temporal Position Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Data Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Opacity Constant",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Position Measuring Device Used",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "US Image Description Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "RGB LUT Transfer Function",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Alpha LUT Transfer Function",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Event Code Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Image Orientation (Volume)",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Event Timer Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Transducer Scanning Configuration Code Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Opacity Lookup Table Descriptor",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Opacity 2 LUT Transfer Function",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Performed Protocol Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Transducer Scan Geometry Code Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Enhanced Palette Color Lookup Table Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Data Path Assignment", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Volume to Table Mapping Matrix",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Aliased Data Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Image Data Type Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Focus Depth(s)",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "Plane Position (Volume) Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Event Time Interval",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Opacity 2 LUT Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "Transducer Beam Steering Code Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Apex Position",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Plane Orientation (Volume) Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Volume to Transducer Mapping Matrix",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Opacity Lookup Table Data",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Data Frame Assignment Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Image Position (Volume)",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Opacity 1 LUT Transfer Function",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Exclusion Start Datetime",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Patient Frame of Reference Source",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_VXTL_USERDATA_01") {
    if (g0 === 0x0 && g1 === 0x47 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT RECON NUM OF SLICES") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Number of Reconstruction Slices",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 040") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED MAMMO") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5a) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-PCR Release 2") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Reader Mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(new Item(tag, "MRM Code", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Latitude", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(new Item(tag, "View Name", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xab) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xac) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xad) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xae) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaf) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb1) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb7) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb9) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xba) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA_MEC_CT_1.0") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Orientation Head Feet", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "View Direction", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Orientation Supine Prone",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Location", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Scan View Direction", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(new Item(tag, "Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips RAD Imaging DD 097") {
    if (g0 === 0x20 && g1 === 0xb && e1 === 0x76) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x99) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x7d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x65) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x88) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x54) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x86) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x7c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x96) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x82) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0xa0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x75) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x81) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x89) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x9b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x63) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x9a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x73) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x7b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "syngoDynamics") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0xae) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI Annotations_02") {
    if (g0 === 0x31 && g1 === 0x1 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Sequence (RET)",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 035") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xd) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MITRA PRESENTATION 1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Mitra Rotation", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Mitra Window Width", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Mitra Window Centre", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Mitra Invert", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Mitra Has Tabstop", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Smooth Rotation", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Breast Box x0", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Breast Box y0", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Breast Box x1", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Breast Box y1", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "STENTOR") {
    if (g0 === 0x0 && g1 === 0x73 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Private Creator", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Stentor Remote AETitle Element",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Stentor Local AETitle Element",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Stentor Transfer Syntax Value",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Silhouette Annot V1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Backing Mode",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Style",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Dash Length",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Cursor Mode",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Annotation Geom Color", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Point Count",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Foreground Color",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Annotation Font", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Location",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Annotation Marker Type",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x39) {
      return new Ok(
        new Item(
          tag,
          "Annotation Geom Line Style",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Annotation Marker Color", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Annotation Interactivity",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Annotation Arrow Length",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Attach Mode",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Annotation Geom Fill Pattern",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Points",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Annotation Marker Attach Mode",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Annotation Arrow Angle",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Attach Mode",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Background Color",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Shadow Offset Y",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "Annotation Don't Save",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Shadow Offset X",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Annotation Geom Dash Length",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Annotation Name", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Thickness",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Annotation Line Color", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Type",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Annotation Text String", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Annotation Geom Thickness",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Annotation Marker Size",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Annotation Text Justification",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Annotation Marker Location",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Annotation Line Control Size",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "RadWorksMarconi") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "FDMS 1.0") {
    if (g0 === 0x0 && g1 === 0x27 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Exposure Unit Type Code",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0xf1 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Subtraction Registration Result",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Reading Position Specification",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(new Item(tag, "Set No.", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Image Scanning Direction",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Film UID", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_6),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Data Compression Code", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Menu Character String", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Kanji Menu Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0xa2) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_2));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "LUT Number", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0xf1 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Image Processing Modification Flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x32 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Requesting Service", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x11 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Image Position Specifying Flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Route Image UID", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x11 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Trim Density", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_6),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Pair Processing Information",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Distribution Code", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa3) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Relative Light Emission Amount Sk",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Image Mag./Reduc. Range",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Display Format", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "FCR Image ID", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Exposure Status Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf1) {
      return new Ok(
        new Item(
          tag,
          "Processing Information Flag",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Image UID", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0xf1 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "FNC Parameters", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_6),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Image Processing Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0xa1) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_2));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Interpolation A-VRS System Format",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Extended Reading Size Value",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Film Number within the Series",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x80) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Line Density Code", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x96) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0xf1 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Energy Subtraction Param.",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Term of Correction for Each IP Type St",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_6),
      );
    } else if (g0 === 0x50 && g1 === 0xf1 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Afin Conversion Coefficient",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x32 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Requesting Physician", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Film Annotation Character String 1",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Kanji Body Part for Exposure",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x63) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf0) {
      return new Ok(
        new Item(
          tag,
          "Blackening Process Flag",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(new Item(tag, "EDR Mode", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0xf1 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Energy Subtraction Param. 2",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Exposure Kind", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Reading Gain Gp", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "No. of Split Exposure Frames",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Equipment Type-Specific Information",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Image Control Unit", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Image Display Information Version No.",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Patient Information Version No.",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0xf1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Film Output Format", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Image Rotation/Reversal Information",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Split Exposure Format",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Kanji Hospital Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Exposure Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Trim Width", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Image No. in the Set",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Radiographer's Code", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Reading Sensitivity Center",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x33) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Mag./Reduc. Ratio", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Film Annotation Character String 2",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x25 && e1 === 0xa1) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Kanji Department Name",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedShort()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_GDXE_ATHENAV2_INTERNAL_USE") {
    if (g0 === 0x7f && g1 === 0xdf && e1 === 0x10) {
      return new Ok(new Item(tag, "PPS Stream", toList([new LongText()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Pixel Data References (temporary)",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Auto Push Tag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0x25) {
      return new Ok(
        new Item(tag, "PPS Status", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS NUMBER OF FRAMES") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Number of Frames", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 033") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_6));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_6));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_6));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Raw Data US", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CT VA0  RAW") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Creation Mask service",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Evaluation Mask service",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Extended Processing Mask",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Manipulation Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Composition Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Alteration Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Generation Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Function Mask", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Mode Mirroring Code", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GE_GENESIS_REV3.0") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Axial Type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8f) {
      return new Ok(
        new Item(
          tag,
          "Swap Phase / Frequency Axis",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9c) {
      return new Ok(
        new Item(tag, "Pulse Sequence Name", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9f) {
      return new Ok(
        new Item(tag, "Coil Type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "SAT fat/water/none", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc0) {
      return new Ok(
        new Item(
          tag,
          "Bitmap of SAT Selections",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc1) {
      return new Ok(
        new Item(
          tag,
          "Surfacel Coil Iintensity Correction Flag",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcb) {
      return new Ok(
        new Item(
          tag,
          "Phase Contrast Flow Axis",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcc) {
      return new Ok(
        new Item(
          tag,
          "Phase Contrast Velocity Encoding",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd5) {
      return new Ok(
        new Item(tag, "Fractional Echo", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd8) {
      return new Ok(
        new Item(tag, "Variable Echo Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd9) {
      return new Ok(
        new Item(tag, "Concatenated Sat", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf2) {
      return new Ok(
        new Item(tag, "Number of Phases", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Delta Start Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Pitch Ratio", toList([new ShortString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS TRANS MATRIX") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Transformation Matrix",
          toList([new DecimalString()]),
          vm_5,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS NM -Private") {
    if (g0 === 0x70 && g1 === 0x51 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Current Segment", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Number of Segments", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Segment Start Position",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Segment Stop Position",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Rel. COR offset - X dir.",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Rel. COR offset - Z dir.",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Current Rotation Number",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Number of Rotations",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Alignment Translations",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Alignment Rotations",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x51 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Alignment Timestamp",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEIIS PACS") {
    if (g0 === 0x9 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Reject Image Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x9 && g1 === 0x3 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Significant Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x9 && g1 === 0x3 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Confidential Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x9 && g1 === 0x3 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "GEIIS_PREFETCH_ALGORITHM",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "GEIIS_LIMIT_RECENT_STUDIES",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "GEIIS_LIMIT_OLDEST_STUDIES",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "GEIIS_LIMIT_RECENT_MONTHS",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x9 && g1 === 0x7 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "GEIIS_EXCLUDE_STUDY_UIDS",
          toList([new UniqueIdentifier()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DLX_DOSE_01") {
    if (g0 === 0x0 && g1 === 0x27 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Private Radiation Dose Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Run Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x3) {
      return new Ok(new Item(tag, "Run Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Number of Frames", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Frames per Second", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x6) {
      return new Ok(new Item(tag, "Plane", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x7) {
      return new Ok(new Item(tag, "KV", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x8) {
      return new Ok(new Item(tag, "MA", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x9) {
      return new Ok(new Item(tag, "Mas", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x10) {
      return new Ok(new Item(tag, "Ms", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Angulation", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Rotation", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Focal Distance", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Image Intensifier Mode",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI ImageContext_01") {
    if (g0 === 0x31 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "AMI Window Invert (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "AMI Window Center (RET)",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "AMI Window Widith (RET)",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "AMI Pixel Aspect Ratio Swap (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "AMI Enable Averaging (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "AMI Quality (RET)", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "AMI Viewport Annotation Level (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "AMI Show Image Annotation (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "AMI Show Image Overlay (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AEGIS_DICOM_2.00") {
    if (g0 === 0x0 && g1 === 0x3 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x5 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x13 && g1 === 0x69 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ACUSON:1.2.840.113680.1.0:7ffe") {
    if (g0 === 0x7f && g1 === 0xdf && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Data Padding", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CT VA0  ORMR") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Repetition Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Echo Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Inversion Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Number of Averages", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Imaging Frequency", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Imaged Nucleus", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Echo Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Flip Angle", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED") {
    if (g0 === 0x0 && g1 === 0x17 && e1 === 0x0) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8d) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xd) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x81) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x21) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Recognition Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x66) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x2) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x1f && e1 === 0x70) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x55) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x8) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Tube Angle During Topogram",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x19) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x38) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x80) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x20) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x42) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa8) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6c) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x95) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Length of Pixel Matrix",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1d) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x50) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Length of Original Header",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1b) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x87) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xa) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x12) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5f) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x9) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5d) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5d) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x95) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x60) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x56) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x60) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x85) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x92) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9d) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x13) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x17) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc1) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x15) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa7) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5a) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x12) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x89) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x3) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6b) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x31) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x55) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x78) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8c) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xb1) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6b) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x29) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x33) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x24) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x83) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x90) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x39) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x59) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Target", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x43) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x65) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x21) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x40) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x97) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x98) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8e) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xe) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x1f && e1 === 0x2) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5b) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x54) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x14) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x75) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x74) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(new Item(tag, "Zoom", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x99) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1a) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x25) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5a) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x22) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6d) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x53) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x58) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x76) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x18) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x40) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x64) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9f) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x1) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x69) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x44) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x49) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x97) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x23) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9b) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x2) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x32) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x34) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x16) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x31) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa9) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x50) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "ROI Mask", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x32) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x20) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x35) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8b) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x57) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa2) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x15) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x88) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x36) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x6) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x34) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x58) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa5) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x30) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x1f && e1 === 0x0) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x22) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xb) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x73) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x59) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x25) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5c) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x94) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x86) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Byte Offset of Pixel Matrix",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xa) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x14) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4c) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x24) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1c) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x82) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1b) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x93) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6d) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x47) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1c) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x80) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x20) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x84) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x75) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x68) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7f) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc2) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa6) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x18) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x15) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa3) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1e) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x61) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x19) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x11) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x40) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x23) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x18) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x52) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x2a) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9a) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xb) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x3) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xc) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc0) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x20) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x57) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x70) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x73) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Byte Offset of Original Header",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4e) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x77) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1a) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x16) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x41) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9c) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x14) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x5) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x11) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x3a) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x11) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5f) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5e) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5c) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x52) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x21) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xb0) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6f) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x89) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x96) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x1) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x60) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xf) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x69) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x51) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x77) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x71) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x91) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x17) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4b) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6a) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x70 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa4) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x13) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9e) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x7) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5b) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x71) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x13) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1c) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x32) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa1) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x30) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1d) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf6) {
      return new Ok(
        new Item(
          tag,
          "PDM Data Object Type Extension",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6c) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5e) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x68) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x67) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x4) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x53) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x30) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x1f && e1 === 0x50) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x12) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8a) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x3) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x72) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x70) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6e) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa0) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4a) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf0) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0xf5) {
      return new Ok(
        new Item(tag, "PDM EFID Placeholder", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8d) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4f) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x33) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x67) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x48) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1f) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8f) {
      return new Ok(new Item(tag, "", toList([new SignedLong()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PAPYRUS 3.0") {
    if (g0 === 0x60 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "UIN Overlay Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x0) {
      return new Ok(new Item(tag, "Comments", toList([new LongText()]), vm_1));
    } else if (g0 === 0x60 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Overlay Rows", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Image Identifier Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x60 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Anchor Point", toList([new UnsignedShort()]), vm_2),
      );
    } else if (g0 === 0x60 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Overlay Style", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x60) {
      return new Ok(new Item(tag, "Editable", toList([new LongString()]), vm_1));
    } else if (g0 === 0x60 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Post It Text", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0xba) {
      return new Ok(
        new Item(
          tag,
          "Contour Points",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Referenced SOP Class UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x60 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Overlay ID", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Overlay Origin",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x60 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Linked Overlays", toList([new LongText()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Number of images", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Image Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Referenced File Path",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x60 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Overlay Font", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Fill Pattern", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Overlay Color", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Referenced File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0xa0) {
      return new Ok(new Item(tag, "Label", toList([new LongString()]), vm_1));
    } else if (g0 === 0x60 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "Attached Annotation", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "External PAPYRUS-File Reference Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Referenced Image SOP Class UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Referenced Image SOP Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x60 && e1 === 0xbc) {
      return new Ok(
        new Item(tag, "Mask Data", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x60 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Overlay Font Size", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Overlay Pen Size", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0xb0) {
      return new Ok(new Item(tag, "ROI Type", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Image Pointer", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Overlay Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Pixel Offset", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Referenced SOP Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Pointer Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Overlay Columns", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x60 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Shadow Size", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AGFA-AG_HPState") {
    if (g0 === 0x0 && g1 === 0x71 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x19) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x23) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x24) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x73 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x75 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x87 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x87 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED NM") {
    if (g0 === 0x0 && g1 === 0x17 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown 0017 0000", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "NCO Data for detector 1",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8d) {
      return new Ok(
        new Item(tag, "Sagittal Right Limit", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "WAM Mode", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Decay factor", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Raw Data Extension", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "ROI Total Counts", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xc4) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x66) {
      return new Ok(new Item(tag, "Y1", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Terminate on List Buffer Overflow Flag",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Toshiba CBF activity results",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "CTQ Female Entry Count",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Start Angle", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "CCD Autopeak Function", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Manual Stop Flag 0 No 1 Yes",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Curve Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Bed correction angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Number of Segments", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "COR Data", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "File Altered Flag 1 Altered",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Vertical Oblique Image",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Stop Count Condition Status 0 None 1 Any 2 All",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Frames per Phase", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x4c) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa8) {
      return new Ok(
        new Item(
          tag,
          "Gated SPECT Bins Reconstructed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6c) {
      return new Ok(new Item(tag, "Y4", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Filter Order", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Save Screen Flag 1 SaveScreen",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "MicroDELTA Mystery2", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Flood correction matrix Detector 1",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Prone Flag 0 Supine 1 Prone",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Time per Segment msec",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Pixel Overflow Flag 1 Pixel Overflow",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "Crystal thickness",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "MicroDELTA Trend", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x87) {
      return new Ok(
        new Item(
          tag,
          "Plane of Transverse Top Slice",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Y Axis Label", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Accepted Beats in Window",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5f) {
      return new Ok(
        new Item(
          tag,
          "Arm Length in cm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "CCD Count Rate Mode", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Energy window type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5d) {
      return new Ok(
        new Item(
          tag,
          "Angle Type 1 360o 2 128 Steps",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "CTQ Line Counts", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x4d) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "WB Scan Start 0 Head 1 Feet",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Number of Beats to Average",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "WB Scan Time msec", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Unknown Element 0031 02",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Auto Window Beats", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Phase Start msec", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "Decay Corr. Flag 1 Corr",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x60) {
      return new Ok(new Item(tag, "KVP", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Volume Rendered Extension",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "CTQ Normal Margin",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "CTQ Abnormal Oblique Margin",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Siemens ICON Data Type",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "WB Post Pixel Overflow 1 Yes",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9d) {
      return new Ok(
        new Item(
          tag,
          "Rotation Matrix",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Gantry step for COIN acquisitions",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Duration of THIS Frame msec",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc1) {
      return new Ok(
        new Item(
          tag,
          "Uniformity Correction Flag",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Hottest Pixel in Window",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "Regions File Extension",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Prompt window width", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "CTQ Find Max or Average Flag",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Start and end row illuminated by wind position",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Window Center Method 0 Avg 1 Peak",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Count Rate Start Condition 0 None 1 Any 2 All",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Specialized tomo type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Repeat number of the original dynamic SPECT",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "MHR ( Y-Shift) data for detector 1",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "First Frame by Counts",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6b) {
      return new Ok(
        new Item(
          tag,
          "WB Anterior kCounts View 1",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Compressed Pixel Data",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "COR Acquisition Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "CTQ Min Oblique Stack Count",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x78) {
      return new Ok(
        new Item(
          tag,
          "Total Flood Counts",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8c) {
      return new Ok(
        new Item(
          tag,
          "Attenuation Flag 1 Chang 2 Sorenson",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Total Beats Framed", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xb1) {
      return new Ok(
        new Item(
          tag,
          "Oblique Region Last Slice",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6b) {
      return new Ok(new Item(tag, "X4", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xd0) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "WB Display Field Length in cm",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Info Density Stop Count",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x24) {
      return new Ok(new Item(tag, "ROI Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Coronal Extension", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Coronal Anterior Limit",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x59) {
      return new Ok(
        new Item(
          tag,
          "CTQ Min Radius Percent",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Beats Rejected Post PVC",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Stop Time", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x65) {
      return new Ok(new Item(tag, "X1", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Text Relating to Data Object",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Folder Owner Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x97) {
      return new Ok(
        new Item(tag, "Percent Ray", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x98) {
      return new Ok(
        new Item(
          tag,
          "Astigmatic Collimator 1 Neuro 2 Cardiac",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "Sagittal Left Limit", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Scaler Index", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Event Control Mode", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5b) {
      return new Ok(
        new Item(
          tag,
          "CTQ Basal Slice Index Offset",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Angular Step", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Start Heart Beat Count Condition 0 None 1 Any 2",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Backprojection angle head 2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Radiopharmaceutical",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "CTQ Male Entry Count", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "WB Scan Speed Mode 0 Manual 1 Auto",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "Y Offset", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Random window width", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Flood correction Matrix Det 2 up to SR 2.0",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "X Offset", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x99) {
      return new Ok(new Item(tag, "XP0", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "View Number", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x7e) {
      return new Ok(
        new Item(
          tag,
          "Collimator thickness",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "Table Traverse cm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xc2) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Bed U/D correction data",
          toList([new SignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Total Counts Framed", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "VPDs Detected", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(
          tag,
          "Cycles per repeat",
          toList([new SignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6d) {
      return new Ok(
        new Item(
          tag,
          "WB Count Density",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "Zero Location (T=Top B=Bottom)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Preset name used for acquisition",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x58) {
      return new Ok(
        new Item(
          tag,
          "Radial Map Info in 0.1 mm Inc.",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Maximal Value on Y-Axis",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x3) {
      return new Ok(new Item(tag, "Units", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "X Principal Ray",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Start Heart Rate", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Stop Condition Status 0 None 1 Any 2 All",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "TIC Error Values", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Processed Flag 0 Raw 1 Process",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Counts source", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Organ System", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9f) {
      return new Ok(
        new Item(tag, "X1", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Percent of R-R Interval Framed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x69) {
      return new Ok(new Item(tag, "X3", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Stop Time Condition Status 0 None 1 Any 2 All",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "PVC Threshold msec",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x97) {
      return new Ok(
        new Item(tag, "Counts in Peak Bin", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "MHR ( Y-Shift) data for detector 2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "ROI Center Coordinates",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa9) {
      return new Ok(
        new Item(
          tag,
          "Effective repeat time",
          toList([new SignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9b) {
      return new Ok(new Item(tag, "XP1", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown 55-02", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Info Density Stop Region",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x7f) {
      return new Ok(
        new Item(
          tag,
          "Collimator angular resolution",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Total Counts in THIS Frame",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Info Density Stop Scaler",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa9) {
      return new Ok(
        new Item(
          tag,
          "Vertical Oblique Image",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc3) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Pixel scale factor",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Folder Status", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Folder Creation Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Flood Corr. Flag 1 Corr",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Maximal Value on X-Axis",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "X Axis Label", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Number of point sources used for NCO and MHR",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8b) {
      return new Ok(
        new Item(
          tag,
          "Number of Transverse Slices",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x57) {
      return new Ok(
        new Item(
          tag,
          "Scatter Corr. Flag 1 Corr",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Z0", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Highest Pixel Value in THIS Frame",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Backprojection angle head 1",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Slice Step in Pixels", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Folder Modification Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "CCD Window Offset",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Dose calibration factor",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Folder Modification Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x58) {
      return new Ok(
        new Item(
          tag,
          "CTQ Max Sagittal Stack Count",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Low Count", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa5) {
      return new Ok(
        new Item(
          tag,
          "Pixel Size X Direction mm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Write Version",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Rejection Scheme", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "COR Corr. Flag 1 Corr",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "ROI Total Pixels", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Curve Data", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Display Magnification",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Y Gains", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x59) {
      return new Ok(
        new Item(
          tag,
          "Direction H HeadIn F FeetIn",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Transaxial acceptance width for coincidence",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(
        new Item(
          tag,
          "Acquired cycles per repeat",
          toList([new SignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "ROI Data", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5c) {
      return new Ok(
        new Item(
          tag,
          "Pixel Acquisition Date",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "WB Post Scan Time msec",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Filter Alpha Coefficient",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "WB Scan Speed cm/min", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Blank scan image for profile",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Bladder Image Extension",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Expansion Blocks",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "TER Lower Limit",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Plane of Transverse Bottom Slice",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Analog Output Device", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Lowest Pixel Value in THIS Frame",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4c) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Acquisition Time per Window msec",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Frame reference time",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "Buffer Overflow Flag 1 Buffer Overflow",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Serum Creatinine mg/dl",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Curve Function Label", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Sagittal Extension", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Overlay Map",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Elapsed Time Stop", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "Filter Cutoff Frequency",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6d) {
      return new Ok(
        new Item(
          tag,
          "Pixel Size Flag 1 Valid Size",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "MicroDELTA Version", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "Beat Rejection Parameter",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1c) {
      return new Ok(
        new Item(
          tag,
          "Stop Heart Beat Count Condition 0 None 1 Any 2 A",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Unknown 0017 0080", toList([new ShortText()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x17 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Scanning Sequence", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Bed step for wholebody or Coin acquisitions",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Rescale Slope",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Transverse Extension", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "WB Post View Status No Img 1 Complete 2 Aborted",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x68) {
      return new Ok(new Item(tag, "Y2", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA File Extension",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7f) {
      return new Ok(
        new Item(
          tag,
          "Segment Type 0 Segments 2 Time/Segment",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Radio nuclide half life",
          toList([new SignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc2) {
      return new Ok(
        new Item(tag, "Overflow Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa6) {
      return new Ok(
        new Item(
          tag,
          "Pixel Size Y Direction mm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Frame Angle", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Start Heart Beat Count",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Z1", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Start Time of THIS Frame From Start of Study",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Non-gated File Extension",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "MicroDELTA Mode", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "CTQ Max Oblique Stack Count",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Color Table Extra",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Frame Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Gantry Zero Position", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Noncircular Orbit Flag 1 NCO",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Body Surface Area m2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Total Counts in Window",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Thyroid Markers",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xc3) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9a) {
      return new Ok(new Item(tag, "ZP0", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Color Table Used",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "CTQ Time Delay Units", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Communication Type", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Control Unit 1 ICON 2 DOT 3 ScintiView",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc0) {
      return new Ok(
        new Item(
          tag,
          "Head Tilt degrees",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "R-R Interval msec", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "ROI Average Pixel Value",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x57) {
      return new Ok(
        new Item(
          tag,
          "CTQ Min Sagittal Stack Count",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "CTQ has been used", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Minimal Value on Y-Axis",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Rescale intercept",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(
          tag,
          "Number of repeats per phase",
          toList([new SignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Number of Images in Folder",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Parameter Blocks",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "WB Posterior kCounts View 2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "CTQ Unknown Entry Count",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x77) {
      return new Ok(
        new Item(
          tag,
          "Y Principal Ray",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Starburst flags", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "NCO Data for detector 2",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Elapsed Time Stop Condition 0 None 1 Any 2 All",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "CTQ Abnormal Sagittal Margin",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Accepted Beats", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Zoom Y Offset 0.1 mm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Framed Counts", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Number of Points", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Radio Nuclide positron fraction",
          toList([new SignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Start Heart Rate Threshold Condition",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "MicroDELTA Write ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Stop Count", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9c) {
      return new Ok(new Item(tag, "ZP1", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "Requested Frame Duration msec",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Window Width %", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Number of Views", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "CCD Window Width", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Scaler Counts", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Number of scalers", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Average Heart Rate BPM",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "WB IRIS Corr. File Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "ECAT File Menu Header",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Number of Overlays",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Phase Pause msec", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Elapsed Time Start msec",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5f) {
      return new Ok(
        new Item(
          tag,
          "CTQ Radial Angle Increment",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "CTQ Radii Counts", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Whole Body View", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5c) {
      return new Ok(
        new Item(
          tag,
          "CTQ Starting Line Index",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Total Rotation in Degrees",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Flood Acquisition Date",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "Oblique Region First Slice",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6f) {
      return new Ok(
        new Item(
          tag,
          "WB Coun Density Speed cm/min",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Phase number of the original dynamic SPECT",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x89) {
      return new Ok(new Item(tag, "SWG", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "Attenuation Cooefficient",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Camera Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Flood correction matrix Detector 2",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Zoom X Offset 0.1 mm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Gantry correction angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Number of detectors", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "WB Number of Passes", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Orbit 0 Circular 1 Elliptical",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x77) {
      return new Ok(
        new Item(
          tag,
          "WB Ant Pixel Overflow 1 Yes",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Y Focal Length",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "WB Ant View Status No Img 1 Complete 2 Aborted",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Frame Pause msec", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Isotope Used in Reconstruction",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Elapsed Time Start Condition 0 None 1 Any 2 All",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Crystal type Startburst or not",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Start Heart Rate Increasing Flag",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Camera config angle",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "Repeat start time",
          toList([new SignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4b) {
      return new Ok(
        new Item(
          tag,
          "Autobeat Window 0 No 1 Yes",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x6a) {
      return new Ok(new Item(tag, "Y3", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "WB Scan Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Main Acquisition View", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Transverse Scale", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Average R-R Interval msec",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Terminate on Pixel Overflow Flag 1 Terminate",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "Repeat stop time", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x9e) {
      return new Ok(
        new Item(tag, "X0", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "CCD Peaking Mode", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5b) {
      return new Ok(
        new Item(
          tag,
          "Multiplexor Flag 1 Multiplexed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Bladder Esidual Volume cc",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Number of Non-Image Objects",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Count Rate Start", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Number of Phases", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "MicroDELTA Mystery1", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Y1", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Info Density Stop Condition",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "MicroDELTA ESFR", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x53 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Stop Heart Beat Count", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6c) {
      return new Ok(
        new Item(
          tag,
          "WB Anterior kCounts View 2",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "BBA Miscellaneous Info", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "Orbit Definition", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x68) {
      return new Ok(
        new Item(
          tag,
          "WB Aperature Width in cm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Weight factor table for coincidence acquisitions",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Time of Lasix Administration",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "TER", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Length of Group 0x7FE3",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x67) {
      return new Ok(new Item(tag, "X2", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "Trigger Source",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "CCD Energy Level",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Rejected Beats", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "CTQ Stress/Rest Time Delay",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Folder Creation Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x1f && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Location RET", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "e.soft DICOM original image type",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Y-Axis Smooth Slice Weights",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "External Zoom",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "X Gains", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "X Focal Length",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "Rejection Type", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "COR Data for Detector 1",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Tolerance %", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "COR Data for Detector 2",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Whole Body Processed Flag 0:Raw 1:Img1-Img2 2:Im",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "MicroDELTA Overlay Block",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Lasix Dose mg",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6e) {
      return new Ok(
        new Item(
          tag,
          "WB Reference View Flag 1 Ref",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "Histogram Bin Interval msec",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "PVC Rejection Flag 1 Reject",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Number of Radiopharmaceutical information seq",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "WB Posterior kCounts View 1",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Y0", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "Framing Mode 1 Forward 2 F/B",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Flood correction Matrix Det 1 up to SR 2.0",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Minimal Value on X-Axis",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Present Time of Day", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf0) {
      return new Ok(
        new Item(
          tag,
          "Pixel Dimensions",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(
          tag,
          "Phase Total Counts",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8d) {
      return new Ok(
        new Item(
          tag,
          "Total Counts in Acquisition",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "ECAT File Subheader",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x31 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Radionuclide Units", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "WB Scan Length in cm", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "SGI Converted LookUp Table",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "CTQ Matrix Size", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x67) {
      return new Ok(
        new Item(
          tag,
          "WB Scan Direction 0 Lt to Rt 1 Rt to Lt",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "NCO Values", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Decay correction", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Number of Windows", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "ROI Maximum Pixel Value",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x8f) {
      return new Ok(
        new Item(
          tag,
          "Coronal Posterior Limit",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS UNDOCUMENTED") {
    if (g0 === 0x55 && g1 === 0x3 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Slice Thickness", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x55 && g1 === 0x3 && e1 === 0x24) {
      return new Ok(new Item(tag, "Plane", toList([new UnlimitedText()]), vm_1));
    } else if (g0 === 0x55 && g1 === 0x3 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Number of Slices", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x55 && g1 === 0x3 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Prepulse", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x55 && g1 === 0x3 && e1 === 0xae) {
      return new Ok(
        new Item(tag, "Contrast Agent Flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x55 && g1 === 0x3 && e1 === 0xbb) {
      return new Ok(new Item(tag, "Coil ID", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x55 && g1 === 0x3 && e1 === 0xc2) {
      return new Ok(
        new Item(tag, "Anatomy", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x55 && g1 === 0x3 && e1 === 0xc3) {
      return new Ok(
        new Item(tag, "Indication", toList([new UnlimitedText()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SECTRA_Ident_01") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Request number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Examination number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Series ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Series Order", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Image Data ID", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 017") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CT VA0  COAD") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Table Feed", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbe) {
      return new Ok(
        new Item(
          tag,
          "Expiratoric Reserve",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Patient Region", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbf) {
      return new Ok(
        new Item(tag, "Vital Capacity", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(
          tag,
          "Spiral Reconstruction Direction",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "Focal Spot Deflection Phase",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "Osteo Regression Line Intercept",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xbd) {
      return new Ok(
        new Item(
          tag,
          "Pulmo Trigger Level",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaf) {
      return new Ok(
        new Item(
          tag,
          "Correction Table Reference Time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc1) {
      return new Ok(
        new Item(tag, "Pulmo Air", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Osteo Standardization Code",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Focal Spot Deflection Amplitude",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Patient Phase of Life", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Spiral Location Begin",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(
          tag,
          "Mode Processing Step Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa9) {
      return new Ok(
        new Item(tag, "Mode Store Step", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xae) {
      return new Ok(
        new Item(
          tag,
          "Number of Readings per Rotation",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc3) {
      return new Ok(new Item(tag, "Pulmo Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xac) {
      return new Ok(
        new Item(tag, "Mode MBH Kind", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "Focus Size Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "Feed per Rotation", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Detector Center", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Distance Source to SourceSide Collimator",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Reading Integration Time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Distance Source to DetectorSide Collimator",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc2) {
      return new Ok(new Item(tag, "Pulmo Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Osteo Offset", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xad) {
      return new Ok(
        new Item(
          tag,
          "Mode Balancing Kind",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Rotation Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "Pulmo Water", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Detector Alignment", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(
          tag,
          "Scan Tilt Plane Distance",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Spiral z Profile", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(
          tag,
          "Interpolation Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Osteo Regression Line Slope",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(
          tag,
          "Spiral Reconstruction Increment",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "Mode Processing Control Mask",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Water Scaling Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(
          tag,
          "Mode Master Mask",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Detector Spacing", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "Spiral Location End",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Number of Possible Channels",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Focus Alignment", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Mean Channel Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(
          tag,
          "Osteo Phantom Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x67) {
      return new Ok(
        new Item(
          tag,
          "Focal Spot Deflection Offset",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xab) {
      return new Ok(
        new Item(
          tag,
          "Mode Adaptive Filter Kind",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MDS NORDION OTP ANATOMY MODELLING") {
    if (g0 === 0x30 && g1 === 0x5 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x30 && g1 === 0x5 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 023") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x37) {
      return new Ok(new Item(tag, "Unknown", toList([new Date()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x38) {
      return new Ok(new Item(tag, "Unknown", toList([new Time()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DL_SERIES_01") {
    if (g0 === 0x0 && g1 === 0x15 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Series File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "Number Of Images", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "Sent Flag", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x8d) {
      return new Ok(
        new Item(tag, "Item Locked", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4c) {
      return new Ok(
        new Item(tag, "internal label", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4d) {
      return new Ok(
        new Item(tag, "browser hide", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED ECAT FILE INFO") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "ECAT_Main_Header", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "ECAT_Image_Subheader",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ELSCINT1") {
    if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Tamar Site Id", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Batch Slice Number", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x61) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Tamar Study Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Scanner Relative Center",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Presentation Relative Part",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x80) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "PS Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Batch Number", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Tamar Original Curve Desc",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Data Dictionary Version",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x60 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Text Overlay Flag", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Surview Length", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Patient Data Modification Date",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe3 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Weight",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Relative Table Height",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Tamar Study Body Part", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Implementation Version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x81) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_2),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xe1 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Relative Table Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x4c) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Presentation Horizontal Invert",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x9f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Tamar Study Has Sticky Note",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Acquisition Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Batch Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Tamar Translate Flags",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Presentation Relative Center",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Tamar Compression Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x99) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x4d) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "number of series in study",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x75) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_2));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Duration",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0xe3 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x26) {
      return new Ok(new Item(tag, "Pitch", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x62) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "last update date", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Rotation Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0xb) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_2));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x43) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Rotation Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Image Label", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xe1 && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Image View Type", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x25) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Concurrent Slices Generation",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xe1 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Tamar Exe Software Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x4e) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x84) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Tamar Software Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x2b) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0xc2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_2),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x4a) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Tamar Study Age", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe3 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Image View Convention", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "last update time", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x6 && g1 === 0x1 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Surview Direction", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x3f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x9f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_2),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x55) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Reconstruction Arc", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "protection flag", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Patient Language", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x3 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Offset List Structure",
          toList([new OtherWordString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Tamar Compressed Pixel Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x36) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x71) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x62) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_3),
      );
    } else if (g0 === 0x50 && g1 === 0x1 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_3),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Angular Sampling Density",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Protocol File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Acquisition Length", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Table Velocity", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xdf && e1 === 0xff) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0xa0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x42) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0xe1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf7 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x9c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "number of images in series",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x42) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x63) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x47) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf3 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_2),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x38) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x4b) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x7 && g1 === 0xa3 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Tamar Source Ae",
          toList([new ApplicationEntity()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7 && g1 === 0xa1 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x1 && g1 === 0xf1 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ISI") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "SIENET General Purpose IMGF",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR/LAST") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb3) {
      return new Ok(
        new Item(
          tag,
          "Number of Rejections",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xce) {
      return new Ok(new Item(tag, "REST", toList([new IntegerString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd6) {
      return new Ok(
        new Item(
          tag,
          "Fourier Interpolation",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Window Maximum", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "View Transform", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "FP Max", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Window Minimum", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "View Center", toList([new IntegerString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb1) {
      return new Ok(
        new Item(
          tag,
          "Minimum RR Interval",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf2) {
      return new Ok(
        new Item(tag, "WS Protocol String 3", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "View Zoom", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x60 && g1 === 0x1 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "View Size", toList([new IntegerString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe1) {
      return new Ok(
        new Item(tag, "Prepulse Delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe0) {
      return new Ok(
        new Item(tag, "Prepulse", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf3) {
      return new Ok(
        new Item(tag, "WS Protocol String 4", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Stack Radial Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Scaled Minimum", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc6) {
      return new Ok(
        new Item(
          tag,
          "Cycled Multiple Slice",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "FP Min", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Main Magnetic Field",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Scaled Maximum", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb2) {
      return new Ok(
        new Item(
          tag,
          "Maximum RR Interval",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x27 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb4) {
      return new Ok(
        new Item(
          tag,
          "Number of RR Intervals",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf1) {
      return new Ok(
        new Item(tag, "WS Protocol String 2", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Flow Compensation", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Slice Gap", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "WS Protocol String 1", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb5) {
      return new Ok(
        new Item(
          tag,
          "Arrhythmia Rejection",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS DFR.01") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Graphic Evaluation Mask",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Type 1st Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Description 1st Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Type 2nd Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Description 2nd Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Type 3rd Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Description 3rd Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Type 4th Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Description 4th Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Type 5th Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Description 5th Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Type 6th Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Description 6th Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Type 7th Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Description 7th Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Type 8th Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Description 8th Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Type 9th Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Description 9th Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "Type 10th Graphic Element",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Description 10th Graphic Element",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "VEPRO BROKER 1.0 DATA REPLACE") {
    if (g0 === 0x0 && g1 === 0x57 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Original data sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Replaced data sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Date of data replacement", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Time of data replacement", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Dicom receive node", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Application name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Computer name", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT STARTING GANTRY ANGLE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Starting Projection Angle",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MedIns HP Extensions") {
    if (g0 === 0x54 && g1 === 0x73 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-CTBE Release 1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CSA NON-IMAGE") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "CSA Data Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "CSA Data Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CSA Data Info", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CSA Data", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 034") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xd) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x23) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x24) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS DFR.01 SERVICE") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "1 Plot", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Width 1 Plot", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "2 Plot", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Width 2 Plot", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "xCoordinate Region of Interest",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "yCoordinate Region of Interest",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Width Region of Interest",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Height Region of Interest",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(1, new Some(5)),
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PMOD_1") {
    if (g0 === 0x0 && g1 === 0x55 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Frame Start Times Vector",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Frame Positions Vector",
          toList([new FloatingPointDouble()]),
          vm_3_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Frame Orientations Vector",
          toList([new FloatingPointDouble()]),
          new ValueMultiplicity(6, new None()),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Frame Durations (ms) Vector",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Frame Rescale Slope Vector",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 109") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_4));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xd) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS SCALED IMG PIX SPC") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Scaled Image Pixel Spacing",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA COMAPL OOG") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "COMAPL OOG Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "COMAPL OOG Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1_to_n));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(new Item(tag, "", toList([new UnsignedLong()]), vm_1_to_n));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(new Item(tag, "", toList([new UnsignedLong()]), vm_1_to_n));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(new Item(tag, "", toList([new CodeString()]), vm_1_to_n));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Hologic") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Hx Questionnaire", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Image Analysis Data in XML",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Encoding Scheme Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "P File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "P File Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "P File Length", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "R File Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "R File Length", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CM VA0  ACQU") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Parameter File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Sequence File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Sequence File Owner", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Sequence Description", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "EPI File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Mode File Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 1",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 2",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 3",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 4",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 5",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 6",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 7",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x37) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 8",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 9",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x39) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Comment 10",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(
        new Item(
          tag,
          "Reading Code RZ1 Comment 1",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3b) {
      return new Ok(
        new Item(
          tag,
          "Reading Code RZ1 Comment 2",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3c) {
      return new Ok(
        new Item(
          tag,
          "Reading Code RZ2 Comment 1",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "NUD_PRIVATE") {
    if (g0 === 0x77 && g1 === 0x77 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Interfile", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x77 && g1 === 0x77 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Agfa ADC NX") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf5) {
      return new Ok(
        new Item(tag, "Cassette Orientation", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf6) {
      return new Ok(
        new Item(tag, "Plate Sensitivity", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf7) {
      return new Ok(
        new Item(tag, "Plate Erasability", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xfe) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS SIENET") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Private 3D") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Xres Filtering Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Private Native Data Stream Array",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Low Threshold",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Reference Graphic Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Trim Plane Equation",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Num Completed Trim Planes",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Image Layout",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x37) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Arbitrary Crop Dist From Center",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Vision Vol Brightness",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Echo Smoothing",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Zoom Factor",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Private Native Threed Data Sequence(1)",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2b) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Rotation Angle Y",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Map Inverted",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Transparency",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Arbitrary Crop Rotation Matrix",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Bondbox Graphic Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Color Stream Display Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Cursor Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Vol Rotation Matrix",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Color Smoothing",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Is Arbitrary Crop",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Mpr Rotation Matrix",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Wall Filter",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Vdb Param Echo 3d Estimate Dimension(2)",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x39) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Color Gain",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2d) {
      return new Ok(
        new Item(
          tag,
          "Threedpr View Translation",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Echo Vision Setting",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Box Crop Max Point",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Color Write Priority",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Echo Stream Display Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Color Wall Filter Index",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Gain",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Baseline",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Vdb Param Echo 3d Estimate Apex Position (2)",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Box Outlined Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Vdb Param Color 3d Estimate Color Offset",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Compress",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2a) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Rotation Angle X",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2c) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Data Voi Center",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Echo Twod Chroma Map Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Vdb Param Color 3d Estimate Scale(2)",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Color Vision Setting",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Light Brightness",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Smoothing Enabled",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Vdb Param Color 3d Estimate Apex Position (1)",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2e) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Data Voi Min Point",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2f) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Data Voi Max Point",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Threedpr Depth", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Subpage Data Version",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Elevation Scale Factor",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Basic Vol Brightness",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Threedpr Box Crop Min Point",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS PI ALIGNMENT IMAGE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Alignment Offset Valid Flag",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT PROJECTION GANTRY POSITIONS") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Gantry Positions",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DIGISCAN IMAGE") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "CARDIO-D.R. 1.0") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "File Location", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "File Size", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Alternate Image Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Image Blanking Shape",
          toList([new CodeString()]),
          vm_1_to_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Image Blanking Left Vertical Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "Image Blanking Right Vertical Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Image Blanking Upper Horizontal Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Image Blanking Lower Horizontal Edge",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Center Of Circular Image Blanking",
          toList([new IntegerString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Radius Of Circular Image Blanking",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Maximum Frame Size", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Image Sequence Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Standard Edge Enhancement Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Size",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Convolution Kernel Coefficients",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Gain",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS SC IMG SID") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Non-RT Image SID", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT ARC INCREMENT") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Arc Increment", toList([new IntegerString()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS-MR-1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Chemical Shift Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Phase Number (Philips)",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Slice Number", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS FP Alignment Calibration Date / Time") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Flat Panel Alignment last calibration Date and Time",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SCHICK TECHNOLOGIES - Viewset Creator ID") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Instance UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(new Item(tag, "Name", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(new Item(tag, "Sequence", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(new Item(tag, "Mode", toList([new UnsignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(new Item(tag, "Type", toList([new UnsignedLong()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "QUASAR_INTERNAL_USE") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "WholeBody Spots", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Angle Vector", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x44) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Worklist Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Sequence Name", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x1b) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Begin Index Vector", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Raw Time Vector", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Avr RR Time Vector", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "End Index Vector", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Time Vector", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "High Limit Vector", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Rate Vector", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Low Limit Vector", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Sequence Type", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Camera Shape", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Count Vector", toList([new UnsignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x37 && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Image Type String", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DR Systems, Inc.") {
    if (g0 === 0x44 && g1 === 0x53 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "DR Exam ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x44 && g1 === 0x53 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "DR Image Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x44 && g1 === 0x53 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "DR File Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x44 && g1 === 0x53 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "DR File Suffix", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x44 && g1 === 0x53 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "DR Annotation Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x44 && g1 === 0x53 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "DR Original Instance UID Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS AE TITLE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x79) {
      return new Ok(new Item(tag, "AE Title", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Silhouette Line V1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Line Name", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Line Name Font", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Line Name Display", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Line Normal Color", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Line Type", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Line Thickness", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Line Style", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Line Dash Length", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Line Interactivity", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Line Measurement Color", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Line Measurement Font", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Line Measurement Dash Length",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Line Point Space", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Line Points", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Line Control Point Size",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Line Control Point Space",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Line Control Points",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x28) {
      return new Ok(new Item(tag, "Line Label", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Line Don't Save", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MeVis eD: Geometry Information") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "GeoScannerOrigin", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(new Item(tag, "SlicesID", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS TABLE OFFSET") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Offset", toList([new DecimalString()]), vm_3),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AGFA_ADC_Compact") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Data stream from cassette",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Identification Code",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Set of destination types",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Set of destination Ids", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Set of processing codes",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Number of series in study",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Session Number", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "ID station name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Number of images in series",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Break condition", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "Wait (or Hold) flag",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "ScanRes flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Operation code", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Image quality", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI ImageContextExt_01") {
    if (g0 === 0x31 && g1 === 0x7 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "AMI Window Function (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x7 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "AMI Window Slope (RET)",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Varian Medical Systems VISION 3253") {
    if (g0 === 0x32 && g1 === 0x53 && e1 === 0x0) {
      return new Ok(new Item(tag, "XML stream.", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x32 && g1 === 0x53 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Data length of the XML stream",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x32 && g1 === 0x53 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Extended Interface Format tag",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private-DCI Release 1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_SENO_02") {
    if (g0 === 0x0 && g1 === 0x45 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Integration Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3f) {
      return new Ok(
        new Item(
          tag,
          "Vignette Pixel Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3e) {
      return new Ok(
        new Item(
          tag,
          "Vignette Pixel Representation",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Mean Of Log Region Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Real Magnification Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3c) {
      return new Ok(
        new Item(
          tag,
          "Vignette Bits Stored",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Estimated Anat mean",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Standard Deviation Of Log Region Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x4) {
      return new Ok(new Item(tag, "AES", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "Threshold", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Set Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Segm Threshold", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Stereo angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Mean Of Offset Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "Vignette High Bit", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "2DLocY", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Pixel Pitch Microns",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "2DLocX", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Detector Entrance Dose",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "WindowingType (LINEAR or GAMMA)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Receptor Size Pixels X and Y",
          toList([new IntegerString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x13) {
      return new Ok(new Item(tag, "Screen", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Standard Deviation Of Corrected Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Receptor Size cm X and Y",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "Noise Reduction Sensitivity",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Clinical View", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Standard Deviation Of Raw Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Mean Of Raw Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Pixel Depth Bits", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x57) {
      return new Ok(
        new Item(
          tag,
          "Noise Reduction Threshold",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "SC Instance UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Vignette Columns", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Image Crop point", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Breast ROI Y", toList([new IntegerString()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "Asymmetrical Collimation Information",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "Windowing parameters",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x3b) {
      return new Ok(
        new Item(
          tag,
          "Vignette Bits Allocated",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "SC series UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "Mean Of Corrected Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "User Window Center", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "STX buffer", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Exponent", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Vignette Rows", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "ROI Origin X and Y", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Raw Diagnostic Low", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x58) {
      return new Ok(new Item(tag, "mu", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "Raw Diagnostic High",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "User Window Width", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "A Coefficients", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Senograph Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Breast ROI X", toList([new IntegerString()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "MAO Buffer", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Binning Factor X and Y",
          toList([new IntegerString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "Radiological Thickness",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x45 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Standard Deviation Of Region Gray Levels",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MeVis BreastCare") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x71 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CT VA0  IDE") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "SOMATOM Software Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Data Set Subtype 1", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Data Set Subtype 2", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Data Set Subtype 3", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Data Set Subtype 4", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Data Set Subtype 5", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Directory Text", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Exposure Time Text", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(new Item(tag, "Scan Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x51) {
      return new Ok(new Item(tag, "Scan Time", toList([new Time()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR R5.5/PART") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Field of View", toList([new DecimalString()]), vm_2),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_DL_PATNT_01") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Patient Instance Uid",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Last Study Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Patient Repaired", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Lock Demographics", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "EMAGEON JPEG2K INFO") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new DateTime()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "QCA") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Analysis Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Segment Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Pre Catheter size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Pre Reference Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Pre Minimum Lumen Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Pre Average Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Pre Stenosis Length",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Pre Stenosis %", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Pre Geometric Area Reduction %",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Post Catheter Size", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Post Reference Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Post Minimum Lumen Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Post Average Diameter",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Post Stenosis Length",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Post Stenosis %", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Post Geometric Area Reduction %",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "VEPRO VIM 5.0 DATA") {
    if (g0 === 0x0 && g1 === 0x55 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "VIFHEADER2", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "VIMDATA2", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "ICONDATA2", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "VEPRO UID ??", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x55 && e1 === 0x65) {
      return new Ok(new Item(tag, "??", toList([new OtherByteString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DIDI TO PCR 1.1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Original Filename", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb3) {
      return new Ok(
        new Item(tag, "Key Percentile 2", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Fixed Brightness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x89 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Stamp Image Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaf) {
      return new Ok(
        new Item(tag, "Smooth Gain", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb1) {
      return new Ok(
        new Item(tag, "Measure Field 2", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(new Item(tag, "Stitching", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(new Item(tag, "Version", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Structure Boost", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "Print Marker", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa9) {
      return new Ok(
        new Item(tag, "Noise Dose Limit", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xae) {
      return new Ok(
        new Item(
          tag,
          "Structure Boost Offset",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "Processing Category", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xac) {
      return new Ok(
        new Item(
          tag,
          "Weak Contrast Limit",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Post Mode String", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "Noise Dose Step", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "Measure Field 1", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "PCR Print Scale", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Header", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "PCR Film Layout Position",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "PCR Print Job End", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unprocessed Flag", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xad) {
      return new Ok(
        new Item(
          tag,
          "Strong Contrast Limit",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "PCR Print Report Name", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "Collimator X", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Contrast Balance", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Abdomen Brightness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "RAD Protocol Medium", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Destination Postprocessing Function",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x89) {
      return new Ok(
        new Item(tag, "Exposure Index", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb6) {
      return new Ok(new Item(tag, "Gamma", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(new Item(tag, "Post Data", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "Key Percentile 1", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Detail Contrast", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa7) {
      return new Ok(
        new Item(
          tag,
          "Structure Preference",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "Collimator Y", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "RAD Protocol Printer", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb4) {
      return new Ok(
        new Item(tag, "Density LUT", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "Noise Robustness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Route AET", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Ranging Mode", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "PCR No Film Copies", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(
        new Item(tag, "Acqd Sensitivity", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Filter Type", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Key Values", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8d) {
      return new Ok(
        new Item(tag, "RGDV Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb5) {
      return new Ok(
        new Item(tag, "Brightness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xab) {
      return new Ok(
        new Item(
          tag,
          "Noise Frequency Limit",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CM VA0  COAD") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3d) {
      return new Ok(
        new Item(
          tag,
          "Reading Code RZ2 Comment 2",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DLX_ANNOT_01") {
    if (g0 === 0x70 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Text_annotation", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x70 && e1 === 0x5) {
      return new Ok(new Item(tag, "Box", toList([new IntegerString()]), vm_2));
    } else if (g0 === 0x70 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Arrow end", toList([new IntegerString()]), vm_2),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS SMS-AX  ACQ 1.0") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "SH_STPAR", toList([new OtherByteString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Dyna Angles", toList([new SignedShort()]), vm_2_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Skin Dose Accumulation",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "DR Single Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "EVE",
          toList([new UnsignedShort()]),
          new ValueMultiplicity(8, new Some(8)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Pressure Data", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Modality LUT Output Gamma",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Modality LUT Input Gamma",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Harmonization", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Acquisition Zoom", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Source to Isocenter", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Restore Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "FD Rows", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "ECG Index Array", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(new Item(tag, "Dose", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "K-Factor", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Footswitch Index", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Table Movement Flag",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Measuring Field", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Skin Dose Percent", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Acquisition Room", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Copper Filter", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Crispy XPI Filter", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Current Time Product", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "FD Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "SH_COLPAR", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Acquisition Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Original Organ Program Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Total Steps", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x57) {
      return new Ok(
        new Item(
          tag,
          "Unknown",
          toList([new SignedShort()]),
          new ValueMultiplicity(1, new Some(3)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Dyna Angulation Step Width",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "SH_ZOOM", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Skin Dose Rate", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Dyna X-Ray Info", toList([new SignedLong()]), vm_3_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "FD Columns", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Total Scene Time", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Stand Movement Flag",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Impac Filename", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Acquisition Mode", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Post Blanking Circle", toList([new SignedShort()]), vm_3),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MEDCOM OOG") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "MedCom OOG Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "MedCom OOG Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "MedCom OOG Info", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI Release 1") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Comments", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x15) {
      return new Ok(new Item(tag, "UID", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Data Object Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Data Object Subtype", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(new Item(tag, "Organ", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Allergy Indication", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Pregnancy", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Compression Algorithm", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_RELA_01") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Auto window/level level",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "Tag Spacing", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x58) {
      return new Ok(new Item(tag, "Overlaps", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x92) {
      return new Ok(
        new Item(
          tag,
          "Biopsy T location",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4f) {
      return new Ok(
        new Item(
          tag,
          "Locations in acquisition",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Tube focal spot position",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Series Record checksum",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "Anatomical reference for scout",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x18) {
      return new Ok(
        new Item(
          tag,
          "Genesis version - Now",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Rotation from source x rot",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Graphically prescribed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x71) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "Biopsy ref location",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Series from which prescribed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Auto window/level alpha",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Table start location",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Auto window/level window",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Image position", toList([new ShortString()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x53) {
      return new Ok(
        new Item(
          tag,
          "Rotation from source z rot",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Acq recon record checksum",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Genesis Version - now",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "RTIA_timer", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Biopsy position", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5f) {
      return new Ok(new Item(tag, "Fps", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5c) {
      return new Ok(
        new Item(
          tag,
          "Tagging Orientation",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Rotation from source y rot",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Series from which Prescribed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Num 3D slabs", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Image orientation", toList([new ShortString()]), vm_6),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "Locs per 3D slab", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5b) {
      return new Ok(
        new Item(tag, "Tagging Flip Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Image from which prescribed",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Auto window/level beta",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x59) {
      return new Ok(
        new Item(
          tag,
          "Image Filtering 0.5/0.2T",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Screen Format", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x5a) {
      return new Ok(
        new Item(tag, "Diffusion direction", toList([new SignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "HOLOGIC, Inc.") {
    if (g0 === 0x7f && g1 === 0x1 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x7e && g1 === 0x1 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0x1 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7e && g1 === 0x1 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7e && g1 === 0x1 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x37) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x7e && g1 === 0x1 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x7e && g1 === 0x1 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x7f && g1 === 0x1 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0x1 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DLX_SERIE_01") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "X Zoom", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Side Mark", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Percent Landscape", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Angle Value 3", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Image chain FWHM psf mm max",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Angle Label 2", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Adx Exam Name", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "Adx Exposure Duration",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Angle Label 3", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(
          tag,
          "Table Lateral Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Adx Injector Delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Intercept LV Regression",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "Lambda cm Pincushion Distortion",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Y Zoom", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Adx Auto Inject", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Adx Record View", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Adx Camera Rotation Enable",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(
          tag,
          "Image chain FWHM psf mm min",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "User Spatial Filter Strength",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "User Zoom Factor", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Adx Patient Size", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Adx Reverse Sweep", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Adx Procedure Name", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Angle Value 2", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Angle Value 1", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Table Longitudinal Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Adx Dose", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Ip Address", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Slope LV Regression",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Adx Acq Mode", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Table Vertical Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Angle Label 1", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Adx Focus", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR/PART 6") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CALIBRATION DATE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Calibration Date", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips MR Imaging DD 002") {
    if (g0 === 0x20 && g1 === 0x5 && e1 === 0x32) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x37) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x38) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x43) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherWordString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x47) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x99) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "SPI Release", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR/PART") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Row Number", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc3) {
      return new Ok(
        new Item(tag, "Scan Resolution", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcb) {
      return new Ok(
        new Item(
          tag,
          "Foldover Direction Coronal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Number of Chemical Shifts",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xce) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Repetition Time FFE",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd9) {
      return new Ok(
        new Item(tag, "EPI Factor", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Echo Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1d) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Spectral Presaturation With Inversion Recovery",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Cardiac Frequency", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new DateTime()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Number of Slices", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xfa) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Magnetization Transfer Contrast",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Dynamic Scan Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Inversion Delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd4) {
      return new Ok(
        new Item(tag, "Artifact Reduction", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd2) {
      return new Ok(
        new Item(tag, "Water Fat Shift", toList([new LongString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xca) {
      return new Ok(
        new Item(
          tag,
          "Foldover Direction Sagittal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe1) {
      return new Ok(
        new Item(tag, "Prepulse Delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "CC Angulation", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Repetition Time IR", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Type", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd7) {
      return new Ok(
        new Item(tag, "Scan Percentage", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Number of Rows In Object",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "Gate Width", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Patient Orientation 1",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd8) {
      return new Ok(
        new Item(tag, "Halfscan", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Chemical Shift Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x97) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Patient Reference ID",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Slice Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe0) {
      return new Ok(
        new Item(
          tag,
          "Percentage of Scan Completed",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Field of View", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xfc) {
      return new Ok(
        new Item(
          tag,
          "Resonance Frequency",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "CC Offcenter", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd5) {
      return new Ok(
        new Item(tag, "Slice Thickness", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xda) {
      return new Ok(
        new Item(tag, "Turbo Factor", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "AP Angulation", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf8) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcf) {
      return new Ok(
        new Item(tag, "Number of Echoes", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Repetition Time SE", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf9) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Slice Factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xfb) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "FFE Flip Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Echo Times", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Slice Orientation", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc4) {
      return new Ok(
        new Item(tag, "Field of View", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "AP Offcenter", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Dynamic Study", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Heartbeat Interval", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc0) {
      return new Ok(
        new Item(
          tag,
          "Trigger Delay Times",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8a) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Patient Orientation",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Number of Samples", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "LR Offcenter", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xdb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "LR Angulation", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Scan Date", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf6) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf7) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Stack Type", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "Number of Phases", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x99) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa4) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8b) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe3) {
      return new Ok(
        new Item(
          tag,
          "Phase Contrast Velocity",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Dynamic Scan Time Begin",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "Gate Delay", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xcd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Resolution",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8e) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd0) {
      return new Ok(
        new Item(tag, "Scan Resolution", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Phase Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Slice Gap", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Trigger Delay Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "Chemical Shift", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc9) {
      return new Ok(
        new Item(
          tag,
          "Foldover Direction Transverse",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Number of Rows", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8d) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Number of Scans", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xb5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_2),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ACRQA_2.0 BLOCK3") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "CR DRE", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CR DRN", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "CR ORE", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "CR ORN", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "CR ORD", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "CR Cassette Size", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "CR Machine ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "CR Machine Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "CR Technician Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "CR Energy Subtraction Parameters",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0xf0) {
      return new Ok(
        new Item(tag, "CR Distribution Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0xff) {
      return new Ok(
        new Item(
          tag,
          "CR Shutters Applied",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 113") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Kodak Image Information") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Viewing Protocol") {
    if (g0 === 0x0 && g1 === 0x65 && e1 === 0x93) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ADAC_IMG") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Ver200 ADAC Pegasys File Size",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "ADAC Header Signature", toList([new LongString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Number of ADAC Headers",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "ADAC Header/Image Sizes",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "ADAC Pegasys Headers",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Ver200 Number of ADAC Headers",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Ver200 ADAC Header/Image Size",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Ver200 ADAC Pegasys Headers",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x70 && g1 === 0x43 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Cardiac Stress State", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x43 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Philips NM Private Group",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 039") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xa) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xb) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xd && e1 === 0xd) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips RAD Imaging DD 001") {
    if (g0 === 0x20 && g1 === 0xb && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new PersonName()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new DateTime()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x2b) {
      return new Ok(new Item(tag, "Unknown", toList([new Date()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x2c) {
      return new Ok(new Item(tag, "Unknown", toList([new Time()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x2d) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x3b) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x47) {
      return new Ok(new Item(tag, "Unknown", toList([new Date()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x48) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x4c) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x4d) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x4f) {
      return new Ok(new Item(tag, "Unknown", toList([new DateTime()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0xb && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "KINETDX") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR/PART 7") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "1.2.840.113681") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "CR Image Params Common", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "CR Image IP Params Single",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "CR Image IP Params Left",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "CR Image IP Params Right",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_CTHD_01") {
    if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_0039") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips MR Imaging DD 001") {
    if (g0 === 0x20 && g1 === 0x5 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Number of Chemical Shift",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xc0) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x81) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x69) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa7) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x38) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "Diffusion Direction RL",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1d) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1f) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x53) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x7e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Synergy Reconstruction Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x61) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2e) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x9f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x58) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4d) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x57) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x83) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x25) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x84) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xb1) {
      return new Ok(
        new Item(
          tag,
          "Diffusion Direction AP",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x19) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x66) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x29) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x23) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6e) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x36) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x7b) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x32) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x70) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x68) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1b) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x9e) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xb2) {
      return new Ok(
        new Item(
          tag,
          "Diffusion Direction FH",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5d) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3b) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x13) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x85) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x26) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa2) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Duration",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x17) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3a) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new SignedLong()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x34) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x86) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Repetition Time",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x37) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Window Width", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5e) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x80) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x56) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa9) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3d) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x63) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2b) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x59) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Window Center", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x5c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x35) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Syncra Scan Type", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "1.2.840.113708.794.1.1.2.0") {
    if (g0 === 0x0 && g1 === 0x87 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Media Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x87 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Media Location", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x87 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Storage File ID", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x87 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Study or Image Size in MB",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x87 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Estimated Retrieve Time",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI Annotations_01") {
    if (g0 === 0x31 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Sequence (RET)",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MEDCOM HEADER") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "MedCom Header Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "MedCom Header Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "MedCom Header Info",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "MedCom History Information",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "PMTF Information 1", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "PMTF Information 2", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "PMTF Information 3", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "PMTF Information 4", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "PMTF Information 5", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Application Header Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Application Header Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Application Header ID", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Application Header Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Application Header Info",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "Workflow Control Flags",
          toList([new LongString()]),
          new ValueMultiplicity(8, new Some(8)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Arch. Management Flag Keep Online",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Arch. Mgmnt Flag Do Not Archive",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Image Location Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Estimated Retrieve Time",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x55) {
      return new Ok(
        new Item(
          tag,
          "Data Size of Retrieved Images",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Siemens Link Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Referenced Tag", toList([new AttributeTag()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Referenced Tag Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "Referenced Value Length",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Referenced Object Device Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "Referenced Object Device Location",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x76) {
      return new Ok(
        new Item(
          tag,
          "Referenced Object ID",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA_MEC_1.0") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x7f && g1 === 0xf1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS ICC MATRIX") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Image Center in Image Coordinates",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_ICS Release 1;2") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa0) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa2) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa3) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa5) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa6) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd9) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PAPYRUS") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Original File Name", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Original File Location", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Data Set Identifier", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Papyrus Comments", toList([new LongText()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Folder Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Patient Folder Data Set ID",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Folder Name", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x30) {
      return new Ok(new Item(tag, "Creation Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x32) {
      return new Ok(new Item(tag, "Creation Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x34) {
      return new Ok(new Item(tag, "Modified Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x36) {
      return new Ok(new Item(tag, "Modified Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Owner Name", toList([new LongText()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Folder Status", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Number of Images", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Number of Other", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "External Folder Element DSID",
          toList([new LongText()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "External Folder Element Data Set Type",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "External Folder Element File Location",
          toList([new LongText()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xa3) {
      return new Ok(
        new Item(
          tag,
          "External Folder Element Length",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "Internal Folder Element DSID",
          toList([new LongText()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xb1) {
      return new Ok(
        new Item(
          tag,
          "Internal Folder Element Data Set Type",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xb2) {
      return new Ok(
        new Item(
          tag,
          "Internal Offset To Data Set",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x41 && e1 === 0xb3) {
      return new Ok(
        new Item(
          tag,
          "Internal Offset To Image",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_GNHD_01") {
    if (g0 === 0x0 && g1 === 0x33 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x33 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PMTF INFORMATION DATA") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "PMTF Information 1", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "PMTF Information 2", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "PMTF Information 3", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "PMTF Information 4", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x89) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x70 && g1 === 0x15 && e1 === 0x73) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI Sequence Annotations_01") {
    if (g0 === 0x31 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Sequence (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation UID (RET)",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Color (RET)",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "FontSize", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Line Style (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Elements (RET)",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Label (RET)",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Creator (RET)",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Modifiers (RET)",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Creation Date (RET)",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Creation Time (RET)",
          toList([new Time()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xc0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Modification Dates (RET)",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xd0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Modification Times (RET)",
          toList([new Time()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xe0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Frame Number (RET)",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips US Imaging DD 043") {
    if (g0 === 0x20 && g1 === 0xd && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips MR Imaging DD 005") {
    if (g0 === 0x20 && g1 === 0x5 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x38) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2a) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xb) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4d) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2f) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x19) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_3));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x16) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x6) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3f) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x32) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1a) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2d) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_3));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3b) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x26) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3a) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x45) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x14) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x39) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1e) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x37) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x15) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2c) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x2b) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4e) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x3c) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x35) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "LODOX_STATSCAN") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MEDIFACE") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x21) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x22) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x31) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x41) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x42) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x51) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x52) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xf1) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xf2) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Window Center", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Window Width", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_STDY_01") {
    if (g0 === 0x0 && g1 === 0x23 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Number of series in Study",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Number of unarchived Series",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Reference image field",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Summary image", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Start time(secs) in first axial",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "No. of updates to header",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x7d) {
      return new Ok(
        new Item(
          tag,
          "Indicates study has complete info (DICOM/genesis)",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ObjectModel (ID, Version, Place, PlaceDescription)") {
    if (g0 === 0x81 && g1 === 0x1 && e1 === 0x0) {
      return new Ok(new Item(tag, "ID", toList([new LongString()]), vm_1));
    } else if (g0 === 0x81 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(new Item(tag, "Version", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Siemens: Thorax/Multix FD Lab Settings") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Internal Value", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Total Area Dose Product",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Cassette Image", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "Table Object Distance",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Table Detector Distance",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Ortho Step Distance",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Auto Window Flag", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Auto Window Center", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Auto Window Width", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Filter ID", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Anatomic Correct View",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Auto Window Shift", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Auto Window Expansion",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "System Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Anatomic Sort Number", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Acquisition Sort Number",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/RadWorks/Version 6.0/Summary") {
    if (g0 === 0x31 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Receive Origin Description",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Receive Origin Description",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS CBT ROTATION DIRECTION") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Gantry Rotation Direction",
          toList([new CodeString()]),
          vm_1_to_n,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P Release 2;1") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x18) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Image (ID, Version, Size, Dump, GUID)") {
    if (g0 === 0x80 && g1 === 0x3 && e1 === 0x0) {
      return new Ok(new Item(tag, "ID", toList([new LongString()]), vm_1));
    } else if (g0 === 0x80 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(new Item(tag, "Version", toList([new LongString()]), vm_1));
    } else if (g0 === 0x80 && g1 === 0x3 && e1 === 0x20) {
      return new Ok(new Item(tag, "Size", toList([new UnsignedLong()]), vm_1));
    } else if (g0 === 0x80 && g1 === 0x3 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Dump", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x80 && g1 === 0x3 && e1 === 0x40) {
      return new Ok(new Item(tag, "GUID", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "DLX_LKUP_01") {
    if (g0 === 0x60 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Gray Palette color lookup table descriptor",
          toList([new LongText()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x60 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Gray Palette color lookup table data",
          toList([new LongText()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SHS MagicView 300") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Zoom Factor",
          toList([new FloatingPointDouble()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Pan Factor X", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Pan Factor Y", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "NmPalette", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-XSB-DCI Release 1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Video Beam Boost", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Channel Generating Video Sync",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Video Gain", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Video Offset", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "RTD Data Compression Factor",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "2.16.840.1.114059.1.1.6.1.50.1") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Description", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Orientation", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Parameter 1", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Parameter 2", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x24) {
      return new Ok(new Item(tag, "Teeth", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x25) {
      return new Ok(new Item(tag, "Jaw", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x26) {
      return new Ok(new Item(tag, "Quadrant", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x27) {
      return new Ok(new Item(tag, "CRC", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Sound Technologies") {
    if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Patient Species", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Patient Breed", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Patient Category Size", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Patient Sex Extended (including spay/neuter)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Image View", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Anatomy Imaged", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Image enhancements", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Detector Settings", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Application Version", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Image Laterality Extended",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Client Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Reference Study Instance Uid",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "Reference Series Instance Uid",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "Exam Ref Id", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "Physician Of Record Address",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0xf) {
      return new Ok(
        new Item(
          tag,
          "Physician Of Record Phone Numbers",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Reason For Study", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x11) {
      return new Ok(new Item(tag, "Protocol", toList([new LongString()]), vm_1));
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "CaptureInputType", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Exam Complaint", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Exam Web Code", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Exam Category", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Exam Diagnosis", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Exam Created By", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Exam Created By Group", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Exam Required By DateTime",
          toList([new DateTime()]),
          vm_1,
        ),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x1a) {
      return new Ok(
        new Item(tag, "Capture Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Telemed Exam ID", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Exam Created By Guid", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0xf0 && g1 === 0x1 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Client Name Guid", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED OCS REFERENCE IMAGE") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Reference Image", toList([new UniqueIdentifier()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private-DiDi Release 1") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Post Mode String", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x1) {
      return new Ok(new Item(tag, "Post Data", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Header", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(new Item(tag, "SCPreName", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "SCPostNo", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "SCSOPInstanceUID", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "SCCreationDate", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "SCProcessingCategory", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "SCPostMethod", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "SCPostString", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "SCPostString2", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(new Item(tag, "SCMode", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "SCStCommit", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "SCExported", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "SCPrinted", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2c) {
      return new Ok(new Item(tag, "SCOperator", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(new Item(tag, "SCPreName", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "SCPreType", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS SMS-AX  QUANT 1.0") {
    if (g0 === 0x0 && g1 === 0x23 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Horizontal Calibration Pixel Size",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Vertical Calibration Pixel Size",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Calibration Object", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Calibration Object Size",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Calibration Method", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x5) {
      return new Ok(new Item(tag, "Filename", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Frame Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "Calibration Factor Multiplicity",
          toList([new IntegerString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x23 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Calibration TOD Value",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "INFINITT_FMX") {
    if (g0 === 0x0 && g1 === 0x15 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x15 && e1 === 0x11) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI ImageTransform_01") {
    if (g0 === 0x31 && g1 === 0x7 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "AMI Transformation Matrix (RET)",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x7 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "AMI Center Offset (RET)",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x7 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "AMI Magnification (RET)",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x7 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "AMI Magnification Type (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x7 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "AMI Displayed Area (RET)",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x7 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "AMI Calibration Factor (RET)",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_CT_VES_01") {
    if (g0 === 0x0 && g1 === 0x51 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "CTVESSequence", toList([new Sequence()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SEGAMI__MEMO") {
    if (g0 === 0x0 && g1 === 0x35 && e1 === 0x97) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x35 && e1 === 0x98) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "ATL HDI V1.0") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x50) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x60) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x70) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x80) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x90) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x91) {
      return new Ok(new Item(tag, "Private", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x30) {
      return new Ok(new Item(tag, "Loop Mode", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Trigger mode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Number of Loops", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Loop Indexes", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Loop Heart Rates", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x35) {
      return new Ok(new Item(tag, "Medications", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS CT VA0  GEN") {
    if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Image Filter Label", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Algorithm Set",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Tube Position", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x4a) {
      return new Ok(
        new Item(tag, "VOI Stop Slice", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Vector Row Step", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "VOI Start Slice", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "VOI Start Row", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Vector Start Row", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa5) {
      return new Ok(
        new Item(
          tag,
          "Reference Data Set 1",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "Light Brightness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Number of Virtual Channels",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Start Angle", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "IRS Data Number",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Correction Factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Length of Topogram", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Rotation Angle", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "Regeneration Software Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Range Type Code", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa7) {
      return new Ok(
        new Item(tag, "Window Program Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Exemplary Element 3", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Master Control Mask", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x20) {
      return new Ok(new Item(tag, "Scan", toList([new IntegerString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa3) {
      return new Ok(
        new Item(
          tag,
          "Exemplary Element 2",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Vector Column Step", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "VOI Stop Column", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Object Orientation",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7a) {
      return new Ok(
        new Item(
          tag,
          "Overlay Threshold",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Source Side Collimator Aperture",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Generator Voltage current",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Field of Interest",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Detector Side Collimator Aperture",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "Number of Bytes", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x52) {
      return new Ok(
        new Item(
          tag,
          "Vector Start Column",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "VOI Start Column", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Multiscan Reconstruction Width",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Reading Code", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Exemplary Element 1", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x62) {
      return new Ok(
        new Item(
          tag,
          "Reference Type Code",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7b) {
      return new Ok(
        new Item(
          tag,
          "Surface Threshold",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0xa6) {
      return new Ok(
        new Item(
          tag,
          "Reference Data Set 2",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Number of Projections",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x72) {
      return new Ok(
        new Item(
          tag,
          "Light Orientation",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Number of Reading", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x7c) {
      return new Ok(
        new Item(
          tag,
          "Grey Scale Threshold",
          toList([new IntegerString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "VOI Stop Row", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Exposure Time current",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(
          tag,
          "Generator Power current",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x45) {
      return new Ok(
        new Item(
          tag,
          "IRS Data Length",
          toList([new UnsignedLong()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Processing Mask",
          toList([new UnsignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Maximum Table Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Light Contrast", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x21 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Table Move Direction Code",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Range Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "Exposure current", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Algorithm Index",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x84) {
      return new Ok(
        new Item(
          tag,
          "Multiscan Reconstruction Increment",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "MERGE TECHNOLOGIES, INC.") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new OtherByteString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS Selma") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_RTEN_01") {
    if (g0 === 0x2 && g1 === 0x49 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Operator Name", toList([new PersonName()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "Block Shape", toList([new DecimalString()]), vm_2_to_n),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xb6) {
      return new Ok(
        new Item(
          tag,
          "Leaf Positions",
          toList([new DecimalString()]),
          vm_2_to_n,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Z Plus Thickness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xa4) {
      return new Ok(
        new Item(tag, "Gantry Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Block Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Particle Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Plan Image Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xa6) {
      return new Ok(
        new Item(tag, "Collimator Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Beam Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Cutout Shape", toList([new DecimalString()]), vm_2_to_n),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Slab Shape", toList([new DecimalString()]), vm_3_to_n),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Collimator Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xa9) {
      return new Ok(
        new Item(
          tag,
          "Source-Surface Distance",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Cutout Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x68) {
      return new Ok(
        new Item(
          tag,
          "Nominal Particle Energy",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Build Resolution", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x51) {
      return new Ok(
        new Item(tag, "Group Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Exam/Series/Image Identifier",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "Z Minus Thickness", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xac) {
      return new Ok(
        new Item(
          tag,
          "Y Symmetric Opening",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Slab Image Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Marker Position", toList([new DecimalString()]), vm_3),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "Structure Color", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Marker Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xa8) {
      return new Ok(
        new Item(tag, "Isocenter Position", toList([new DecimalString()]), vm_3),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Structure Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Marker Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Plan Creation Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "Beam Group Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Plan Creation Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Block Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Structure Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Collimator Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x54) {
      return new Ok(
        new Item(tag, "Beam Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xae) {
      return new Ok(
        new Item(
          tag,
          "X Positive Jaw Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Dynamic Segment Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Structure Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Plan Comment", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Slab Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xb4) {
      return new Ok(
        new Item(
          tag,
          "Y Negative Jaw Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xb2) {
      return new Ok(
        new Item(
          tag,
          "Y Positive Jaw Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Cutout Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Machine Reference Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Machine Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xd0) {
      return new Ok(
        new Item(tag, "Treatment Position", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "Table Angle", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Additional Image Identifier",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "X Negative Jaw Position",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0xaa) {
      return new Ok(
        new Item(
          tag,
          "X Symmetric Opening",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Marker Color", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x2 && g1 === 0x49 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Group Properties", toList([new CodeString()]), vm_1_to_n),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA COMAPL HEADER") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "COMAPL Header Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "COMAPL Header Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "COMAPL History Information",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1_to_n));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(new Item(tag, "", toList([new UnsignedLong()]), vm_1_to_n));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(new Item(tag, "", toList([new UnsignedLong()]), vm_1_to_n));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(new Item(tag, "", toList([new CodeString()]), vm_1_to_n));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SPI-P-Private_ICS Release 1;4") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0xdc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9c) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb5) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xbc) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd7) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb6) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb2) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xbd) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xbe) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd8) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd6) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb3) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x90) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedLong()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9a) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xb1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xe0) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xda) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xd9) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_2),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0xdd) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointDouble()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GE ??? From Adantage Review CS") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "CR EDR Mode", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "CR Latitude", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x50) {
      return new Ok(
        new Item(tag, "CR Group Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "CR Image Serial Number",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "CR Bar Code Number", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "CR Film Output Exposures",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ADWSoft_DPO1") {
    if (g0 === 0x0 && g1 === 0x39 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Private Entity Number",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x85) {
      return new Ok(
        new Item(tag, "Private Entity Date", toList([new Date()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Private Entity Time", toList([new Time()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0x95) {
      return new Ok(
        new Item(
          tag,
          "Private Entity Launch Command",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x39 && e1 === 0xaa) {
      return new Ok(
        new Item(tag, "Private Entity Type", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Siemens Ultrasound Miscellaneous") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PHILIPS MR/PART 12") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_3DSTATE_001") {
    if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd6) {
      return new Ok(
        new Item(tag, "General Description", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd7) {
      return new Ok(new Item(tag, "TDRT", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd8) {
      return new Ok(new Item(tag, "NVRP", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xd9) {
      return new Ok(new Item(tag, "CVRPN", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xda) {
      return new Ok(
        new Item(
          tag,
          "Volume Rendering Presets Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xdb) {
      return new Ok(
        new Item(tag, "Preset Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xdc) {
      return new Ok(
        new Item(tag, "Opacity Curve X", toList([new SignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xdd) {
      return new Ok(
        new Item(
          tag,
          "Opacity Curve Y",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xde) {
      return new Ok(new Item(tag, "NOCP", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xdf) {
      return new Ok(
        new Item(tag, "Color Curve X", toList([new SignedShort()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe1) {
      return new Ok(new Item(tag, "NCCP", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe2) {
      return new Ok(new Item(tag, "GSA", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe3) {
      return new Ok(new Item(tag, "VRSF", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe4) {
      return new Ok(
        new Item(tag, "AF", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe5) {
      return new Ok(
        new Item(tag, "DF", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe6) {
      return new Ok(
        new Item(tag, "SCF", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe7) {
      return new Ok(
        new Item(tag, "SPF", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe8) {
      return new Ok(
        new Item(
          tag,
          "Orthogonal Clipping Planes",
          toList([new FloatingPointSingle()]),
          new ValueMultiplicity(24, new Some(24)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xe9) {
      return new Ok(
        new Item(tag, "CP", toList([new FloatingPointSingle()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xea) {
      return new Ok(new Item(tag, "CFP", toList([new DecimalString()]), vm_3));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xeb) {
      return new Ok(new Item(tag, "CVU", toList([new DecimalString()]), vm_3));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xec) {
      return new Ok(
        new Item(tag, "RFOV", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xed) {
      return new Ok(new Item(tag, "PPRP", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xee) {
      return new Ok(new Item(tag, "3DWW", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xef) {
      return new Ok(new Item(tag, "3DWL", toList([new DecimalString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf0) {
      return new Ok(new Item(tag, "BBV", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf1) {
      return new Ok(new Item(tag, "ERF", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf2) {
      return new Ok(new Item(tag, "TDRMS", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x47 && e1 === 0xf3) {
      return new Ok(
        new Item(tag, "TDSSS", toList([new FloatingPointSingle()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "TOSHIBA MDW HEADER") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Application Header Type",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Application Header Version",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Header Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Image Header Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Image Header Info",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Series Header Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Series Header Version", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Series Header Info",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "PMTF Information 1", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "PMTF Information 2", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x33) {
      return new Ok(
        new Item(tag, "PMTF Information 3", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "PMTF Information 4", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/Centricity Radiology Web/Version 2.0") {
    if (g0 === 0x41 && g1 === 0x11 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Secondary Spine Label", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x41 && g1 === 0x11 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Additional tags for Presentation State",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS MED SMS USG ANTARES") {
    if (g0 === 0x0 && g1 === 0x19 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Color Flow Smooth Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "M-Mode Dynamic Range", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2d) {
      return new Ok(
        new Item(tag, "B-Mode Tint Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "M-Mode Tint Type", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x66) {
      return new Ok(
        new Item(tag, "Doppler Submode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6a) {
      return new Ok(
        new Item(
          tag,
          "Doppler Trace Inverted",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "B-Mode Tint Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3a) {
      return new Ok(new Item(tag, "Image Flag", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "M-Mode Map Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Doppler Wall Filter", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x44) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Res/Speed Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3) {
      return new Ok(new Item(tag, "Frame Rate", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x28) {
      return new Ok(new Item(tag, "???", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x65) {
      return new Ok(
        new Item(tag, "Doppler Map Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "M-Mode Edge Enhance Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xa0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Color Flow Overall Gain", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x49) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Priority Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Color Flow state", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Private Creator Version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xc) {
      return new Ok(
        new Item(tag, "Burned in Graphics", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "Color Flow Map Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "B-Mode Res/Speed Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "B-Mode Map Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x24) {
      return new Ok(
        new Item(
          tag,
          "B-Mode Edge Enhance Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Persistence Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x29) {
      return new Ok(new Item(tag, "???", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "SieClear Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x27) {
      return new Ok(new Item(tag, "???", toList([new UnsignedShort()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x54) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Maximum Velocity",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Color Flow Wall Filter Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "ClarifyVE Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Doppler Overall Gain", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x69) {
      return new Ok(
        new Item(
          tag,
          "Doppler Time/Freq Res Index",
          toList([new Unknown()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "B-Mode Overall Gain", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "Doppler Tint Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "M-Mode Submode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x3b) {
      return new Ok(new Item(tag, "Unknown", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "B-Mode Submode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "B-Mode Persistence Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "Color Flow Submode", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "M-Mode Tint Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Doppler Dynamic Range", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "B-Mode Dynamic Range", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "M-Mode Overall Gain", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Doppler Tint Index", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Doppler Gate Size", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x19 && e1 === 0x67) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedShort()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_GDXE_FALCON_04") {
    if (g0 === 0x0 && g1 === 0x11 && e1 === 0x42) {
      return new Ok(new Item(tag, "View IP", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "Unknown", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x30) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Patient Size String", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x27) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x43) {
      return new Ok(
        new Item(
          tag,
          "Key-stone Co-ordinates",
          toList([new IntegerString()]),
          new ValueMultiplicity(24, new Some(24)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Processing Debug Info", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "Receptor Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Sub-image Collimator Vertices",
          toList([new IntegerString()]),
          new ValueMultiplicity(24, new Some(24)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Study DAP", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Image Dose", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Total Exposures", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Override mode", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Detector ARC Gain", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Detected Exposure Index",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x34) {
      return new Ok(
        new Item(
          tag,
          "Compensated Detector Exposure",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Acquisition Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Processed Series UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x36) {
      return new Ok(
        new Item(
          tag,
          "Median Anatomy Count Value",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Non-Digital Exposures", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "Shift Vector for Pasting",
          toList([new SignedLong()]),
          vm_6,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x37) {
      return new Ok(
        new Item(
          tag,
          "DEI lower and upper limit values",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Adjusted Field of View",
          toList([new IntegerString()]),
          new ValueMultiplicity(8, new Some(8)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x28) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x29) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Detected Field of View",
          toList([new IntegerString()]),
          new ValueMultiplicity(8, new Some(8)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Uncompensated Detector Exposure",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Film Speed Selection",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "Acquisition UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Study Dose", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x39) {
      return new Ok(
        new Item(
          tag,
          "Image Number in Pasting",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "SPS UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x11) {
      return new Ok(new Item(tag, "ROI", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x11 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "Pasting Overlap", toList([new SignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_CT_CARDIAC_001") {
    if (g0 === 0x0 && g1 === 0x49 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "CT Cardiac Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "HeartRateAtConfirm", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "AvgHeartRatePriorToConfirm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x4) {
      return new Ok(
        new Item(
          tag,
          "MinHeartRatePriorToConfirm",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "MaxHeartRatePriorToConfirm",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x6) {
      return new Ok(
        new Item(
          tag,
          "StdDevHeartRatePriorToConfirm",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x7) {
      return new Ok(
        new Item(
          tag,
          "NumHeartRateSamplesPriorToConfirm",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "AutoHeartRateDetectPredict",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "SystemOptimizedHeartRate",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "EkgMonitorType", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "NumReconSectors", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x49 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "RpeakTimeStamps",
          toList([new FloatingPointSingle()]),
          new ValueMultiplicity(256, new Some(256)),
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SECTRA_OverlayInfo_01") {
    if (g0 === 0x60 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "Sectra Overlay", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "CAMTRONICS") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Commentline", toList([new LongText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Coefficient",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x50) {
      return new Ok(new Item(tag, "Scene Text", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x60) {
      return new Ok(new Item(tag, "Image Text", toList([new LongText()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "Pixel Shift Horizontal",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Pixel Shift Vertical",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x29 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips Imaging DD 001") {
    if (g0 === 0x20 && g1 === 0x1 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "Number of Stacks", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Text Type", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x22) {
      return new Ok(
        new Item(
          tag,
          "Water Fat Shift",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Text Style", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Stack Radial Axis",
          toList([new CodeString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Number of Chemical Shifts",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xe) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xf2) {
      return new Ok(
        new Item(
          tag,
          "Retrospective Motion Correction",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x6b) {
      return new Ok(
        new Item(
          tag,
          "Has Edge Enhancement Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "PC Velocity",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x4b) {
      return new Ok(
        new Item(
          tag,
          "Poly Line Interpolation Method",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "EPI Factor", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Log Subtraction Gain Step",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x74) {
      return new Ok(
        new Item(
          tag,
          "Window Center Sub",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x5f) {
      return new Ok(
        new Item(tag, "Stack Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Is Raw Image", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x9b) {
      return new Ok(
        new Item(tag, "Graphic Number", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Image Enhanced", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x7e) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Gain Taste",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa4) {
      return new Ok(
        new Item(
          tag,
          "Text Color Background",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x6a) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "Presentation State Subtraction Active",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x9f) {
      return new Ok(
        new Item(
          tag,
          "Spectral Selective Excitation Pulse",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x5a) {
      return new Ok(
        new Item(
          tag,
          "Graphic Annotation Model",
          toList([new ShortText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x29) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Gain Factor Non Sub",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "Window Smoothing Taste",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Number of Echoes", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x68) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x21) {
      return new Ok(new Item(tag, "SPIR", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x7f) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Gain Taste Sub",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Processing Order Specialization",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2c) {
      return new Ok(
        new Item(
          tag,
          "Harmonization Factor",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x48) {
      return new Ok(
        new Item(
          tag,
          "Graphic Annotation ID",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "Interactive", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1e) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "Transmitting Coil", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Diffusion Direction", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x82) {
      return new Ok(
        new Item(tag, "Echo Train Length", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Series Type", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1f) {
      return new Ok(
        new Item(tag, "Respiration Sync", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x8b) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x47) {
      return new Ok(
        new Item(
          tag,
          "Graphic Line Width",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Magnetic Field Strength",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "Stack Type", toList([new CodeString()]), vm_1_to_n),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x67) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa3) {
      return new Ok(
        new Item(
          tag,
          "Text Color Foreground",
          toList([new UnsignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xf) {
      return new Ok(new Item(tag, "Unknown", toList([new SignedShort()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x65) {
      return new Ok(new Item(tag, "Unknown", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2a) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Taste Adapt Sub",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xc1) {
      return new Ok(
        new Item(
          tag,
          "Nested Object Type Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2b) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Taste Non Sub",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "Text Anchor Point Alignment",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xb) {
      return new Ok(
        new Item(tag, "Slice Orientation", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "Graphic Line Style", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "Mixing Operation Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xcc) {
      return new Ok(new Item(tag, "Unknown", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Edge Enhancement Gain Factor Sub",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Number of Phases MR", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x69) {
      return new Ok(
        new Item(
          tag,
          "Display Shutter Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x4d) {
      return new Ok(
        new Item(
          tag,
          "Poly Line End Point Style",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x88) {
      return new Ok(
        new Item(tag, "Number of Averages", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1d) {
      return new Ok(
        new Item(
          tag,
          "Reconstruction Number MR",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Inversion Time", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Number of PC Directions",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "Flip Angle Philips", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x75) {
      return new Ok(
        new Item(
          tag,
          "Window Width Sub",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x42) {
      return new Ok(
        new Item(
          tag,
          "Subtraction Land Marking Active",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Harmonisation Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x53) {
      return new Ok(
        new Item(tag, "Window Invert", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "Imaged Nucleus", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2d) {
      return new Ok(
        new Item(
          tag,
          "Number of Stack Slices",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x7b) {
      return new Ok(
        new Item(tag, "Acquisition Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xf1) {
      return new Ok(
        new Item(
          tag,
          "Prospective Motion Correction",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x5d) {
      return new Ok(
        new Item(tag, "Measurement Text Units", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Chemical Shift Number MR",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Scan Duration",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x89) {
      return new Ok(
        new Item(tag, "Phase FOV Percent", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x56) {
      return new Ok(
        new Item(
          tag,
          "Graphic Type (Private)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Number of Dynamic Scans",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x6f) {
      return new Ok(
        new Item(tag, "Mixing Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x55) {
      return new Ok(
        new Item(tag, "Graphic Line Color", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa5) {
      return new Ok(
        new Item(tag, "Text Color Shadow", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "Prepulse Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Phase Number", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Partial Matrix Scanned",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Mixing Mask Operation", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Number of Locations", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1b) {
      return new Ok(
        new Item(
          tag,
          "Prepulse Delay",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "Text Font", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xc) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa) {
      return new Ok(
        new Item(tag, "Slice Number MR", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x35) {
      return new Ok(
        new Item(
          tag,
          "Stack Slice Number",
          toList([new SignedShort()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Diffusion Echo Time",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x9f) {
      return new Ok(
        new Item(
          tag,
          "Pixel Processing Kernel Size",
          toList([new UnsignedShort()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Dynamic Series", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x71) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x50) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Diffusion", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x52) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x4f) {
      return new Ok(
        new Item(
          tag,
          "Harmonization Offset",
          toList([new FloatingPointDouble()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x9a) {
      return new Ok(
        new Item(tag, "Graphic Number Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x62) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x7a) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "LOG Subtraction Curve Taste",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x2f) {
      return new Ok(
        new Item(
          tag,
          "Harmonization Gain",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x83) {
      return new Ok(
        new Item(tag, "Imaging Frequency", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "Repetition Time",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x86) {
      return new Ok(
        new Item(tag, "Unknown", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x9) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x77) {
      return new Ok(
        new Item(tag, "GL TrafoType", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xda) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3a) {
      return new Ok(
        new Item(tag, "Pixel Shift", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x5e) {
      return new Ok(
        new Item(tag, "Measurement Text Type", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x73) {
      return new Ok(
        new Item(
          tag,
          "Referenced Mask Image Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Mixing NR of Mask Image Numbers",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x4c) {
      return new Ok(
        new Item(
          tag,
          "Poly Line Begin Point Style",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "Sampling Percent", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x32) {
      return new Ok(
        new Item(
          tag,
          "Stack Radial Angle",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Echo Time Display MR", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x9c) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3f) {
      return new Ok(
        new Item(tag, "Interpolation Method", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Chemical Shift",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x97) {
      return new Ok(new Item(tag, "Nucleus", toList([new ShortString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Examination Source", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Diffusion B-Factor",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x9d) {
      return new Ok(
        new Item(tag, "PIIM Subtraction Type", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "Unknown", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "Data Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Cardiac Sync", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x5 && e1 === 0xa1) {
      return new Ok(
        new Item(tag, "Syncra Scan Type", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x61) {
      return new Ok(new Item(tag, "Unknown", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Scanning Technique Description MR",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Number of Slices MR", toList([new SignedLong()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Image Type ED ES", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x3d) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UnsignedLong()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Philips EV Imaging DD 022") {
    if (g0 === 0x20 && g1 === 0x7 && e1 === 0x0) {
      return new Ok(new Item(tag, "", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "Volume Sequence Capture", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0x17) {
      return new Ok(
        new Item(tag, "Original SOP Instance", toList([new Unknown()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0x33) {
      return new Ok(new Item(tag, "", toList([new LongString()]), vm_1));
    } else if (g0 === 0x20 && g1 === 0x7 && e1 === 0x34) {
      return new Ok(new Item(tag, "", toList([new CodeString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Silhouette Graphics Export V1.0") {
    if (g0 === 0x0 && g1 === 0x29 && e1 === 0x0) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "BioPri") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x0) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Unknown", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x7) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x9) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS DICOM") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(new Item(tag, "Unknown", toList([new Unknown()]), vm_1));
    } else if (g0 === 0x0 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Applicare/RadWorks/Version 5.0") {
    if (g0 === 0x31 && g1 === 0x9 && e1 === 0x27) {
      return new Ok(new Item(tag, "<internal", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x9) {
      return new Ok(new Item(tag, "Folder", toList([new LongString()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x8) {
      return new Ok(
        new Item(tag, "Receive Origin", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x2c) {
      return new Ok(
        new Item(tag, "Archive Flag", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "<internal", toList([new ApplicationEntity()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x24) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0xa) {
      return new Ok(new Item(tag, "Receive Date", toList([new Date()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x41) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x21) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0xef) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x13) {
      return new Ok(new Item(tag, "<internal", toList([new Date()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(new Item(tag, "<internal", toList([new ShortText()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0xe) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x2a) {
      return new Ok(
        new Item(tag, "Send Flag", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0xc) {
      return new Ok(new Item(tag, "Prior", toList([new CodeString()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x38) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "Archive Status", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x40) {
      return new Ok(
        new Item(tag, "<internal", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x26) {
      return new Ok(
        new Item(tag, "<internal", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0xd) {
      return new Ok(
        new Item(tag, "STAT Study", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "Print Flag", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Request Storage Commitment",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Delete Lock", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x5) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x31) {
      return new Ok(
        new Item(tag, "<internal", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0xb) {
      return new Ok(new Item(tag, "Receive Time", toList([new Time()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x14) {
      return new Ok(new Item(tag, "<internal", toList([new Time()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x23) {
      return new Ok(
        new Item(tag, "<internal", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Requested Compression", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "<internal", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "<internal", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x39) {
      return new Ok(
        new Item(tag, "<internal", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0xee) {
      return new Ok(
        new Item(tag, "<internal", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "NEW/SEEN Status", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x35) {
      return new Ok(new Item(tag, "<internal", toList([new Sequence()]), vm_1));
    } else if (g0 === 0x31 && g1 === 0x9 && e1 === 0x28) {
      return new Ok(
        new Item(tag, "<internal", toList([new LongString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "FFP DATA") {
    if (g0 === 0x0 && g1 === 0x9 && e1 === 0x1) {
      return new Ok(
        new Item(tag, "CR Header Information", toList([new Unknown()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_PARM_01") {
    if (g0 === 0x0 && g1 === 0x43 && e1 === 0x90) {
      return new Ok(
        new Item(tag, "SAR Definition", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Gradient offset in Y", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x60) {
      return new Ok(
        new Item(tag, "BW Image Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Type of receiver used",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x4b) {
      return new Ok(
        new Item(tag, "DAS xm pattern", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Experiment Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x9b) {
      return new Ok(
        new Item(tag, "NPW factor", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x9a) {
      return new Ok(
        new Item(
          tag,
          "Rx Stack Identification",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x29) {
      return new Ok(
        new Item(tag, "Histogram tables", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Paradigm Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x93) {
      return new Ok(
        new Item(tag, "Tracts", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x7e) {
      return new Ok(
        new Item(
          tag,
          "PACC specific information",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x6d) {
      return new Ok(
        new Item(tag, "Area Size", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xa5) {
      return new Ok(
        new Item(
          tag,
          "Duration of the label or control pulse",
          toList([new IntegerString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x88) {
      return new Ok(
        new Item(
          tag,
          "PURE Acquisition Calibration Series UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "Spectroscopy Default Display Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x78) {
      return new Ok(
        new Item(tag, "Application Version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Bitmap of prescan options",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1e) {
      return new Ok(
        new Item(
          tag,
          "Delta Start Time [msec]",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x2d) {
      return new Ok(
        new Item(
          tag,
          "Filter Mode (String slop field 1 in legacy GE MR",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x42) {
      return new Ok(
        new Item(tag, "DAS trigger source", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x68) {
      return new Ok(
        new Item(
          tag,
          "XT Correction Indicator",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x38) {
      return new Ok(
        new Item(
          tag,
          "User data 25...User data 48 {User48=Effective Resolution for spiral}",
          toList([new FloatingPointSingle()]),
          new ValueMultiplicity(24, new Some(24)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x19) {
      return new Ok(
        new Item(
          tag,
          "Number of BBH chains to blend",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x30) {
      return new Ok(
        new Item(tag, "Vas collapse flag", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x65) {
      return new Ok(
        new Item(
          tag,
          "Motion Correction Indicator",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Decon kernel parameters",
          toList([new SignedShort()]),
          vm_5,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x83) {
      return new Ok(
        new Item(
          tag,
          "Asset R Factors",
          toList([new DecimalString()]),
          vm_1_to_2,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Recon Center Coordinates",
          toList([new DecimalString()]),
          vm_2,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x13) {
      return new Ok(
        new Item(tag, "Application Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x7d) {
      return new Ok(
        new Item(
          tag,
          "Recon mode flag word",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x9f) {
      return new Ok(
        new Item(tag, "Research Tag 4", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x33) {
      return new Ok(
        new Item(
          tag,
          "Neg_scanspacing",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x2) {
      return new Ok(
        new Item(tag, "Gradient offset in X", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xa4) {
      return new Ok(
        new Item(
          tag,
          "Detailed text for ASL labeling technique",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa1) {
      return new Ok(
        new Item(
          tag,
          "Registration Parameters",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Debug Data (binary format)",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x75) {
      return new Ok(
        new Item(tag, "#active volumes", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xa) {
      return new Ok(
        new Item(
          tag,
          "Store level of Functional Image",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x89) {
      return new Ok(
        new Item(
          tag,
          "Governing Body, dB/dt, and SAR definition",
          toList([new LongString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x7f) {
      return new Ok(
        new Item(tag, "Reserved", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x98) {
      return new Ok(
        new Item(
          tag,
          "ASSET Acquisition Calibration Series UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x51 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "Store B-Value with Functional Image",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "Slop_int_10...slop_int_17",
          toList([new IntegerString()]),
          new ValueMultiplicity(8, new Some(8)),
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x14) {
      return new Ok(
        new Item(tag, "Application Version", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x93) {
      return new Ok(
        new Item(
          tag,
          "Spectro Quantitation Values",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Referenced Series UID",
          toList([new UniqueIdentifier()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x49) {
      return new Ok(
        new Item(tag, "DAS auto zero", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x67) {
      return new Ok(
        new Item(
          tag,
          "IBO Correction Indicator",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1a) {
      return new Ok(
        new Item(
          tag,
          "Starting channel number",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "Motion Plot", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x70) {
      return new Ok(
        new Item(tag, "Paradigm Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x94) {
      return new Ok(
        new Item(tag, "Report", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x6a) {
      return new Ok(
        new Item(
          tag,
          "AV Correction Indicator",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x48) {
      return new Ok(
        new Item(tag, "DAS reg xm", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x8a) {
      return new Ok(
        new Item(
          tag,
          "Private In-Plane Phase Encoding Direction",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x8b) {
      return new Ok(
        new Item(
          tag,
          "FMRI Binary Data Block",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x4d) {
      return new Ok(
        new Item(
          tag,
          "Start scan to X-ray on delay",
          toList([new FloatingPointSingle()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "Processing parameters",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1d) {
      return new Ok(
        new Item(tag, "Level value", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x7c) {
      return new Ok(
        new Item(
          tag,
          "Delay after slice group",
          toList([new FloatingPointSingle()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x44) {
      return new Ok(
        new Item(tag, "DAS output source", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xa2) {
      return new Ok(
        new Item(tag, "MEG Data", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x21) {
      return new Ok(
        new Item(
          tag,
          "Corrected after glow terms",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x9e) {
      return new Ok(
        new Item(tag, "Research Tag 3", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x6c) {
      return new Ok(
        new Item(tag, "Detector Row", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x64) {
      return new Ok(
        new Item(tag, "Image Filter", toList([new CodeString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x9d) {
      return new Ok(
        new Item(tag, "Research Tag 2", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x8b) {
      return new Ok(
        new Item(tag, "p Threshold", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Prescan Reuse String", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x4e) {
      return new Ok(
        new Item(
          tag,
          "Duration of X-ray on",
          toList([new FloatingPointSingle()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x46) {
      return new Ok(
        new Item(tag, "DAS cal mode", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Motion Parameters",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e0 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Private Element Creator",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xb) {
      return new Ok(
        new Item(
          tag,
          "DB/dt Peak rate of change of gradient field",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x2c) {
      return new Ok(
        new Item(
          tag,
          "Effective echo spacing",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x6b) {
      return new Ok(
        new Item(
          tag,
          "L-MDK Correction Indicator",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x8e) {
      return new Ok(
        new Item(
          tag,
          "Spectro Prescan Values",
          toList([new DecimalString()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1c) {
      return new Ok(
        new Item(tag, "GE image integrity", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x7b) {
      return new Ok(
        new Item(
          tag,
          "Regressor Values",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x87) {
      return new Ok(
        new Item(tag, "Reserved", toList([new UnlimitedText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "BBH coefficients", toList([new DecimalString()]), vm_3),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Contrast", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x84) {
      return new Ok(
        new Item(tag, "Additional Asset Data", toList([new LongString()]), vm_5),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x66) {
      return new Ok(
        new Item(
          tag,
          "Helical Correction Indicator",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1f) {
      return new Ok(
        new Item(
          tag,
          "Max overranges in a view",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xc) {
      return new Ok(
        new Item(
          tag,
          "dB/dt Limits in units of percent",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x69) {
      return new Ok(
        new Item(
          tag,
          "Q-cal Correction Indicator",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x32) {
      return new Ok(
        new Item(tag, "Vas flags", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x94) {
      return new Ok(
        new Item(
          tag,
          "Spectro Ratio Values",
          toList([new DecimalString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x99) {
      return new Ok(
        new Item(tag, "Extended Options", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Total output views", toList([new SignedShort()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xd) {
      return new Ok(
        new Item(
          tag,
          "PSD estimated limit",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x8) {
      return new Ok(
        new Item(
          tag,
          "Respiratory rate, bpm",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x8c) {
      return new Ok(
        new Item(tag, "Voxel Location", toList([new DecimalString()]), vm_6),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x74) {
      return new Ok(
        new Item(tag, "#rest volumes", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Calibration parameters",
          toList([new SignedShort()]),
          vm_3,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x72) {
      return new Ok(
        new Item(tag, "Paradigm UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x5) {
      return new Ok(
        new Item(
          tag,
          "Img is original or unoriginal",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xa3) {
      return new Ok(
        new Item(
          tag,
          "ASL Contrast technique",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Gradient offset in Z", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x36) {
      return new Ok(
        new Item(tag, "User_fill_map_MSW", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x77) {
      return new Ok(
        new Item(tag, "Application Name", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x11) {
      return new Ok(
        new Item(tag, "Total input views", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x61) {
      return new Ok(
        new Item(
          tag,
          "Scanner Study Entity UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x7) {
      return new Ok(
        new Item(tag, "Views per segment", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x62) {
      return new Ok(
        new Item(tag, "Scanner Study ID", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x63) {
      return new Ok(
        new Item(tag, "Raw Data ID", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "Image Error Text", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x92) {
      return new Ok(
        new Item(tag, "ROIs", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x6) {
      return new Ok(
        new Item(tag, "Number of EPI shots", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x81) {
      return new Ok(
        new Item(
          tag,
          "Regressor Values",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x8d) {
      return new Ok(
        new Item(
          tag,
          "SAT Band Locations",
          toList([new DecimalString()]),
          new ValueMultiplicity(7, new None()),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x16) {
      return new Ok(
        new Item(tag, "Number of overranges", toList([new SignedShort()]), vm_5),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x6f) {
      return new Ok(
        new Item(
          tag,
          "Scanner Table Entry (single gradient coil systems only)/Scanner Table Entry + Gradient Coil Selected",
          toList([new DecimalString()]),
          new ValueMultiplicity(3, new Some(4)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x79) {
      return new Ok(
        new Item(tag, "Slices Per Volume", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Avg overranges all views",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x28) {
      return new Ok(
        new Item(
          tag,
          "Unique image iden",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x15) {
      return new Ok(
        new Item(
          tag,
          "Compatibility Version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x1b) {
      return new Ok(
        new Item(tag, "Ppscan parameters", toList([new SignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x9c) {
      return new Ok(
        new Item(tag, "Research Tag 1", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x4a) {
      return new Ok(
        new Item(
          tag,
          "Starting channel of view",
          toList([new SignedShort()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "DICOM Implementation Version",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Within-DICOM-Implementation SOP Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x2e) {
      return new Ok(
        new Item(tag, "String slop field 2", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x26) {
      return new Ok(
        new Item(
          tag,
          "No views ref chans blocked",
          toList([new UnsignedShort()]),
          vm_6,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x43) {
      return new Ok(
        new Item(tag, "DAS fpa gain", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x80) {
      return new Ok(
        new Item(tag, "Coil ID Data", toList([new LongString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x85) {
      return new Ok(
        new Item(
          tag,
          "Debug Data (text format)",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Paradigm UID", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x2b) {
      return new Ok(
        new Item(tag, "Private Scan Options", toList([new SignedShort()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x91) {
      return new Ok(
        new Item(tag, "SAR value", toList([new DecimalString()]), vm_1_to_n),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x9) {
      return new Ok(
        new Item(
          tag,
          "Respiratory trigger point",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xa2) {
      return new Ok(
        new Item(
          tag,
          "Subject Data",
          toList([new FloatingPointSingle()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x86) {
      return new Ok(
        new Item(
          tag,
          "Number of Degrees of Freedom",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x12) {
      return new Ok(
        new Item(tag, "X-ray chain", toList([new SignedShort()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xe) {
      return new Ok(
        new Item(
          tag,
          "PSD estimated limit in tesla per second",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x76) {
      return new Ok(
        new Item(tag, "#dummy scans", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x25) {
      return new Ok(
        new Item(tag, "Reference channels", toList([new SignedShort()]), vm_6),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "Spectroscopy Pixel Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x7a) {
      return new Ok(
        new Item(
          tag,
          "Expected Time Points",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xb0) {
      return new Ok(
        new Item(tag, "DTI Parameters", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "IBH image scale factors",
          toList([new DecimalString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x40) {
      return new Ok(
        new Item(
          tag,
          "Trigger on position",
          toList([new FloatingPointSingle()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x73) {
      return new Ok(
        new Item(tag, "Paradigm Description", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x2a) {
      return new Ok(
        new Item(
          tag,
          "User defined data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x71) {
      return new Ok(
        new Item(tag, "Paradigm Description", toList([new ShortText()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x31) {
      return new Ok(
        new Item(
          tag,
          "Number of Objects Averaged",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x4c) {
      return new Ok(
        new Item(tag, "TGGC trigger mode", toList([new SignedShort()]), vm_4),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x8a) {
      return new Ok(
        new Item(tag, "Z Threshold", toList([new FloatingPointSingle()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x95) {
      return new Ok(
        new Item(tag, "Response Data", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x81) {
      return new Ok(
        new Item(tag, "GE Coil Name", toList([new LongString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x35) {
      return new Ok(
        new Item(tag, "User_usage_tag", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x37) {
      return new Ok(
        new Item(tag, "User_fill_map_LSW", toList([new UnsignedLong()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x97) {
      return new Ok(
        new Item(
          tag,
          "Image Filtering Parameters",
          toList([new LongString()]),
          new ValueMultiplicity(8, new Some(8)),
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x2f) {
      return new Ok(
        new Item(
          tag,
          "Image Type (real, imaginary, phase, magnitude)",
          toList([new SignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x51) {
      return new Ok(
        new Item(
          tag,
          "Number of Slices Per Volume",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Degree of rotation",
          toList([new FloatingPointSingle()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x41) {
      return new Ok(
        new Item(
          tag,
          "Number of Expected Time Points",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0xc0) {
      return new Ok(
        new Item(tag, "Paradigm Info", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x34) {
      return new Ok(
        new Item(tag, "Offset Frequency", toList([new IntegerString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x82) {
      return new Ok(
        new Item(
          tag,
          "System Configuration Information",
          toList([new LongString()]),
          vm_1_to_n,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x45) {
      return new Ok(
        new Item(tag, "DAS ad input", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0xf) {
      return new Ok(
        new Item(tag, "Saravghead", toList([new DecimalString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Window value", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "DICOM Implementation UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x39) {
      return new Ok(
        new Item(
          tag,
          "Slop_int_6... slop_int_9",
          toList([new IntegerString()]),
          vm_4,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x27) {
      return new Ok(
        new Item(tag, "Scan Pitch Ratio", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x20 && g1 === 0x1 && e1 === 0x61) {
      return new Ok(
        new Item(tag, "Experiment Type", toList([new UnsignedShort()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x96) {
      return new Ok(
        new Item(tag, "Content Qualification", toList([new CodeString()]), vm_1),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x47) {
      return new Ok(
        new Item(tag, "DAS cal frequency", toList([new SignedLong()]), vm_4),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x8f) {
      return new Ok(
        new Item(tag, "Spectro Parameters", toList([new DecimalString()]), vm_3),
      );
    } else if (g0 === 0x0 && g1 === 0x43 && e1 === 0x6e) {
      return new Ok(
        new Item(tag, "Auto mA Mode", toList([new ShortString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "PMS-THORA-5.1") {
    if (g0 === 0x0 && g1 === 0x89 && e1 === 0x20) {
      return new Ok(
        new Item(tag, "Stamp Image Sequence", toList([new Sequence()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS_ADWSoft_3D2") {
    if (g0 === 0x0 && g1 === 0x57 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Cardiac Reconstruction Algorithm List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Average Heart Rate for Image List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x3) {
      return new Ok(
        new Item(
          tag,
          "Temporal Resolution List",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x0 && g1 === 0x57 && e1 === 0x4) {
      return new Ok(
        new Item(tag, "Layout View Preset", toList([new LongText()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "GEMS-IT/Centricity RA600/7.0") {
    if (g0 === 0x41 && g1 === 0x13 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "Number of images in study",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "http://www.gemedicalsystems.com/it_solutions/rad_pacs/") {
    if (g0 === 0x31 && g1 === 0x15 && e1 === 0x1) {
      return new Ok(
        new Item(
          tag,
          "Reference to pacs study",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x15 && e1 === 0x2) {
      return new Ok(
        new Item(
          tag,
          "Reference to pacs image",
          toList([new UnlimitedText()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x15 && e1 === 0x3) {
      return new Ok(
        new Item(tag, "Pacs examnotes flag", toList([new CodeString()]), vm_1),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "Vital Images SW 3.4") {
    if (g0 === 0x56 && g1 === 0x53 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Saved Workflow", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x11) {
      return new Ok(
        new Item(
          tag,
          "Saved Workflow File Name",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x12) {
      return new Ok(
        new Item(
          tag,
          "Saved Workflow File Data",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x13) {
      return new Ok(
        new Item(
          tag,
          "Saved Workflow File Length",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x14) {
      return new Ok(
        new Item(
          tag,
          "Saved Workflow File Sequence",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x15) {
      return new Ok(
        new Item(tag, "Image Sequence", toList([new Sequence()]), vm_1),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x16) {
      return new Ok(
        new Item(
          tag,
          "Volume Interpolated Slices",
          toList([new SignedLong()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x17) {
      return new Ok(
        new Item(
          tag,
          "Volume SOP Instance UID",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x18) {
      return new Ok(
        new Item(tag, "Saved Workflow Mark", toList([new ShortString()]), vm_1),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x19) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x22) {
      return new Ok(
        new Item(tag, "Unknown", toList([new UniqueIdentifier()]), vm_1),
      );
    } else if (g0 === 0x56 && g1 === 0x53 && e1 === 0x23) {
      return new Ok(new Item(tag, "Unknown", toList([new LongString()]), vm_1));
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "AMI Sequence Annotations_02") {
    if (g0 === 0x31 && g1 === 0x3 && e1 === 0x10) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Sequence (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation UID (RET)",
          toList([new UniqueIdentifier()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x30) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Color (RET)",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x50) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Line Style (RET)",
          toList([new CodeString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x60) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Elements (RET)",
          toList([new Sequence()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x70) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Label (RET)",
          toList([new ShortString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x80) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Creator (RET)",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0x90) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Modifiers (RET)",
          toList([new PersonName()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xa0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Creation Date (RET)",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xb0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Creation Time (RET)",
          toList([new Time()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xc0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Modification Dates (RET)",
          toList([new Date()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xd0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Modification Times (RET)",
          toList([new Time()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x31 && g1 === 0x3 && e1 === 0xe0) {
      return new Ok(
        new Item(
          tag,
          "AMI Annotation Frame Number (RET)",
          toList([new UnsignedShort()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else if (private_creator === "SIEMENS NUMARIS II") {
    if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x0) {
      return new Ok(
        new Item(
          tag,
          "Image Graphics Format Code",
          toList([new LongString()]),
          vm_1,
        ),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x10) {
      return new Ok(
        new Item(tag, "Image Graphics", toList([new OtherByteString()]), vm_1),
      );
    } else if (g0 === 0x7f && g1 === 0xe3 && e1 === 0x20) {
      return new Ok(
        new Item(
          tag,
          "Image Graphics Dummy",
          toList([new OtherByteString()]),
          vm_1,
        ),
      );
    } else {
      return new Error(undefined);
    }
  } else {
    return new Error(undefined);
  }
}

export const file_meta_information_group_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x0),
  "File Meta Information Group Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const file_meta_information_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x1),
  "File Meta Information Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const media_storage_sop_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x2),
  "Media Storage SOP Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const media_storage_sop_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x3),
  "Media Storage SOP Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const transfer_syntax_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x10),
  "Transfer Syntax UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const implementation_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x12),
  "Implementation Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const implementation_version_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x13),
  "Implementation Version Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const source_application_entity_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x16),
  "Source Application Entity Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const sending_application_entity_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x17),
  "Sending Application Entity Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const receiving_application_entity_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x18),
  "Receiving Application Entity Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const source_presentation_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x26),
  "Source Presentation Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const sending_presentation_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x27),
  "Sending Presentation Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const receiving_presentation_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x28),
  "Receiving Presentation Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const rtv_meta_information_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x31),
  "RTV Meta Information Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const rtv_communication_sop_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x32),
  "RTV Communication SOP Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const rtv_communication_sop_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x33),
  "RTV Communication SOP Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const rtv_source_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x35),
  "RTV Source Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const rtv_flow_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x36),
  "RTV Flow Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const rtv_flow_rtp_sampling_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x37),
  "RTV Flow RTP Sampling Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const rtv_flow_actual_frame_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x38),
  "RTV Flow Actual Frame Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const private_information_creator_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x100),
  "Private Information Creator UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const private_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2, 0x102),
  "Private Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

function find_element_in_group_0002(element) {
  if (element === 0x0) {
    return new Ok(file_meta_information_group_length);
  } else if (element === 0x1) {
    return new Ok(file_meta_information_version);
  } else if (element === 0x2) {
    return new Ok(media_storage_sop_class_uid);
  } else if (element === 0x3) {
    return new Ok(media_storage_sop_instance_uid);
  } else if (element === 0x10) {
    return new Ok(transfer_syntax_uid);
  } else if (element === 0x12) {
    return new Ok(implementation_class_uid);
  } else if (element === 0x13) {
    return new Ok(implementation_version_name);
  } else if (element === 0x16) {
    return new Ok(source_application_entity_title);
  } else if (element === 0x17) {
    return new Ok(sending_application_entity_title);
  } else if (element === 0x18) {
    return new Ok(receiving_application_entity_title);
  } else if (element === 0x26) {
    return new Ok(source_presentation_address);
  } else if (element === 0x27) {
    return new Ok(sending_presentation_address);
  } else if (element === 0x28) {
    return new Ok(receiving_presentation_address);
  } else if (element === 0x31) {
    return new Ok(rtv_meta_information_version);
  } else if (element === 0x32) {
    return new Ok(rtv_communication_sop_class_uid);
  } else if (element === 0x33) {
    return new Ok(rtv_communication_sop_instance_uid);
  } else if (element === 0x35) {
    return new Ok(rtv_source_identifier);
  } else if (element === 0x36) {
    return new Ok(rtv_flow_identifier);
  } else if (element === 0x37) {
    return new Ok(rtv_flow_rtp_sampling_rate);
  } else if (element === 0x38) {
    return new Ok(rtv_flow_actual_frame_duration);
  } else if (element === 0x100) {
    return new Ok(private_information_creator_uid);
  } else if (element === 0x102) {
    return new Ok(private_information);
  } else {
    return new Error(undefined);
  }
}

export const file_set_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1130),
  "File-set ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const file_set_descriptor_file_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1141),
  "File-set Descriptor File ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(8)),
);

export const specific_character_set_of_file_set_descriptor_file = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1142),
  "Specific Character Set of File-set Descriptor File",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const offset_of_the_first_directory_record_of_the_root_directory_entity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1200),
  "Offset of the First Directory Record of the Root Directory Entity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const offset_of_the_last_directory_record_of_the_root_directory_entity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1202),
  "Offset of the Last Directory Record of the Root Directory Entity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const file_set_consistency_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1212),
  "File-set Consistency Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const directory_record_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1220),
  "Directory Record Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const offset_of_the_next_directory_record = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1400),
  "Offset of the Next Directory Record",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const record_in_use_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1410),
  "Record In-use Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const offset_of_referenced_lower_level_directory_entity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1420),
  "Offset of Referenced Lower-Level Directory Entity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const directory_record_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1430),
  "Directory Record Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const private_record_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1432),
  "Private Record UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_file_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1500),
  "Referenced File ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(8)),
);

export const mrdr_directory_record_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1504),
  "MRDR Directory Record Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const referenced_sop_class_uid_in_file = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1510),
  "Referenced SOP Class UID in File",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_sop_instance_uid_in_file = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1511),
  "Referenced SOP Instance UID in File",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_transfer_syntax_uid_in_file = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1512),
  "Referenced Transfer Syntax UID in File",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_related_general_sop_class_uid_in_file = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x151A),
  "Referenced Related General SOP Class UID in File",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const number_of_references = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4, 0x1600),
  "Number of References",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

function find_element_in_group_0004(element) {
  if (element === 0x1130) {
    return new Ok(file_set_id);
  } else if (element === 0x1141) {
    return new Ok(file_set_descriptor_file_id);
  } else if (element === 0x1142) {
    return new Ok(specific_character_set_of_file_set_descriptor_file);
  } else if (element === 0x1200) {
    return new Ok(
      offset_of_the_first_directory_record_of_the_root_directory_entity,
    );
  } else if (element === 0x1202) {
    return new Ok(
      offset_of_the_last_directory_record_of_the_root_directory_entity,
    );
  } else if (element === 0x1212) {
    return new Ok(file_set_consistency_flag);
  } else if (element === 0x1220) {
    return new Ok(directory_record_sequence);
  } else if (element === 0x1400) {
    return new Ok(offset_of_the_next_directory_record);
  } else if (element === 0x1410) {
    return new Ok(record_in_use_flag);
  } else if (element === 0x1420) {
    return new Ok(offset_of_referenced_lower_level_directory_entity);
  } else if (element === 0x1430) {
    return new Ok(directory_record_type);
  } else if (element === 0x1432) {
    return new Ok(private_record_uid);
  } else if (element === 0x1500) {
    return new Ok(referenced_file_id);
  } else if (element === 0x1504) {
    return new Ok(mrdr_directory_record_offset);
  } else if (element === 0x1510) {
    return new Ok(referenced_sop_class_uid_in_file);
  } else if (element === 0x1511) {
    return new Ok(referenced_sop_instance_uid_in_file);
  } else if (element === 0x1512) {
    return new Ok(referenced_transfer_syntax_uid_in_file);
  } else if (element === 0x151A) {
    return new Ok(referenced_related_general_sop_class_uid_in_file);
  } else if (element === 0x1600) {
    return new Ok(number_of_references);
  } else {
    return new Error(undefined);
  }
}

export const current_frame_functional_groups_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6, 0x1),
  "Current Frame Functional Groups Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0006(element) {
  if (element === 0x1) {
    return new Ok(current_frame_functional_groups_sequence);
  } else {
    return new Error(undefined);
  }
}

export const length_to_end = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1),
  "Length to End",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const specific_character_set = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x5),
  "Specific Character Set",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const language_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x6),
  "Language Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x8),
  "Image Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_2_to_n,
);

export const recognition_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x10),
  "Recognition Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const instance_creation_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x12),
  "Instance Creation Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const instance_creation_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x13),
  "Instance Creation Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const instance_creator_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x14),
  "Instance Creator UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const instance_coercion_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x15),
  "Instance Coercion DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const sop_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x16),
  "SOP Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const acquisition_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x17),
  "Acquisition UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const sop_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x18),
  "SOP Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const pyramid_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x19),
  "Pyramid UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const related_general_sop_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1A),
  "Related General SOP Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const original_specialized_sop_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1B),
  "Original Specialized SOP Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const synthetic_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1C),
  "Synthetic Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const study_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x20),
  "Study Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const series_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x21),
  "Series Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const acquisition_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x22),
  "Acquisition Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const content_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x23),
  "Content Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const overlay_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x24),
  "Overlay Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const curve_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x25),
  "Curve Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const acquisition_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2A),
  "Acquisition DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const study_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x30),
  "Study Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const series_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x31),
  "Series Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const acquisition_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x32),
  "Acquisition Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const content_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x33),
  "Content Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const overlay_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x34),
  "Overlay Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const curve_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x35),
  "Curve Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const data_set_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x40),
  "Data Set Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const data_set_subtype = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x41),
  "Data Set Subtype",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const nuclear_medicine_series_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x42),
  "Nuclear Medicine Series Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const accession_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x50),
  "Accession Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const issuer_of_accession_number_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x51),
  "Issuer of Accession Number Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const query_retrieve_level = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x52),
  "Query/Retrieve Level",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const query_retrieve_view = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x53),
  "Query/Retrieve View",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const retrieve_ae_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x54),
  "Retrieve AE Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1_to_n,
);

export const station_ae_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x55),
  "Station AE Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const instance_availability = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x56),
  "Instance Availability",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const failed_sop_instance_uid_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x58),
  "Failed SOP Instance UID List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const modality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x60),
  "Modality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const modalities_in_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x61),
  "Modalities in Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const sop_classes_in_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x62),
  "SOP Classes in Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const anatomic_regions_in_study_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x63),
  "Anatomic Regions in Study Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conversion_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x64),
  "Conversion Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const presentation_intent_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x68),
  "Presentation Intent Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x70),
  "Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const institution_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x80),
  "Institution Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const institution_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x81),
  "Institution Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const institution_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x82),
  "Institution Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referring_physician_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x90),
  "Referring Physician's Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const referring_physician_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x92),
  "Referring Physician's Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const referring_physician_telephone_numbers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x94),
  "Referring Physician's Telephone Numbers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const referring_physician_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x96),
  "Referring Physician Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const consulting_physician_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9C),
  "Consulting Physician's Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const consulting_physician_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9D),
  "Consulting Physician Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const code_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x100),
  "Code Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const extended_code_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x101),
  "Extended Code Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const coding_scheme_designator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x102),
  "Coding Scheme Designator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const coding_scheme_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x103),
  "Coding Scheme Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const code_meaning = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x104),
  "Code Meaning",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const mapping_resource = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x105),
  "Mapping Resource",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const context_group_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x106),
  "Context Group Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const context_group_local_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x107),
  "Context Group Local Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const extended_code_meaning = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x108),
  "Extended Code Meaning",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const coding_scheme_resources_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x109),
  "Coding Scheme Resources Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const coding_scheme_url_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x10A),
  "Coding Scheme URL Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const context_group_extension_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x10B),
  "Context Group Extension Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const coding_scheme_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x10C),
  "Coding Scheme UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const context_group_extension_creator_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x10D),
  "Context Group Extension Creator UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const coding_scheme_url = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x10E),
  "Coding Scheme URL",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const context_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x10F),
  "Context Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const coding_scheme_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x110),
  "Coding Scheme Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const coding_scheme_registry = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x112),
  "Coding Scheme Registry",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const coding_scheme_external_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x114),
  "Coding Scheme External ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const coding_scheme_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x115),
  "Coding Scheme Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const coding_scheme_responsible_organization = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x116),
  "Coding Scheme Responsible Organization",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const context_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x117),
  "Context UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const mapping_resource_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x118),
  "Mapping Resource UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const long_code_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x119),
  "Long Code Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const urn_code_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x120),
  "URN Code Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const equivalent_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x121),
  "Equivalent Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mapping_resource_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x122),
  "Mapping Resource Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const context_group_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x123),
  "Context Group Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mapping_resource_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x124),
  "Mapping Resource Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const timezone_offset_from_utc = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x201),
  "Timezone Offset From UTC",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const responsible_group_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x220),
  "Responsible Group Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const equipment_modality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x221),
  "Equipment Modality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const manufacturer_related_model_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x222),
  "Manufacturer's Related Model Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const private_data_element_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x300),
  "Private Data Element Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const private_group_reference = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x301),
  "Private Group Reference",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const private_creator_reference = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x302),
  "Private Creator Reference",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const block_identifying_information_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x303),
  "Block Identifying Information Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const nonidentifying_private_elements = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x304),
  "Nonidentifying Private Elements",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const deidentification_action_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x305),
  "Deidentification Action Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const identifying_private_elements = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x306),
  "Identifying Private Elements",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const deidentification_action = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x307),
  "Deidentification Action",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const private_data_element = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x308),
  "Private Data Element",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const private_data_element_value_multiplicity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x309),
  "Private Data Element Value Multiplicity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(3)),
);

export const private_data_element_value_representation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x30A),
  "Private Data Element Value Representation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const private_data_element_number_of_items = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x30B),
  "Private Data Element Number of Items",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_2,
);

export const private_data_element_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x30C),
  "Private Data Element Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const private_data_element_keyword = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x30D),
  "Private Data Element Keyword",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const private_data_element_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x30E),
  "Private Data Element Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const private_data_element_encoding = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x30F),
  "Private Data Element Encoding",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const private_data_element_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x310),
  "Private Data Element Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scope_of_inventory_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x400),
  "Scope of Inventory Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const inventory_purpose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x401),
  "Inventory Purpose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const inventory_instance_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x402),
  "Inventory Instance Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const inventory_level = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x403),
  "Inventory Level",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const item_inventory_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x404),
  "Item Inventory DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const removed_from_operational_use = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x405),
  "Removed from Operational Use",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reason_for_removal_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x406),
  "Reason for Removal Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const stored_instance_base_uri = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x407),
  "Stored Instance Base URI",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const folder_access_uri = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x408),
  "Folder Access URI",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const file_access_uri = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x409),
  "File Access URI",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const container_file_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x40A),
  "Container File Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const filename_in_container = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x40B),
  "Filename in Container",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const file_offset_in_container = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x40C),
  "File Offset in Container",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedVeryLong()]),
  vm_1,
);

export const file_length_in_container = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x40D),
  "File Length in Container",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedVeryLong()]),
  vm_1,
);

export const stored_instance_transfer_syntax_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x40E),
  "Stored Instance Transfer Syntax UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const extended_matching_mechanisms = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x40F),
  "Extended Matching Mechanisms",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const range_matching_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x410),
  "Range Matching Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const list_of_uid_matching_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x411),
  "List of UID Matching Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const empty_value_matching_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x412),
  "Empty Value Matching Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const general_matching_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x413),
  "General Matching Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requested_status_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x414),
  "Requested Status Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const retain_instances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x415),
  "Retain Instances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const expiration_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x416),
  "Expiration DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const transaction_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x417),
  "Transaction Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const transaction_status_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x418),
  "Transaction Status Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const file_set_access_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x419),
  "File Set Access Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const file_access_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x41A),
  "File Access Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const record_key = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x41B),
  "Record Key",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const prior_record_key = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x41C),
  "Prior Record Key",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const metadata_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x41D),
  "Metadata Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const updated_metadata_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x41E),
  "Updated Metadata Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const study_update_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x41F),
  "Study Update DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const inventory_access_end_points_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x420),
  "Inventory Access End Points Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const study_access_end_points_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x421),
  "Study Access End Points Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const incorporated_inventory_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x422),
  "Incorporated Inventory Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const inventoried_studies_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x423),
  "Inventoried Studies Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const inventoried_series_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x424),
  "Inventoried Series Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const inventoried_instances_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x425),
  "Inventoried Instances Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const inventory_completion_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x426),
  "Inventory Completion Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_study_records_in_instance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x427),
  "Number of Study Records in Instance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const total_number_of_study_records = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x428),
  "Total Number of Study Records",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedVeryLong()]),
  vm_1,
);

export const maximum_number_of_records = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x429),
  "Maximum Number of Records",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedVeryLong()]),
  vm_1,
);

export const network_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1000),
  "Network ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const station_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1010),
  "Station Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const study_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1030),
  "Study Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1032),
  "Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const series_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x103E),
  "Series Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const series_description_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x103F),
  "Series Description Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const institutional_department_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1040),
  "Institutional Department Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const institutional_department_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1041),
  "Institutional Department Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const physicians_of_record = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1048),
  "Physician(s) of Record",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const physicians_of_record_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1049),
  "Physician(s) of Record Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performing_physician_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1050),
  "Performing Physician's Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const performing_physician_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1052),
  "Performing Physician Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const name_of_physicians_reading_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1060),
  "Name of Physician(s) Reading Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const physicians_reading_study_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1062),
  "Physician(s) Reading Study Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const operators_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1070),
  "Operators' Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const operator_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1072),
  "Operator Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const admitting_diagnoses_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1080),
  "Admitting Diagnoses Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const admitting_diagnoses_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1084),
  "Admitting Diagnoses Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pyramid_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1088),
  "Pyramid Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const manufacturer_model_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1090),
  "Manufacturer's Model Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const referenced_results_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1100),
  "Referenced Results Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_study_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1110),
  "Referenced Study Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_performed_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1111),
  "Referenced Performed Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_instances_by_sop_class_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1112),
  "Referenced Instances by SOP Class Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_series_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1115),
  "Referenced Series Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_patient_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1120),
  "Referenced Patient Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_visit_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1125),
  "Referenced Visit Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_overlay_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1130),
  "Referenced Overlay Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_stereometric_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1134),
  "Referenced Stereometric Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_waveform_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x113A),
  "Referenced Waveform Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1140),
  "Referenced Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_curve_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1145),
  "Referenced Curve Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x114A),
  "Referenced Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_real_world_value_mapping_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x114B),
  "Referenced Real World Value Mapping Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_sop_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1150),
  "Referenced SOP Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_sop_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1155),
  "Referenced SOP Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const definition_source_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1156),
  "Definition Source Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const sop_classes_supported = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x115A),
  "SOP Classes Supported",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const referenced_frame_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1160),
  "Referenced Frame Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const simple_frame_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1161),
  "Simple Frame List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const calculated_frame_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1162),
  "Calculated Frame List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_3_to_n,
);

export const time_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1163),
  "Time Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const frame_extraction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1164),
  "Frame Extraction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const multi_frame_source_sop_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1167),
  "Multi-frame Source SOP Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const retrieve_url = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1190),
  "Retrieve URL",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const transaction_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1195),
  "Transaction UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const warning_reason = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1196),
  "Warning Reason",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const failure_reason = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1197),
  "Failure Reason",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const failed_sop_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1198),
  "Failed SOP Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_sop_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1199),
  "Referenced SOP Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const other_failures_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x119A),
  "Other Failures Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const failed_study_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x119B),
  "Failed Study Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const studies_containing_other_referenced_instances_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1200),
  "Studies Containing Other Referenced Instances Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const related_series_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x1250),
  "Related Series Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lossy_image_compression_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2110),
  "Lossy Image Compression (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const derivation_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2111),
  "Derivation Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const source_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2112),
  "Source Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const stage_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2120),
  "Stage Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const stage_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2122),
  "Stage Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_stages = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2124),
  "Number of Stages",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const view_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2127),
  "View Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const view_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2128),
  "View Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_event_timers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2129),
  "Number of Event Timers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_views_in_stage = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x212A),
  "Number of Views in Stage",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const event_elapsed_times = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2130),
  "Event Elapsed Time(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const event_timer_names = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2132),
  "Event Timer Name(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const event_timer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2133),
  "Event Timer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const event_time_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2134),
  "Event Time Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const event_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2135),
  "Event Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const start_trim = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2142),
  "Start Trim",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const stop_trim = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2143),
  "Stop Trim",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const recommended_display_frame_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2144),
  "Recommended Display Frame Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const transducer_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2200),
  "Transducer Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const transducer_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2204),
  "Transducer Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const anatomic_structure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2208),
  "Anatomic Structure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const anatomic_region_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2218),
  "Anatomic Region Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_region_modifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2220),
  "Anatomic Region Modifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const primary_anatomic_structure_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2228),
  "Primary Anatomic Structure Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_structure_space_or_region_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2229),
  "Anatomic Structure, Space or Region Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const primary_anatomic_structure_modifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2230),
  "Primary Anatomic Structure Modifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transducer_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2240),
  "Transducer Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transducer_position_modifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2242),
  "Transducer Position Modifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transducer_orientation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2244),
  "Transducer Orientation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transducer_orientation_modifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2246),
  "Transducer Orientation Modifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_structure_space_or_region_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2251),
  "Anatomic Structure Space Or Region Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_portal_of_entrance_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2253),
  "Anatomic Portal Of Entrance Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_approach_direction_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2255),
  "Anatomic Approach Direction Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_perspective_description_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2256),
  "Anatomic Perspective Description (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const anatomic_perspective_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2257),
  "Anatomic Perspective Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_location_of_examining_instrument_description_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2258),
  "Anatomic Location Of Examining Instrument Description (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const anatomic_location_of_examining_instrument_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x2259),
  "Anatomic Location Of Examining Instrument Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anatomic_structure_space_or_region_modifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x225A),
  "Anatomic Structure Space Or Region Modifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const on_axis_background_anatomic_structure_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x225C),
  "On Axis Background Anatomic Structure Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const alternate_representation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x3001),
  "Alternate Representation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const available_transfer_syntax_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x3002),
  "Available Transfer Syntax UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const irradiation_event_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x3010),
  "Irradiation Event UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const source_irradiation_event_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x3011),
  "Source Irradiation Event Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiopharmaceutical_administration_event_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x3012),
  "Radiopharmaceutical Administration Event UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const identifying_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x4000),
  "Identifying Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const frame_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9007),
  "Frame Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  /* @__PURE__ */ new ValueMultiplicity(4, /* @__PURE__ */ new Some(5)),
);

export const referenced_image_evidence_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9092),
  "Referenced Image Evidence Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_raw_data_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9121),
  "Referenced Raw Data Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const creator_version_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9123),
  "Creator-Version UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const derivation_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9124),
  "Derivation Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_image_evidence_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9154),
  "Source Image Evidence Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pixel_presentation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9205),
  "Pixel Presentation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const volumetric_properties = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9206),
  "Volumetric Properties",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const volume_based_calculation_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9207),
  "Volume Based Calculation Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const complex_image_component = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9208),
  "Complex Image Component",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acquisition_contrast = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9209),
  "Acquisition Contrast",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const derivation_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9215),
  "Derivation Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_presentation_state_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9237),
  "Referenced Presentation State Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_other_plane_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9410),
  "Referenced Other Plane Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_display_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9458),
  "Frame Display Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recommended_display_frame_rate_in_float = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9459),
  "Recommended Display Frame Rate in Float",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const skip_frame_range_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x8, 0x9460),
  "Skip Frame Range Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_0008(element) {
  if (element === 0x1) {
    return new Ok(length_to_end);
  } else if (element === 0x5) {
    return new Ok(specific_character_set);
  } else if (element === 0x6) {
    return new Ok(language_code_sequence);
  } else if (element === 0x8) {
    return new Ok(image_type);
  } else if (element === 0x10) {
    return new Ok(recognition_code);
  } else if (element === 0x12) {
    return new Ok(instance_creation_date);
  } else if (element === 0x13) {
    return new Ok(instance_creation_time);
  } else if (element === 0x14) {
    return new Ok(instance_creator_uid);
  } else if (element === 0x15) {
    return new Ok(instance_coercion_date_time);
  } else if (element === 0x16) {
    return new Ok(sop_class_uid);
  } else if (element === 0x17) {
    return new Ok(acquisition_uid);
  } else if (element === 0x18) {
    return new Ok(sop_instance_uid);
  } else if (element === 0x19) {
    return new Ok(pyramid_uid);
  } else if (element === 0x1A) {
    return new Ok(related_general_sop_class_uid);
  } else if (element === 0x1B) {
    return new Ok(original_specialized_sop_class_uid);
  } else if (element === 0x1C) {
    return new Ok(synthetic_data);
  } else if (element === 0x20) {
    return new Ok(study_date);
  } else if (element === 0x21) {
    return new Ok(series_date);
  } else if (element === 0x22) {
    return new Ok(acquisition_date);
  } else if (element === 0x23) {
    return new Ok(content_date);
  } else if (element === 0x24) {
    return new Ok(overlay_date);
  } else if (element === 0x25) {
    return new Ok(curve_date);
  } else if (element === 0x2A) {
    return new Ok(acquisition_date_time);
  } else if (element === 0x30) {
    return new Ok(study_time);
  } else if (element === 0x31) {
    return new Ok(series_time);
  } else if (element === 0x32) {
    return new Ok(acquisition_time);
  } else if (element === 0x33) {
    return new Ok(content_time);
  } else if (element === 0x34) {
    return new Ok(overlay_time);
  } else if (element === 0x35) {
    return new Ok(curve_time);
  } else if (element === 0x40) {
    return new Ok(data_set_type);
  } else if (element === 0x41) {
    return new Ok(data_set_subtype);
  } else if (element === 0x42) {
    return new Ok(nuclear_medicine_series_type);
  } else if (element === 0x50) {
    return new Ok(accession_number);
  } else if (element === 0x51) {
    return new Ok(issuer_of_accession_number_sequence);
  } else if (element === 0x52) {
    return new Ok(query_retrieve_level);
  } else if (element === 0x53) {
    return new Ok(query_retrieve_view);
  } else if (element === 0x54) {
    return new Ok(retrieve_ae_title);
  } else if (element === 0x55) {
    return new Ok(station_ae_title);
  } else if (element === 0x56) {
    return new Ok(instance_availability);
  } else if (element === 0x58) {
    return new Ok(failed_sop_instance_uid_list);
  } else if (element === 0x60) {
    return new Ok(modality);
  } else if (element === 0x61) {
    return new Ok(modalities_in_study);
  } else if (element === 0x62) {
    return new Ok(sop_classes_in_study);
  } else if (element === 0x63) {
    return new Ok(anatomic_regions_in_study_code_sequence);
  } else if (element === 0x64) {
    return new Ok(conversion_type);
  } else if (element === 0x68) {
    return new Ok(presentation_intent_type);
  } else if (element === 0x70) {
    return new Ok(manufacturer);
  } else if (element === 0x80) {
    return new Ok(institution_name);
  } else if (element === 0x81) {
    return new Ok(institution_address);
  } else if (element === 0x82) {
    return new Ok(institution_code_sequence);
  } else if (element === 0x90) {
    return new Ok(referring_physician_name);
  } else if (element === 0x92) {
    return new Ok(referring_physician_address);
  } else if (element === 0x94) {
    return new Ok(referring_physician_telephone_numbers);
  } else if (element === 0x96) {
    return new Ok(referring_physician_identification_sequence);
  } else if (element === 0x9C) {
    return new Ok(consulting_physician_name);
  } else if (element === 0x9D) {
    return new Ok(consulting_physician_identification_sequence);
  } else if (element === 0x100) {
    return new Ok(code_value);
  } else if (element === 0x101) {
    return new Ok(extended_code_value);
  } else if (element === 0x102) {
    return new Ok(coding_scheme_designator);
  } else if (element === 0x103) {
    return new Ok(coding_scheme_version);
  } else if (element === 0x104) {
    return new Ok(code_meaning);
  } else if (element === 0x105) {
    return new Ok(mapping_resource);
  } else if (element === 0x106) {
    return new Ok(context_group_version);
  } else if (element === 0x107) {
    return new Ok(context_group_local_version);
  } else if (element === 0x108) {
    return new Ok(extended_code_meaning);
  } else if (element === 0x109) {
    return new Ok(coding_scheme_resources_sequence);
  } else if (element === 0x10A) {
    return new Ok(coding_scheme_url_type);
  } else if (element === 0x10B) {
    return new Ok(context_group_extension_flag);
  } else if (element === 0x10C) {
    return new Ok(coding_scheme_uid);
  } else if (element === 0x10D) {
    return new Ok(context_group_extension_creator_uid);
  } else if (element === 0x10E) {
    return new Ok(coding_scheme_url);
  } else if (element === 0x10F) {
    return new Ok(context_identifier);
  } else if (element === 0x110) {
    return new Ok(coding_scheme_identification_sequence);
  } else if (element === 0x112) {
    return new Ok(coding_scheme_registry);
  } else if (element === 0x114) {
    return new Ok(coding_scheme_external_id);
  } else if (element === 0x115) {
    return new Ok(coding_scheme_name);
  } else if (element === 0x116) {
    return new Ok(coding_scheme_responsible_organization);
  } else if (element === 0x117) {
    return new Ok(context_uid);
  } else if (element === 0x118) {
    return new Ok(mapping_resource_uid);
  } else if (element === 0x119) {
    return new Ok(long_code_value);
  } else if (element === 0x120) {
    return new Ok(urn_code_value);
  } else if (element === 0x121) {
    return new Ok(equivalent_code_sequence);
  } else if (element === 0x122) {
    return new Ok(mapping_resource_name);
  } else if (element === 0x123) {
    return new Ok(context_group_identification_sequence);
  } else if (element === 0x124) {
    return new Ok(mapping_resource_identification_sequence);
  } else if (element === 0x201) {
    return new Ok(timezone_offset_from_utc);
  } else if (element === 0x220) {
    return new Ok(responsible_group_code_sequence);
  } else if (element === 0x221) {
    return new Ok(equipment_modality);
  } else if (element === 0x222) {
    return new Ok(manufacturer_related_model_group);
  } else if (element === 0x300) {
    return new Ok(private_data_element_characteristics_sequence);
  } else if (element === 0x301) {
    return new Ok(private_group_reference);
  } else if (element === 0x302) {
    return new Ok(private_creator_reference);
  } else if (element === 0x303) {
    return new Ok(block_identifying_information_status);
  } else if (element === 0x304) {
    return new Ok(nonidentifying_private_elements);
  } else if (element === 0x305) {
    return new Ok(deidentification_action_sequence);
  } else if (element === 0x306) {
    return new Ok(identifying_private_elements);
  } else if (element === 0x307) {
    return new Ok(deidentification_action);
  } else if (element === 0x308) {
    return new Ok(private_data_element);
  } else if (element === 0x309) {
    return new Ok(private_data_element_value_multiplicity);
  } else if (element === 0x30A) {
    return new Ok(private_data_element_value_representation);
  } else if (element === 0x30B) {
    return new Ok(private_data_element_number_of_items);
  } else if (element === 0x30C) {
    return new Ok(private_data_element_name);
  } else if (element === 0x30D) {
    return new Ok(private_data_element_keyword);
  } else if (element === 0x30E) {
    return new Ok(private_data_element_description);
  } else if (element === 0x30F) {
    return new Ok(private_data_element_encoding);
  } else if (element === 0x310) {
    return new Ok(private_data_element_definition_sequence);
  } else if (element === 0x400) {
    return new Ok(scope_of_inventory_sequence);
  } else if (element === 0x401) {
    return new Ok(inventory_purpose);
  } else if (element === 0x402) {
    return new Ok(inventory_instance_description);
  } else if (element === 0x403) {
    return new Ok(inventory_level);
  } else if (element === 0x404) {
    return new Ok(item_inventory_date_time);
  } else if (element === 0x405) {
    return new Ok(removed_from_operational_use);
  } else if (element === 0x406) {
    return new Ok(reason_for_removal_code_sequence);
  } else if (element === 0x407) {
    return new Ok(stored_instance_base_uri);
  } else if (element === 0x408) {
    return new Ok(folder_access_uri);
  } else if (element === 0x409) {
    return new Ok(file_access_uri);
  } else if (element === 0x40A) {
    return new Ok(container_file_type);
  } else if (element === 0x40B) {
    return new Ok(filename_in_container);
  } else if (element === 0x40C) {
    return new Ok(file_offset_in_container);
  } else if (element === 0x40D) {
    return new Ok(file_length_in_container);
  } else if (element === 0x40E) {
    return new Ok(stored_instance_transfer_syntax_uid);
  } else if (element === 0x40F) {
    return new Ok(extended_matching_mechanisms);
  } else if (element === 0x410) {
    return new Ok(range_matching_sequence);
  } else if (element === 0x411) {
    return new Ok(list_of_uid_matching_sequence);
  } else if (element === 0x412) {
    return new Ok(empty_value_matching_sequence);
  } else if (element === 0x413) {
    return new Ok(general_matching_sequence);
  } else if (element === 0x414) {
    return new Ok(requested_status_interval);
  } else if (element === 0x415) {
    return new Ok(retain_instances);
  } else if (element === 0x416) {
    return new Ok(expiration_date_time);
  } else if (element === 0x417) {
    return new Ok(transaction_status);
  } else if (element === 0x418) {
    return new Ok(transaction_status_comment);
  } else if (element === 0x419) {
    return new Ok(file_set_access_sequence);
  } else if (element === 0x41A) {
    return new Ok(file_access_sequence);
  } else if (element === 0x41B) {
    return new Ok(record_key);
  } else if (element === 0x41C) {
    return new Ok(prior_record_key);
  } else if (element === 0x41D) {
    return new Ok(metadata_sequence);
  } else if (element === 0x41E) {
    return new Ok(updated_metadata_sequence);
  } else if (element === 0x41F) {
    return new Ok(study_update_date_time);
  } else if (element === 0x420) {
    return new Ok(inventory_access_end_points_sequence);
  } else if (element === 0x421) {
    return new Ok(study_access_end_points_sequence);
  } else if (element === 0x422) {
    return new Ok(incorporated_inventory_instance_sequence);
  } else if (element === 0x423) {
    return new Ok(inventoried_studies_sequence);
  } else if (element === 0x424) {
    return new Ok(inventoried_series_sequence);
  } else if (element === 0x425) {
    return new Ok(inventoried_instances_sequence);
  } else if (element === 0x426) {
    return new Ok(inventory_completion_status);
  } else if (element === 0x427) {
    return new Ok(number_of_study_records_in_instance);
  } else if (element === 0x428) {
    return new Ok(total_number_of_study_records);
  } else if (element === 0x429) {
    return new Ok(maximum_number_of_records);
  } else if (element === 0x1000) {
    return new Ok(network_id);
  } else if (element === 0x1010) {
    return new Ok(station_name);
  } else if (element === 0x1030) {
    return new Ok(study_description);
  } else if (element === 0x1032) {
    return new Ok(procedure_code_sequence);
  } else if (element === 0x103E) {
    return new Ok(series_description);
  } else if (element === 0x103F) {
    return new Ok(series_description_code_sequence);
  } else if (element === 0x1040) {
    return new Ok(institutional_department_name);
  } else if (element === 0x1041) {
    return new Ok(institutional_department_type_code_sequence);
  } else if (element === 0x1048) {
    return new Ok(physicians_of_record);
  } else if (element === 0x1049) {
    return new Ok(physicians_of_record_identification_sequence);
  } else if (element === 0x1050) {
    return new Ok(performing_physician_name);
  } else if (element === 0x1052) {
    return new Ok(performing_physician_identification_sequence);
  } else if (element === 0x1060) {
    return new Ok(name_of_physicians_reading_study);
  } else if (element === 0x1062) {
    return new Ok(physicians_reading_study_identification_sequence);
  } else if (element === 0x1070) {
    return new Ok(operators_name);
  } else if (element === 0x1072) {
    return new Ok(operator_identification_sequence);
  } else if (element === 0x1080) {
    return new Ok(admitting_diagnoses_description);
  } else if (element === 0x1084) {
    return new Ok(admitting_diagnoses_code_sequence);
  } else if (element === 0x1088) {
    return new Ok(pyramid_description);
  } else if (element === 0x1090) {
    return new Ok(manufacturer_model_name);
  } else if (element === 0x1100) {
    return new Ok(referenced_results_sequence);
  } else if (element === 0x1110) {
    return new Ok(referenced_study_sequence);
  } else if (element === 0x1111) {
    return new Ok(referenced_performed_procedure_step_sequence);
  } else if (element === 0x1112) {
    return new Ok(referenced_instances_by_sop_class_sequence);
  } else if (element === 0x1115) {
    return new Ok(referenced_series_sequence);
  } else if (element === 0x1120) {
    return new Ok(referenced_patient_sequence);
  } else if (element === 0x1125) {
    return new Ok(referenced_visit_sequence);
  } else if (element === 0x1130) {
    return new Ok(referenced_overlay_sequence);
  } else if (element === 0x1134) {
    return new Ok(referenced_stereometric_instance_sequence);
  } else if (element === 0x113A) {
    return new Ok(referenced_waveform_sequence);
  } else if (element === 0x1140) {
    return new Ok(referenced_image_sequence);
  } else if (element === 0x1145) {
    return new Ok(referenced_curve_sequence);
  } else if (element === 0x114A) {
    return new Ok(referenced_instance_sequence);
  } else if (element === 0x114B) {
    return new Ok(referenced_real_world_value_mapping_instance_sequence);
  } else if (element === 0x1150) {
    return new Ok(referenced_sop_class_uid);
  } else if (element === 0x1155) {
    return new Ok(referenced_sop_instance_uid);
  } else if (element === 0x1156) {
    return new Ok(definition_source_sequence);
  } else if (element === 0x115A) {
    return new Ok(sop_classes_supported);
  } else if (element === 0x1160) {
    return new Ok(referenced_frame_number);
  } else if (element === 0x1161) {
    return new Ok(simple_frame_list);
  } else if (element === 0x1162) {
    return new Ok(calculated_frame_list);
  } else if (element === 0x1163) {
    return new Ok(time_range);
  } else if (element === 0x1164) {
    return new Ok(frame_extraction_sequence);
  } else if (element === 0x1167) {
    return new Ok(multi_frame_source_sop_instance_uid);
  } else if (element === 0x1190) {
    return new Ok(retrieve_url);
  } else if (element === 0x1195) {
    return new Ok(transaction_uid);
  } else if (element === 0x1196) {
    return new Ok(warning_reason);
  } else if (element === 0x1197) {
    return new Ok(failure_reason);
  } else if (element === 0x1198) {
    return new Ok(failed_sop_sequence);
  } else if (element === 0x1199) {
    return new Ok(referenced_sop_sequence);
  } else if (element === 0x119A) {
    return new Ok(other_failures_sequence);
  } else if (element === 0x119B) {
    return new Ok(failed_study_sequence);
  } else if (element === 0x1200) {
    return new Ok(studies_containing_other_referenced_instances_sequence);
  } else if (element === 0x1250) {
    return new Ok(related_series_sequence);
  } else if (element === 0x2110) {
    return new Ok(lossy_image_compression_retired);
  } else if (element === 0x2111) {
    return new Ok(derivation_description);
  } else if (element === 0x2112) {
    return new Ok(source_image_sequence);
  } else if (element === 0x2120) {
    return new Ok(stage_name);
  } else if (element === 0x2122) {
    return new Ok(stage_number);
  } else if (element === 0x2124) {
    return new Ok(number_of_stages);
  } else if (element === 0x2127) {
    return new Ok(view_name);
  } else if (element === 0x2128) {
    return new Ok(view_number);
  } else if (element === 0x2129) {
    return new Ok(number_of_event_timers);
  } else if (element === 0x212A) {
    return new Ok(number_of_views_in_stage);
  } else if (element === 0x2130) {
    return new Ok(event_elapsed_times);
  } else if (element === 0x2132) {
    return new Ok(event_timer_names);
  } else if (element === 0x2133) {
    return new Ok(event_timer_sequence);
  } else if (element === 0x2134) {
    return new Ok(event_time_offset);
  } else if (element === 0x2135) {
    return new Ok(event_code_sequence);
  } else if (element === 0x2142) {
    return new Ok(start_trim);
  } else if (element === 0x2143) {
    return new Ok(stop_trim);
  } else if (element === 0x2144) {
    return new Ok(recommended_display_frame_rate);
  } else if (element === 0x2200) {
    return new Ok(transducer_position);
  } else if (element === 0x2204) {
    return new Ok(transducer_orientation);
  } else if (element === 0x2208) {
    return new Ok(anatomic_structure);
  } else if (element === 0x2218) {
    return new Ok(anatomic_region_sequence);
  } else if (element === 0x2220) {
    return new Ok(anatomic_region_modifier_sequence);
  } else if (element === 0x2228) {
    return new Ok(primary_anatomic_structure_sequence);
  } else if (element === 0x2229) {
    return new Ok(anatomic_structure_space_or_region_sequence);
  } else if (element === 0x2230) {
    return new Ok(primary_anatomic_structure_modifier_sequence);
  } else if (element === 0x2240) {
    return new Ok(transducer_position_sequence);
  } else if (element === 0x2242) {
    return new Ok(transducer_position_modifier_sequence);
  } else if (element === 0x2244) {
    return new Ok(transducer_orientation_sequence);
  } else if (element === 0x2246) {
    return new Ok(transducer_orientation_modifier_sequence);
  } else if (element === 0x2251) {
    return new Ok(anatomic_structure_space_or_region_code_sequence_trial);
  } else if (element === 0x2253) {
    return new Ok(anatomic_portal_of_entrance_code_sequence_trial);
  } else if (element === 0x2255) {
    return new Ok(anatomic_approach_direction_code_sequence_trial);
  } else if (element === 0x2256) {
    return new Ok(anatomic_perspective_description_trial);
  } else if (element === 0x2257) {
    return new Ok(anatomic_perspective_code_sequence_trial);
  } else if (element === 0x2258) {
    return new Ok(anatomic_location_of_examining_instrument_description_trial);
  } else if (element === 0x2259) {
    return new Ok(anatomic_location_of_examining_instrument_code_sequence_trial);
  } else if (element === 0x225A) {
    return new Ok(
      anatomic_structure_space_or_region_modifier_code_sequence_trial,
    );
  } else if (element === 0x225C) {
    return new Ok(on_axis_background_anatomic_structure_code_sequence_trial);
  } else if (element === 0x3001) {
    return new Ok(alternate_representation_sequence);
  } else if (element === 0x3002) {
    return new Ok(available_transfer_syntax_uid);
  } else if (element === 0x3010) {
    return new Ok(irradiation_event_uid);
  } else if (element === 0x3011) {
    return new Ok(source_irradiation_event_sequence);
  } else if (element === 0x3012) {
    return new Ok(radiopharmaceutical_administration_event_uid);
  } else if (element === 0x4000) {
    return new Ok(identifying_comments);
  } else if (element === 0x9007) {
    return new Ok(frame_type);
  } else if (element === 0x9092) {
    return new Ok(referenced_image_evidence_sequence);
  } else if (element === 0x9121) {
    return new Ok(referenced_raw_data_sequence);
  } else if (element === 0x9123) {
    return new Ok(creator_version_uid);
  } else if (element === 0x9124) {
    return new Ok(derivation_image_sequence);
  } else if (element === 0x9154) {
    return new Ok(source_image_evidence_sequence);
  } else if (element === 0x9205) {
    return new Ok(pixel_presentation);
  } else if (element === 0x9206) {
    return new Ok(volumetric_properties);
  } else if (element === 0x9207) {
    return new Ok(volume_based_calculation_technique);
  } else if (element === 0x9208) {
    return new Ok(complex_image_component);
  } else if (element === 0x9209) {
    return new Ok(acquisition_contrast);
  } else if (element === 0x9215) {
    return new Ok(derivation_code_sequence);
  } else if (element === 0x9237) {
    return new Ok(referenced_presentation_state_sequence);
  } else if (element === 0x9410) {
    return new Ok(referenced_other_plane_sequence);
  } else if (element === 0x9458) {
    return new Ok(frame_display_sequence);
  } else if (element === 0x9459) {
    return new Ok(recommended_display_frame_rate_in_float);
  } else if (element === 0x9460) {
    return new Ok(skip_frame_range_flag);
  } else {
    return new Error(undefined);
  }
}

export const patient_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x10),
  "Patient's Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const patient_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x20),
  "Patient ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_patient_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x21),
  "Issuer of Patient ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const type_of_patient_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x22),
  "Type of Patient ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const issuer_of_patient_id_qualifiers_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x24),
  "Issuer of Patient ID Qualifiers Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_patient_group_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x26),
  "Source Patient Group Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const group_of_patients_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x27),
  "Group of Patients Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const subject_relative_position_in_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x28),
  "Subject Relative Position in Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const patient_birth_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x30),
  "Patient's Birth Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const patient_birth_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x32),
  "Patient's Birth Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const patient_birth_date_in_alternative_calendar = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x33),
  "Patient's Birth Date in Alternative Calendar",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_death_date_in_alternative_calendar = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x34),
  "Patient's Death Date in Alternative Calendar",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_alternative_calendar = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x35),
  "Patient's Alternative Calendar",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_sex = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x40),
  "Patient's Sex",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_insurance_plan_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x50),
  "Patient's Insurance Plan Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_primary_language_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x101),
  "Patient's Primary Language Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_primary_language_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x102),
  "Patient's Primary Language Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const quality_control_subject = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x200),
  "Quality Control Subject",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const quality_control_subject_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x201),
  "Quality Control Subject Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const strain_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x212),
  "Strain Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const strain_nomenclature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x213),
  "Strain Nomenclature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const strain_stock_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x214),
  "Strain Stock Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const strain_source_registry_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x215),
  "Strain Source Registry Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const strain_stock_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x216),
  "Strain Stock Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const strain_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x217),
  "Strain Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const strain_additional_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x218),
  "Strain Additional Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const strain_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x219),
  "Strain Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const genetic_modifications_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x221),
  "Genetic Modifications Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const genetic_modifications_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x222),
  "Genetic Modifications Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const genetic_modifications_nomenclature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x223),
  "Genetic Modifications Nomenclature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const genetic_modifications_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x229),
  "Genetic Modifications Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const other_patient_ids = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1000),
  "Other Patient IDs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const other_patient_names = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1001),
  "Other Patient Names",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const other_patient_ids_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1002),
  "Other Patient IDs Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_birth_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1005),
  "Patient's Birth Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const patient_age = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1010),
  "Patient's Age",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AgeString()]),
  vm_1,
);

export const patient_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1020),
  "Patient's Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const patient_size_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1021),
  "Patient's Size Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_body_mass_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1022),
  "Patient's Body Mass Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const measured_ap_dimension = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1023),
  "Measured AP Dimension",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const measured_lateral_dimension = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1024),
  "Measured Lateral Dimension",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const patient_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1030),
  "Patient's Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const patient_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1040),
  "Patient's Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const insurance_plan_identification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1050),
  "Insurance Plan Identification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const patient_mother_birth_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1060),
  "Patient's Mother's Birth Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const military_rank = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1080),
  "Military Rank",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const branch_of_service = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1081),
  "Branch of Service",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const medical_record_locator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1090),
  "Medical Record Locator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const referenced_patient_photo_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x1100),
  "Referenced Patient Photo Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const medical_alerts = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2000),
  "Medical Alerts",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const allergies = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2110),
  "Allergies",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const country_of_residence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2150),
  "Country of Residence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const region_of_residence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2152),
  "Region of Residence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_telephone_numbers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2154),
  "Patient's Telephone Numbers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const patient_telecom_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2155),
  "Patient's Telecom Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const ethnic_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2160),
  "Ethnic Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const occupation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2180),
  "Occupation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const smoking_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x21A0),
  "Smoking Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const additional_patient_history = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x21B0),
  "Additional Patient History",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const pregnancy_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x21C0),
  "Pregnancy Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const last_menstrual_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x21D0),
  "Last Menstrual Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const patient_religious_preference = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x21F0),
  "Patient's Religious Preference",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_species_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2201),
  "Patient Species Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_species_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2202),
  "Patient Species Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_sex_neutered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2203),
  "Patient's Sex Neutered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const anatomical_orientation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2210),
  "Anatomical Orientation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_breed_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2292),
  "Patient Breed Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_breed_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2293),
  "Patient Breed Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const breed_registration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2294),
  "Breed Registration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const breed_registration_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2295),
  "Breed Registration Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const breed_registry_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2296),
  "Breed Registry Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const responsible_person = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2297),
  "Responsible Person",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const responsible_person_role = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2298),
  "Responsible Person Role",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const responsible_organization = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x2299),
  "Responsible Organization",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x4000),
  "Patient Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const examined_body_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x10, 0x9431),
  "Examined Body Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

function find_element_in_group_0010(element) {
  if (element === 0x10) {
    return new Ok(patient_name);
  } else if (element === 0x20) {
    return new Ok(patient_id);
  } else if (element === 0x21) {
    return new Ok(issuer_of_patient_id);
  } else if (element === 0x22) {
    return new Ok(type_of_patient_id);
  } else if (element === 0x24) {
    return new Ok(issuer_of_patient_id_qualifiers_sequence);
  } else if (element === 0x26) {
    return new Ok(source_patient_group_identification_sequence);
  } else if (element === 0x27) {
    return new Ok(group_of_patients_identification_sequence);
  } else if (element === 0x28) {
    return new Ok(subject_relative_position_in_image);
  } else if (element === 0x30) {
    return new Ok(patient_birth_date);
  } else if (element === 0x32) {
    return new Ok(patient_birth_time);
  } else if (element === 0x33) {
    return new Ok(patient_birth_date_in_alternative_calendar);
  } else if (element === 0x34) {
    return new Ok(patient_death_date_in_alternative_calendar);
  } else if (element === 0x35) {
    return new Ok(patient_alternative_calendar);
  } else if (element === 0x40) {
    return new Ok(patient_sex);
  } else if (element === 0x50) {
    return new Ok(patient_insurance_plan_code_sequence);
  } else if (element === 0x101) {
    return new Ok(patient_primary_language_code_sequence);
  } else if (element === 0x102) {
    return new Ok(patient_primary_language_modifier_code_sequence);
  } else if (element === 0x200) {
    return new Ok(quality_control_subject);
  } else if (element === 0x201) {
    return new Ok(quality_control_subject_type_code_sequence);
  } else if (element === 0x212) {
    return new Ok(strain_description);
  } else if (element === 0x213) {
    return new Ok(strain_nomenclature);
  } else if (element === 0x214) {
    return new Ok(strain_stock_number);
  } else if (element === 0x215) {
    return new Ok(strain_source_registry_code_sequence);
  } else if (element === 0x216) {
    return new Ok(strain_stock_sequence);
  } else if (element === 0x217) {
    return new Ok(strain_source);
  } else if (element === 0x218) {
    return new Ok(strain_additional_information);
  } else if (element === 0x219) {
    return new Ok(strain_code_sequence);
  } else if (element === 0x221) {
    return new Ok(genetic_modifications_sequence);
  } else if (element === 0x222) {
    return new Ok(genetic_modifications_description);
  } else if (element === 0x223) {
    return new Ok(genetic_modifications_nomenclature);
  } else if (element === 0x229) {
    return new Ok(genetic_modifications_code_sequence);
  } else if (element === 0x1000) {
    return new Ok(other_patient_ids);
  } else if (element === 0x1001) {
    return new Ok(other_patient_names);
  } else if (element === 0x1002) {
    return new Ok(other_patient_ids_sequence);
  } else if (element === 0x1005) {
    return new Ok(patient_birth_name);
  } else if (element === 0x1010) {
    return new Ok(patient_age);
  } else if (element === 0x1020) {
    return new Ok(patient_size);
  } else if (element === 0x1021) {
    return new Ok(patient_size_code_sequence);
  } else if (element === 0x1022) {
    return new Ok(patient_body_mass_index);
  } else if (element === 0x1023) {
    return new Ok(measured_ap_dimension);
  } else if (element === 0x1024) {
    return new Ok(measured_lateral_dimension);
  } else if (element === 0x1030) {
    return new Ok(patient_weight);
  } else if (element === 0x1040) {
    return new Ok(patient_address);
  } else if (element === 0x1050) {
    return new Ok(insurance_plan_identification);
  } else if (element === 0x1060) {
    return new Ok(patient_mother_birth_name);
  } else if (element === 0x1080) {
    return new Ok(military_rank);
  } else if (element === 0x1081) {
    return new Ok(branch_of_service);
  } else if (element === 0x1090) {
    return new Ok(medical_record_locator);
  } else if (element === 0x1100) {
    return new Ok(referenced_patient_photo_sequence);
  } else if (element === 0x2000) {
    return new Ok(medical_alerts);
  } else if (element === 0x2110) {
    return new Ok(allergies);
  } else if (element === 0x2150) {
    return new Ok(country_of_residence);
  } else if (element === 0x2152) {
    return new Ok(region_of_residence);
  } else if (element === 0x2154) {
    return new Ok(patient_telephone_numbers);
  } else if (element === 0x2155) {
    return new Ok(patient_telecom_information);
  } else if (element === 0x2160) {
    return new Ok(ethnic_group);
  } else if (element === 0x2180) {
    return new Ok(occupation);
  } else if (element === 0x21A0) {
    return new Ok(smoking_status);
  } else if (element === 0x21B0) {
    return new Ok(additional_patient_history);
  } else if (element === 0x21C0) {
    return new Ok(pregnancy_status);
  } else if (element === 0x21D0) {
    return new Ok(last_menstrual_date);
  } else if (element === 0x21F0) {
    return new Ok(patient_religious_preference);
  } else if (element === 0x2201) {
    return new Ok(patient_species_description);
  } else if (element === 0x2202) {
    return new Ok(patient_species_code_sequence);
  } else if (element === 0x2203) {
    return new Ok(patient_sex_neutered);
  } else if (element === 0x2210) {
    return new Ok(anatomical_orientation_type);
  } else if (element === 0x2292) {
    return new Ok(patient_breed_description);
  } else if (element === 0x2293) {
    return new Ok(patient_breed_code_sequence);
  } else if (element === 0x2294) {
    return new Ok(breed_registration_sequence);
  } else if (element === 0x2295) {
    return new Ok(breed_registration_number);
  } else if (element === 0x2296) {
    return new Ok(breed_registry_code_sequence);
  } else if (element === 0x2297) {
    return new Ok(responsible_person);
  } else if (element === 0x2298) {
    return new Ok(responsible_person_role);
  } else if (element === 0x2299) {
    return new Ok(responsible_organization);
  } else if (element === 0x4000) {
    return new Ok(patient_comments);
  } else if (element === 0x9431) {
    return new Ok(examined_body_thickness);
  } else {
    return new Error(undefined);
  }
}

export const clinical_trial_sponsor_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x10),
  "Clinical Trial Sponsor Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_protocol_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x20),
  "Clinical Trial Protocol ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_protocol_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x21),
  "Clinical Trial Protocol Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_clinical_trial_protocol_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x22),
  "Issuer of Clinical Trial Protocol ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const other_clinical_trial_protocol_ids_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x23),
  "Other Clinical Trial Protocol IDs Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const clinical_trial_site_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x30),
  "Clinical Trial Site ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_site_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x31),
  "Clinical Trial Site Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_clinical_trial_site_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x32),
  "Issuer of Clinical Trial Site ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_subject_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x40),
  "Clinical Trial Subject ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_clinical_trial_subject_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x41),
  "Issuer of Clinical Trial Subject ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_subject_reading_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x42),
  "Clinical Trial Subject Reading ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_clinical_trial_subject_reading_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x43),
  "Issuer of Clinical Trial Subject Reading ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_time_point_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x50),
  "Clinical Trial Time Point ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_time_point_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x51),
  "Clinical Trial Time Point Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const longitudinal_temporal_offset_from_event = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x52),
  "Longitudinal Temporal Offset from Event",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const longitudinal_temporal_event_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x53),
  "Longitudinal Temporal Event Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const clinical_trial_time_point_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x54),
  "Clinical Trial Time Point Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const issuer_of_clinical_trial_time_point_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x55),
  "Issuer of Clinical Trial Time Point ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_coordinating_center_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x60),
  "Clinical Trial Coordinating Center Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_identity_removed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x62),
  "Patient Identity Removed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const deidentification_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x63),
  "De-identification Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const deidentification_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x64),
  "De-identification Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const clinical_trial_series_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x71),
  "Clinical Trial Series ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_series_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x72),
  "Clinical Trial Series Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_clinical_trial_series_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x73),
  "Issuer of Clinical Trial Series ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_protocol_ethics_committee_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x81),
  "Clinical Trial Protocol Ethics Committee Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const clinical_trial_protocol_ethics_committee_approval_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x82),
  "Clinical Trial Protocol Ethics Committee Approval Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const consent_for_clinical_trial_use_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x83),
  "Consent for Clinical Trial Use Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const distribution_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x84),
  "Distribution Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const consent_for_distribution_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x85),
  "Consent for Distribution Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ethics_committee_approval_effectiveness_start_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x86),
  "Ethics Committee Approval Effectiveness Start Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const ethics_committee_approval_effectiveness_end_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x12, 0x87),
  "Ethics Committee Approval Effectiveness End Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

function find_element_in_group_0012(element) {
  if (element === 0x10) {
    return new Ok(clinical_trial_sponsor_name);
  } else if (element === 0x20) {
    return new Ok(clinical_trial_protocol_id);
  } else if (element === 0x21) {
    return new Ok(clinical_trial_protocol_name);
  } else if (element === 0x22) {
    return new Ok(issuer_of_clinical_trial_protocol_id);
  } else if (element === 0x23) {
    return new Ok(other_clinical_trial_protocol_ids_sequence);
  } else if (element === 0x30) {
    return new Ok(clinical_trial_site_id);
  } else if (element === 0x31) {
    return new Ok(clinical_trial_site_name);
  } else if (element === 0x32) {
    return new Ok(issuer_of_clinical_trial_site_id);
  } else if (element === 0x40) {
    return new Ok(clinical_trial_subject_id);
  } else if (element === 0x41) {
    return new Ok(issuer_of_clinical_trial_subject_id);
  } else if (element === 0x42) {
    return new Ok(clinical_trial_subject_reading_id);
  } else if (element === 0x43) {
    return new Ok(issuer_of_clinical_trial_subject_reading_id);
  } else if (element === 0x50) {
    return new Ok(clinical_trial_time_point_id);
  } else if (element === 0x51) {
    return new Ok(clinical_trial_time_point_description);
  } else if (element === 0x52) {
    return new Ok(longitudinal_temporal_offset_from_event);
  } else if (element === 0x53) {
    return new Ok(longitudinal_temporal_event_type);
  } else if (element === 0x54) {
    return new Ok(clinical_trial_time_point_type_code_sequence);
  } else if (element === 0x55) {
    return new Ok(issuer_of_clinical_trial_time_point_id);
  } else if (element === 0x60) {
    return new Ok(clinical_trial_coordinating_center_name);
  } else if (element === 0x62) {
    return new Ok(patient_identity_removed);
  } else if (element === 0x63) {
    return new Ok(deidentification_method);
  } else if (element === 0x64) {
    return new Ok(deidentification_method_code_sequence);
  } else if (element === 0x71) {
    return new Ok(clinical_trial_series_id);
  } else if (element === 0x72) {
    return new Ok(clinical_trial_series_description);
  } else if (element === 0x73) {
    return new Ok(issuer_of_clinical_trial_series_id);
  } else if (element === 0x81) {
    return new Ok(clinical_trial_protocol_ethics_committee_name);
  } else if (element === 0x82) {
    return new Ok(clinical_trial_protocol_ethics_committee_approval_number);
  } else if (element === 0x83) {
    return new Ok(consent_for_clinical_trial_use_sequence);
  } else if (element === 0x84) {
    return new Ok(distribution_type);
  } else if (element === 0x85) {
    return new Ok(consent_for_distribution_flag);
  } else if (element === 0x86) {
    return new Ok(ethics_committee_approval_effectiveness_start_date);
  } else if (element === 0x87) {
    return new Ok(ethics_committee_approval_effectiveness_end_date);
  } else {
    return new Error(undefined);
  }
}

export const cad_file_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x23),
  "CAD File Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const component_reference_system = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x24),
  "Component Reference System",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const component_manufacturing_procedure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x25),
  "Component Manufacturing Procedure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const component_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x28),
  "Component Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const material_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x30),
  "Material Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const material_pipe_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x32),
  "Material Pipe Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const material_isolation_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x34),
  "Material Isolation Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const material_grade = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x42),
  "Material Grade",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const material_properties_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x44),
  "Material Properties Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const material_properties_file_format_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x45),
  "Material Properties File Format (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const material_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x46),
  "Material Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const component_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x50),
  "Component Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const curvature_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x52),
  "Curvature Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const outer_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x54),
  "Outer Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const inner_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x56),
  "Inner Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const component_welder_ids = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x100),
  "Component Welder IDs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const secondary_approval_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x101),
  "Secondary Approval Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const secondary_review_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x102),
  "Secondary Review Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const secondary_review_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x103),
  "Secondary Review Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const secondary_reviewer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x104),
  "Secondary Reviewer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const repair_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x105),
  "Repair ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const multiple_component_approval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x106),
  "Multiple Component Approval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const other_approval_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x107),
  "Other Approval Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const other_secondary_approval_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x108),
  "Other Secondary Approval Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const data_element_label_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x200),
  "Data Element Label Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const data_element_label_item_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x201),
  "Data Element Label Item Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const data_element = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x202),
  "Data Element",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const data_element_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x203),
  "Data Element Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const data_element_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x204),
  "Data Element Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const data_element_conditionality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x205),
  "Data Element Conditionality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const data_element_minimum_characters = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x206),
  "Data Element Minimum Characters",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const data_element_maximum_characters = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x207),
  "Data Element Maximum Characters",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const actual_environmental_conditions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x1010),
  "Actual Environmental Conditions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const expiry_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x1020),
  "Expiry Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const environmental_conditions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x1040),
  "Environmental Conditions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const evaluator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2002),
  "Evaluator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const evaluator_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2004),
  "Evaluator Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const evaluator_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2006),
  "Evaluator Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const evaluation_attempt = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2008),
  "Evaluation Attempt",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const indication_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2012),
  "Indication Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const indication_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2014),
  "Indication Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const indication_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2016),
  "Indication Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const indication_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2018),
  "Indication Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const indication_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x201A),
  "Indication Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const indication_disposition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x201C),
  "Indication Disposition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const indication_roi_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x201E),
  "Indication ROI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const indication_physical_property_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2030),
  "Indication Physical Property Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const property_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2032),
  "Property Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const coordinate_system_number_of_axes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2202),
  "Coordinate System Number of Axes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const coordinate_system_axes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2204),
  "Coordinate System Axes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const coordinate_system_axis_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2206),
  "Coordinate System Axis Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const coordinate_system_data_set_mapping = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2208),
  "Coordinate System Data Set Mapping",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const coordinate_system_axis_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x220A),
  "Coordinate System Axis Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const coordinate_system_axis_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x220C),
  "Coordinate System Axis Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const coordinate_system_axis_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x220E),
  "Coordinate System Axis Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const coordinate_system_axis_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2210),
  "Coordinate System Axis Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const coordinate_system_transform_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2220),
  "Coordinate System Transform Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transform_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2222),
  "Transform Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const transform_number_of_axes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2224),
  "Transform Number of Axes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const transform_order_of_axes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2226),
  "Transform Order of Axes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const transformed_axis_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x2228),
  "Transformed Axis Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const coordinate_system_transform_rotation_and_scale_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x222A),
  "Coordinate System Transform Rotation and Scale Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const coordinate_system_transform_translation_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x222C),
  "Coordinate System Transform Translation Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const internal_detector_frame_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3011),
  "Internal Detector Frame Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const number_of_frames_integrated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3012),
  "Number of Frames Integrated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const detector_temperature_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3020),
  "Detector Temperature Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const sensor_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3022),
  "Sensor Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const horizontal_offset_of_sensor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3024),
  "Horizontal Offset of Sensor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const vertical_offset_of_sensor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3026),
  "Vertical Offset of Sensor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const sensor_temperature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3028),
  "Sensor Temperature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dark_current_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3040),
  "Dark Current Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dark_current_counts = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3050),
  "Dark Current Counts",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const gain_correction_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3060),
  "Gain Correction Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const air_counts = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3070),
  "Air Counts",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const kv_used_in_gain_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3071),
  "KV Used in Gain Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const ma_used_in_gain_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3072),
  "MA Used in Gain Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const number_of_frames_used_for_integration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3073),
  "Number of Frames Used for Integration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const filter_material_used_in_gain_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3074),
  "Filter Material Used in Gain Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const filter_thickness_used_in_gain_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3075),
  "Filter Thickness Used in Gain Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const date_of_gain_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3076),
  "Date of Gain Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const time_of_gain_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3077),
  "Time of Gain Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const bad_pixel_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3080),
  "Bad Pixel Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const calibration_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3099),
  "Calibration Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const linearity_correction_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3100),
  "Linearity Correction Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const beam_hardening_correction_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x3101),
  "Beam Hardening Correction Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const pulser_equipment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4002),
  "Pulser Equipment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pulser_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4004),
  "Pulser Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pulser_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4006),
  "Pulser Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const receiver_equipment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4008),
  "Receiver Equipment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const amplifier_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x400A),
  "Amplifier Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const receiver_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x400C),
  "Receiver Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const pre_amplifier_equipment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x400E),
  "Pre-Amplifier Equipment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pre_amplifier_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x400F),
  "Pre-Amplifier Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const transmit_transducer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4010),
  "Transmit Transducer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const receive_transducer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4011),
  "Receive Transducer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_elements = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4012),
  "Number of Elements",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const element_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4013),
  "Element Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const element_dimension_a = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4014),
  "Element Dimension A",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const element_dimension_b = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4015),
  "Element Dimension B",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const element_pitch_a = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4016),
  "Element Pitch A",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const measured_beam_dimension_a = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4017),
  "Measured Beam Dimension A",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const measured_beam_dimension_b = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4018),
  "Measured Beam Dimension B",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const location_of_measured_beam_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4019),
  "Location of Measured Beam Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const nominal_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x401A),
  "Nominal Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const measured_center_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x401B),
  "Measured Center Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const measured_bandwidth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x401C),
  "Measured Bandwidth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const element_pitch_b = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x401D),
  "Element Pitch B",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const pulser_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4020),
  "Pulser Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pulse_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4022),
  "Pulse Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const excitation_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4024),
  "Excitation Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const modulation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4026),
  "Modulation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const damping = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4028),
  "Damping",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const receiver_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4030),
  "Receiver Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquired_soundpath_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4031),
  "Acquired Soundpath Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const acquisition_compression_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4032),
  "Acquisition Compression Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acquisition_sample_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4033),
  "Acquisition Sample Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const rectifier_smoothing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4034),
  "Rectifier Smoothing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dac_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4035),
  "DAC Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dac_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4036),
  "DAC Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dac_gain_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4038),
  "DAC Gain Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const dac_time_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x403A),
  "DAC Time Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const dac_amplitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x403C),
  "DAC Amplitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const pre_amplifier_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4040),
  "Pre-Amplifier Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transmit_transducer_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4050),
  "Transmit Transducer Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const receive_transducer_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4051),
  "Receive Transducer Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const incident_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4052),
  "Incident Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const coupling_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4054),
  "Coupling Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const coupling_medium = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4056),
  "Coupling Medium",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const coupling_velocity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4057),
  "Coupling Velocity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const probe_center_location_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4058),
  "Probe Center Location X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const probe_center_location_z = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4059),
  "Probe Center Location Z",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const sound_path_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x405A),
  "Sound Path Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delay_law_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x405C),
  "Delay Law Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const gate_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4060),
  "Gate Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const gate_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4062),
  "Gate Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const velocity_of_sound = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4064),
  "Velocity of Sound",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const calibration_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4070),
  "Calibration Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const calibration_procedure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4072),
  "Calibration Procedure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const procedure_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4074),
  "Procedure Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const procedure_creation_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4076),
  "Procedure Creation Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const procedure_expiration_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4078),
  "Procedure Expiration Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const procedure_last_modified_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x407A),
  "Procedure Last Modified Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const calibration_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x407C),
  "Calibration Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1_to_n,
);

export const calibration_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x407E),
  "Calibration Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1_to_n,
);

export const probe_drive_equipment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4080),
  "Probe Drive Equipment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const drive_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4081),
  "Drive Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const probe_drive_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4082),
  "Probe Drive Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const drive_probe_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4083),
  "Drive Probe Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const probe_inductance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4084),
  "Probe Inductance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const probe_resistance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4085),
  "Probe Resistance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const receive_probe_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4086),
  "Receive Probe Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const probe_drive_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4087),
  "Probe Drive Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const bridge_resistors = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4088),
  "Bridge Resistors",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const probe_orientation_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4089),
  "Probe Orientation Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const user_selected_gain_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x408B),
  "User Selected Gain Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const user_selected_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x408C),
  "User Selected Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const user_selected_offset_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x408D),
  "User Selected Offset X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const user_selected_offset_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x408E),
  "User Selected Offset Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4091),
  "Channel Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x4092),
  "Channel Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const scanner_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x409A),
  "Scanner Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scan_procedure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x409B),
  "Scan Procedure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const translation_rate_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x409C),
  "Translation Rate X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const translation_rate_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x409D),
  "Translation Rate Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_overlap = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x409F),
  "Channel Overlap",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const image_quality_indicator_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x40A0),
  "Image Quality Indicator Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const image_quality_indicator_material = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x40A1),
  "Image Quality Indicator Material",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const image_quality_indicator_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x40A2),
  "Image Quality Indicator Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const linac_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5002),
  "LINAC Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const linac_output = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5004),
  "LINAC Output",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const active_aperture = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5100),
  "Active Aperture",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const total_aperture = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5101),
  "Total Aperture",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const aperture_elevation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5102),
  "Aperture Elevation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const main_lobe_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5103),
  "Main Lobe Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const main_roof_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5104),
  "Main Roof Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const connector_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5105),
  "Connector Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const wedge_model_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5106),
  "Wedge Model Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const wedge_angle_float = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5107),
  "Wedge Angle Float",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_roof_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5108),
  "Wedge Roof Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_element_1_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5109),
  "Wedge Element 1 Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const wedge_material_velocity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x510A),
  "Wedge Material Velocity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_material = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x510B),
  "Wedge Material",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const wedge_offset_z = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x510C),
  "Wedge Offset Z",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_origin_offset_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x510D),
  "Wedge Origin Offset X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_time_delay = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x510E),
  "Wedge Time Delay",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x510F),
  "Wedge Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const wedge_manufacturer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5110),
  "Wedge Manufacturer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const wedge_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5111),
  "Wedge Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const nominal_beam_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5112),
  "Nominal Beam Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_offset_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5113),
  "Wedge Offset X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_offset_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5114),
  "Wedge Offset Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_total_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5115),
  "Wedge Total Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_in_contact_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5116),
  "Wedge In Contact Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_front_gap = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5117),
  "Wedge Front Gap",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_total_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5118),
  "Wedge Total Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_front_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x5119),
  "Wedge Front Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_rear_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x511A),
  "Wedge Rear Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_total_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x511B),
  "Wedge Total Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_in_contact_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x511C),
  "Wedge In Contact Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_chamfer_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x511D),
  "Wedge Chamfer Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_curve = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x511E),
  "Wedge Curve",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const radius_along_wedge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x14, 0x511F),
  "Radius Along the Wedge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

function find_element_in_group_0014(element) {
  if (element === 0x23) {
    return new Ok(cad_file_format);
  } else if (element === 0x24) {
    return new Ok(component_reference_system);
  } else if (element === 0x25) {
    return new Ok(component_manufacturing_procedure);
  } else if (element === 0x28) {
    return new Ok(component_manufacturer);
  } else if (element === 0x30) {
    return new Ok(material_thickness);
  } else if (element === 0x32) {
    return new Ok(material_pipe_diameter);
  } else if (element === 0x34) {
    return new Ok(material_isolation_diameter);
  } else if (element === 0x42) {
    return new Ok(material_grade);
  } else if (element === 0x44) {
    return new Ok(material_properties_description);
  } else if (element === 0x45) {
    return new Ok(material_properties_file_format_retired);
  } else if (element === 0x46) {
    return new Ok(material_notes);
  } else if (element === 0x50) {
    return new Ok(component_shape);
  } else if (element === 0x52) {
    return new Ok(curvature_type);
  } else if (element === 0x54) {
    return new Ok(outer_diameter);
  } else if (element === 0x56) {
    return new Ok(inner_diameter);
  } else if (element === 0x100) {
    return new Ok(component_welder_ids);
  } else if (element === 0x101) {
    return new Ok(secondary_approval_status);
  } else if (element === 0x102) {
    return new Ok(secondary_review_date);
  } else if (element === 0x103) {
    return new Ok(secondary_review_time);
  } else if (element === 0x104) {
    return new Ok(secondary_reviewer_name);
  } else if (element === 0x105) {
    return new Ok(repair_id);
  } else if (element === 0x106) {
    return new Ok(multiple_component_approval_sequence);
  } else if (element === 0x107) {
    return new Ok(other_approval_status);
  } else if (element === 0x108) {
    return new Ok(other_secondary_approval_status);
  } else if (element === 0x200) {
    return new Ok(data_element_label_sequence);
  } else if (element === 0x201) {
    return new Ok(data_element_label_item_sequence);
  } else if (element === 0x202) {
    return new Ok(data_element);
  } else if (element === 0x203) {
    return new Ok(data_element_name);
  } else if (element === 0x204) {
    return new Ok(data_element_description);
  } else if (element === 0x205) {
    return new Ok(data_element_conditionality);
  } else if (element === 0x206) {
    return new Ok(data_element_minimum_characters);
  } else if (element === 0x207) {
    return new Ok(data_element_maximum_characters);
  } else if (element === 0x1010) {
    return new Ok(actual_environmental_conditions);
  } else if (element === 0x1020) {
    return new Ok(expiry_date);
  } else if (element === 0x1040) {
    return new Ok(environmental_conditions);
  } else if (element === 0x2002) {
    return new Ok(evaluator_sequence);
  } else if (element === 0x2004) {
    return new Ok(evaluator_number);
  } else if (element === 0x2006) {
    return new Ok(evaluator_name);
  } else if (element === 0x2008) {
    return new Ok(evaluation_attempt);
  } else if (element === 0x2012) {
    return new Ok(indication_sequence);
  } else if (element === 0x2014) {
    return new Ok(indication_number);
  } else if (element === 0x2016) {
    return new Ok(indication_label);
  } else if (element === 0x2018) {
    return new Ok(indication_description);
  } else if (element === 0x201A) {
    return new Ok(indication_type);
  } else if (element === 0x201C) {
    return new Ok(indication_disposition);
  } else if (element === 0x201E) {
    return new Ok(indication_roi_sequence);
  } else if (element === 0x2030) {
    return new Ok(indication_physical_property_sequence);
  } else if (element === 0x2032) {
    return new Ok(property_label);
  } else if (element === 0x2202) {
    return new Ok(coordinate_system_number_of_axes);
  } else if (element === 0x2204) {
    return new Ok(coordinate_system_axes_sequence);
  } else if (element === 0x2206) {
    return new Ok(coordinate_system_axis_description);
  } else if (element === 0x2208) {
    return new Ok(coordinate_system_data_set_mapping);
  } else if (element === 0x220A) {
    return new Ok(coordinate_system_axis_number);
  } else if (element === 0x220C) {
    return new Ok(coordinate_system_axis_type);
  } else if (element === 0x220E) {
    return new Ok(coordinate_system_axis_units);
  } else if (element === 0x2210) {
    return new Ok(coordinate_system_axis_values);
  } else if (element === 0x2220) {
    return new Ok(coordinate_system_transform_sequence);
  } else if (element === 0x2222) {
    return new Ok(transform_description);
  } else if (element === 0x2224) {
    return new Ok(transform_number_of_axes);
  } else if (element === 0x2226) {
    return new Ok(transform_order_of_axes);
  } else if (element === 0x2228) {
    return new Ok(transformed_axis_units);
  } else if (element === 0x222A) {
    return new Ok(coordinate_system_transform_rotation_and_scale_matrix);
  } else if (element === 0x222C) {
    return new Ok(coordinate_system_transform_translation_matrix);
  } else if (element === 0x3011) {
    return new Ok(internal_detector_frame_time);
  } else if (element === 0x3012) {
    return new Ok(number_of_frames_integrated);
  } else if (element === 0x3020) {
    return new Ok(detector_temperature_sequence);
  } else if (element === 0x3022) {
    return new Ok(sensor_name);
  } else if (element === 0x3024) {
    return new Ok(horizontal_offset_of_sensor);
  } else if (element === 0x3026) {
    return new Ok(vertical_offset_of_sensor);
  } else if (element === 0x3028) {
    return new Ok(sensor_temperature);
  } else if (element === 0x3040) {
    return new Ok(dark_current_sequence);
  } else if (element === 0x3050) {
    return new Ok(dark_current_counts);
  } else if (element === 0x3060) {
    return new Ok(gain_correction_reference_sequence);
  } else if (element === 0x3070) {
    return new Ok(air_counts);
  } else if (element === 0x3071) {
    return new Ok(kv_used_in_gain_calibration);
  } else if (element === 0x3072) {
    return new Ok(ma_used_in_gain_calibration);
  } else if (element === 0x3073) {
    return new Ok(number_of_frames_used_for_integration);
  } else if (element === 0x3074) {
    return new Ok(filter_material_used_in_gain_calibration);
  } else if (element === 0x3075) {
    return new Ok(filter_thickness_used_in_gain_calibration);
  } else if (element === 0x3076) {
    return new Ok(date_of_gain_calibration);
  } else if (element === 0x3077) {
    return new Ok(time_of_gain_calibration);
  } else if (element === 0x3080) {
    return new Ok(bad_pixel_image);
  } else if (element === 0x3099) {
    return new Ok(calibration_notes);
  } else if (element === 0x3100) {
    return new Ok(linearity_correction_technique);
  } else if (element === 0x3101) {
    return new Ok(beam_hardening_correction_technique);
  } else if (element === 0x4002) {
    return new Ok(pulser_equipment_sequence);
  } else if (element === 0x4004) {
    return new Ok(pulser_type);
  } else if (element === 0x4006) {
    return new Ok(pulser_notes);
  } else if (element === 0x4008) {
    return new Ok(receiver_equipment_sequence);
  } else if (element === 0x400A) {
    return new Ok(amplifier_type);
  } else if (element === 0x400C) {
    return new Ok(receiver_notes);
  } else if (element === 0x400E) {
    return new Ok(pre_amplifier_equipment_sequence);
  } else if (element === 0x400F) {
    return new Ok(pre_amplifier_notes);
  } else if (element === 0x4010) {
    return new Ok(transmit_transducer_sequence);
  } else if (element === 0x4011) {
    return new Ok(receive_transducer_sequence);
  } else if (element === 0x4012) {
    return new Ok(number_of_elements);
  } else if (element === 0x4013) {
    return new Ok(element_shape);
  } else if (element === 0x4014) {
    return new Ok(element_dimension_a);
  } else if (element === 0x4015) {
    return new Ok(element_dimension_b);
  } else if (element === 0x4016) {
    return new Ok(element_pitch_a);
  } else if (element === 0x4017) {
    return new Ok(measured_beam_dimension_a);
  } else if (element === 0x4018) {
    return new Ok(measured_beam_dimension_b);
  } else if (element === 0x4019) {
    return new Ok(location_of_measured_beam_diameter);
  } else if (element === 0x401A) {
    return new Ok(nominal_frequency);
  } else if (element === 0x401B) {
    return new Ok(measured_center_frequency);
  } else if (element === 0x401C) {
    return new Ok(measured_bandwidth);
  } else if (element === 0x401D) {
    return new Ok(element_pitch_b);
  } else if (element === 0x4020) {
    return new Ok(pulser_settings_sequence);
  } else if (element === 0x4022) {
    return new Ok(pulse_width);
  } else if (element === 0x4024) {
    return new Ok(excitation_frequency);
  } else if (element === 0x4026) {
    return new Ok(modulation_type);
  } else if (element === 0x4028) {
    return new Ok(damping);
  } else if (element === 0x4030) {
    return new Ok(receiver_settings_sequence);
  } else if (element === 0x4031) {
    return new Ok(acquired_soundpath_length);
  } else if (element === 0x4032) {
    return new Ok(acquisition_compression_type);
  } else if (element === 0x4033) {
    return new Ok(acquisition_sample_size);
  } else if (element === 0x4034) {
    return new Ok(rectifier_smoothing);
  } else if (element === 0x4035) {
    return new Ok(dac_sequence);
  } else if (element === 0x4036) {
    return new Ok(dac_type);
  } else if (element === 0x4038) {
    return new Ok(dac_gain_points);
  } else if (element === 0x403A) {
    return new Ok(dac_time_points);
  } else if (element === 0x403C) {
    return new Ok(dac_amplitude);
  } else if (element === 0x4040) {
    return new Ok(pre_amplifier_settings_sequence);
  } else if (element === 0x4050) {
    return new Ok(transmit_transducer_settings_sequence);
  } else if (element === 0x4051) {
    return new Ok(receive_transducer_settings_sequence);
  } else if (element === 0x4052) {
    return new Ok(incident_angle);
  } else if (element === 0x4054) {
    return new Ok(coupling_technique);
  } else if (element === 0x4056) {
    return new Ok(coupling_medium);
  } else if (element === 0x4057) {
    return new Ok(coupling_velocity);
  } else if (element === 0x4058) {
    return new Ok(probe_center_location_x);
  } else if (element === 0x4059) {
    return new Ok(probe_center_location_z);
  } else if (element === 0x405A) {
    return new Ok(sound_path_length);
  } else if (element === 0x405C) {
    return new Ok(delay_law_identifier);
  } else if (element === 0x4060) {
    return new Ok(gate_settings_sequence);
  } else if (element === 0x4062) {
    return new Ok(gate_threshold);
  } else if (element === 0x4064) {
    return new Ok(velocity_of_sound);
  } else if (element === 0x4070) {
    return new Ok(calibration_settings_sequence);
  } else if (element === 0x4072) {
    return new Ok(calibration_procedure);
  } else if (element === 0x4074) {
    return new Ok(procedure_version);
  } else if (element === 0x4076) {
    return new Ok(procedure_creation_date);
  } else if (element === 0x4078) {
    return new Ok(procedure_expiration_date);
  } else if (element === 0x407A) {
    return new Ok(procedure_last_modified_date);
  } else if (element === 0x407C) {
    return new Ok(calibration_time);
  } else if (element === 0x407E) {
    return new Ok(calibration_date);
  } else if (element === 0x4080) {
    return new Ok(probe_drive_equipment_sequence);
  } else if (element === 0x4081) {
    return new Ok(drive_type);
  } else if (element === 0x4082) {
    return new Ok(probe_drive_notes);
  } else if (element === 0x4083) {
    return new Ok(drive_probe_sequence);
  } else if (element === 0x4084) {
    return new Ok(probe_inductance);
  } else if (element === 0x4085) {
    return new Ok(probe_resistance);
  } else if (element === 0x4086) {
    return new Ok(receive_probe_sequence);
  } else if (element === 0x4087) {
    return new Ok(probe_drive_settings_sequence);
  } else if (element === 0x4088) {
    return new Ok(bridge_resistors);
  } else if (element === 0x4089) {
    return new Ok(probe_orientation_angle);
  } else if (element === 0x408B) {
    return new Ok(user_selected_gain_y);
  } else if (element === 0x408C) {
    return new Ok(user_selected_phase);
  } else if (element === 0x408D) {
    return new Ok(user_selected_offset_x);
  } else if (element === 0x408E) {
    return new Ok(user_selected_offset_y);
  } else if (element === 0x4091) {
    return new Ok(channel_settings_sequence);
  } else if (element === 0x4092) {
    return new Ok(channel_threshold);
  } else if (element === 0x409A) {
    return new Ok(scanner_settings_sequence);
  } else if (element === 0x409B) {
    return new Ok(scan_procedure);
  } else if (element === 0x409C) {
    return new Ok(translation_rate_x);
  } else if (element === 0x409D) {
    return new Ok(translation_rate_y);
  } else if (element === 0x409F) {
    return new Ok(channel_overlap);
  } else if (element === 0x40A0) {
    return new Ok(image_quality_indicator_type);
  } else if (element === 0x40A1) {
    return new Ok(image_quality_indicator_material);
  } else if (element === 0x40A2) {
    return new Ok(image_quality_indicator_size);
  } else if (element === 0x5002) {
    return new Ok(linac_energy);
  } else if (element === 0x5004) {
    return new Ok(linac_output);
  } else if (element === 0x5100) {
    return new Ok(active_aperture);
  } else if (element === 0x5101) {
    return new Ok(total_aperture);
  } else if (element === 0x5102) {
    return new Ok(aperture_elevation);
  } else if (element === 0x5103) {
    return new Ok(main_lobe_angle);
  } else if (element === 0x5104) {
    return new Ok(main_roof_angle);
  } else if (element === 0x5105) {
    return new Ok(connector_type);
  } else if (element === 0x5106) {
    return new Ok(wedge_model_number);
  } else if (element === 0x5107) {
    return new Ok(wedge_angle_float);
  } else if (element === 0x5108) {
    return new Ok(wedge_roof_angle);
  } else if (element === 0x5109) {
    return new Ok(wedge_element_1_position);
  } else if (element === 0x510A) {
    return new Ok(wedge_material_velocity);
  } else if (element === 0x510B) {
    return new Ok(wedge_material);
  } else if (element === 0x510C) {
    return new Ok(wedge_offset_z);
  } else if (element === 0x510D) {
    return new Ok(wedge_origin_offset_x);
  } else if (element === 0x510E) {
    return new Ok(wedge_time_delay);
  } else if (element === 0x510F) {
    return new Ok(wedge_name);
  } else if (element === 0x5110) {
    return new Ok(wedge_manufacturer_name);
  } else if (element === 0x5111) {
    return new Ok(wedge_description);
  } else if (element === 0x5112) {
    return new Ok(nominal_beam_angle);
  } else if (element === 0x5113) {
    return new Ok(wedge_offset_x);
  } else if (element === 0x5114) {
    return new Ok(wedge_offset_y);
  } else if (element === 0x5115) {
    return new Ok(wedge_total_length);
  } else if (element === 0x5116) {
    return new Ok(wedge_in_contact_length);
  } else if (element === 0x5117) {
    return new Ok(wedge_front_gap);
  } else if (element === 0x5118) {
    return new Ok(wedge_total_height);
  } else if (element === 0x5119) {
    return new Ok(wedge_front_height);
  } else if (element === 0x511A) {
    return new Ok(wedge_rear_height);
  } else if (element === 0x511B) {
    return new Ok(wedge_total_width);
  } else if (element === 0x511C) {
    return new Ok(wedge_in_contact_width);
  } else if (element === 0x511D) {
    return new Ok(wedge_chamfer_height);
  } else if (element === 0x511E) {
    return new Ok(wedge_curve);
  } else if (element === 0x511F) {
    return new Ok(radius_along_wedge);
  } else {
    return new Error(undefined);
  }
}

export const white_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1),
  "White Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const primary_chromaticities = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x2),
  "Primary Chromaticities",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const battery_level = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x3),
  "Battery Level",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const exposure_time_in_seconds = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x4),
  "Exposure Time in Seconds",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const f_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x5),
  "F-Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const oecf_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x6),
  "OECF Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const oecf_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x7),
  "OECF Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const oecf_column_names = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x8),
  "OECF Column Names",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1_to_n,
);

export const oecf_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x9),
  "OECF Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const spatial_frequency_response_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0xA),
  "Spatial Frequency Response Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const spatial_frequency_response_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0xB),
  "Spatial Frequency Response Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const spatial_frequency_response_column_names = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0xC),
  "Spatial Frequency Response Column Names",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1_to_n,
);

export const spatial_frequency_response_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0xD),
  "Spatial Frequency Response Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const color_filter_array_pattern_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0xE),
  "Color Filter Array Pattern Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const color_filter_array_pattern_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0xF),
  "Color Filter Array Pattern Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const color_filter_array_pattern_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x10),
  "Color Filter Array Pattern Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const flash_firing_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x11),
  "Flash Firing Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const flash_return_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x12),
  "Flash Return Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const flash_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x13),
  "Flash Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const flash_function_present = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x14),
  "Flash Function Present",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const flash_red_eye_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x15),
  "Flash Red Eye Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const exposure_program = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x16),
  "Exposure Program",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const spectral_sensitivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x17),
  "Spectral Sensitivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const photographic_sensitivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x18),
  "Photographic Sensitivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const self_timer_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x19),
  "Self Timer Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const sensitivity_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1A),
  "Sensitivity Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const standard_output_sensitivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1B),
  "Standard Output Sensitivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const recommended_exposure_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1C),
  "Recommended Exposure Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const iso_speed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1D),
  "ISO Speed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const iso_speed_latitude_yyy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1E),
  "ISO Speed Latitude yyy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const iso_speed_latitude_zzz = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1F),
  "ISO Speed Latitude zzz",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const exif_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x20),
  "EXIF Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const shutter_speed_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x21),
  "Shutter Speed Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const aperture_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x22),
  "Aperture Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const brightness_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x23),
  "Brightness Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const exposure_bias_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x24),
  "Exposure Bias Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const max_aperture_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x25),
  "Max Aperture Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const subject_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x26),
  "Subject Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const metering_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x27),
  "Metering Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const light_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x28),
  "Light Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const focal_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x29),
  "Focal Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const subject_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x2A),
  "Subject Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  /* @__PURE__ */ new ValueMultiplicity(2, /* @__PURE__ */ new Some(4)),
);

export const maker_note = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x2B),
  "Maker Note",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const temperature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x30),
  "Temperature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const humidity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x31),
  "Humidity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const pressure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x32),
  "Pressure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const water_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x33),
  "Water Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const acceleration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x34),
  "Acceleration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const camera_elevation_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x35),
  "Camera Elevation Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const flash_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x36),
  "Flash Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_2,
);

export const subject_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x37),
  "Subject Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2,
);

export const photographic_exposure_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x38),
  "Photographic Exposure Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const sensing_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x39),
  "Sensing Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const file_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x3A),
  "File Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const scene_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x3B),
  "Scene Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const custom_rendered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x41),
  "Custom Rendered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const exposure_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x42),
  "Exposure Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const white_balance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x43),
  "White Balance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const digital_zoom_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x44),
  "Digital Zoom Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const focal_length_in_3_5mm_film = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x45),
  "Focal Length In 35mm Film",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const scene_capture_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x46),
  "Scene Capture Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const gain_control = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x47),
  "Gain Control",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const contrast = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x48),
  "Contrast",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const saturation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x49),
  "Saturation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const sharpness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x4A),
  "Sharpness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const device_setting_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x4B),
  "Device Setting Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const subject_distance_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x4C),
  "Subject Distance Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const camera_owner_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x4D),
  "Camera Owner Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const lens_specification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x4E),
  "Lens Specification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_4,
);

export const lens_make = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x4F),
  "Lens Make",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const lens_model = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x50),
  "Lens Model",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const lens_serial_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x51),
  "Lens Serial Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const interoperability_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x61),
  "Interoperability Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const interoperability_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x62),
  "Interoperability Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const gps_version_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x70),
  "GPS Version ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const gps_latitude_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x71),
  "GPS Latitude Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_latitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x72),
  "GPS Latitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const gps_longitude_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x73),
  "GPS Longitude Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_longitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x74),
  "GPS Longitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const gps_altitude_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x75),
  "GPS Altitude Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const gps_altitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x76),
  "GPS Altitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gps_time_stamp = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x77),
  "GPS Time Stamp",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const gps_satellites = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x78),
  "GPS Satellites",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const gps_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x79),
  "GPS Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_measure_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x7A),
  "GPS Measure Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gpsdop = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x7B),
  "GPS DOP",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gps_speed_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x7C),
  "GPS Speed Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_speed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x7D),
  "GPS Speed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gps_track_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x7E),
  "GPS Track Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_track = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x7F),
  "GPS Track",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gps_img_direction_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x80),
  "GPS Img Direction Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_img_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x81),
  "GPS Img Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gps_map_datum = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x82),
  "GPS Map Datum",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const gps_dest_latitude_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x83),
  "GPS Dest Latitude Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_dest_latitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x84),
  "GPS Dest Latitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const gps_dest_longitude_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x85),
  "GPS Dest Longitude Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_dest_longitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x86),
  "GPS Dest Longitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const gps_dest_bearing_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x87),
  "GPS Dest Bearing Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_dest_bearing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x88),
  "GPS Dest Bearing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gps_dest_distance_ref = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x89),
  "GPS Dest Distance Ref",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gps_dest_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x8A),
  "GPS Dest Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gps_processing_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x8B),
  "GPS Processing Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const gps_area_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x8C),
  "GPS Area Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const gps_date_stamp = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x8D),
  "GPS Date Stamp",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const gps_differential = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x8E),
  "GPS Differential",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const light_source_polarization = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1001),
  "Light Source Polarization",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const emitter_color_temperature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1002),
  "Emitter Color Temperature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const contact_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1003),
  "Contact Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const immersion_media = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1004),
  "Immersion Media",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const optical_magnification_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x16, 0x1005),
  "Optical Magnification Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

function find_element_in_group_0016(element) {
  if (element === 0x1) {
    return new Ok(white_point);
  } else if (element === 0x2) {
    return new Ok(primary_chromaticities);
  } else if (element === 0x3) {
    return new Ok(battery_level);
  } else if (element === 0x4) {
    return new Ok(exposure_time_in_seconds);
  } else if (element === 0x5) {
    return new Ok(f_number);
  } else if (element === 0x6) {
    return new Ok(oecf_rows);
  } else if (element === 0x7) {
    return new Ok(oecf_columns);
  } else if (element === 0x8) {
    return new Ok(oecf_column_names);
  } else if (element === 0x9) {
    return new Ok(oecf_values);
  } else if (element === 0xA) {
    return new Ok(spatial_frequency_response_rows);
  } else if (element === 0xB) {
    return new Ok(spatial_frequency_response_columns);
  } else if (element === 0xC) {
    return new Ok(spatial_frequency_response_column_names);
  } else if (element === 0xD) {
    return new Ok(spatial_frequency_response_values);
  } else if (element === 0xE) {
    return new Ok(color_filter_array_pattern_rows);
  } else if (element === 0xF) {
    return new Ok(color_filter_array_pattern_columns);
  } else if (element === 0x10) {
    return new Ok(color_filter_array_pattern_values);
  } else if (element === 0x11) {
    return new Ok(flash_firing_status);
  } else if (element === 0x12) {
    return new Ok(flash_return_status);
  } else if (element === 0x13) {
    return new Ok(flash_mode);
  } else if (element === 0x14) {
    return new Ok(flash_function_present);
  } else if (element === 0x15) {
    return new Ok(flash_red_eye_mode);
  } else if (element === 0x16) {
    return new Ok(exposure_program);
  } else if (element === 0x17) {
    return new Ok(spectral_sensitivity);
  } else if (element === 0x18) {
    return new Ok(photographic_sensitivity);
  } else if (element === 0x19) {
    return new Ok(self_timer_mode);
  } else if (element === 0x1A) {
    return new Ok(sensitivity_type);
  } else if (element === 0x1B) {
    return new Ok(standard_output_sensitivity);
  } else if (element === 0x1C) {
    return new Ok(recommended_exposure_index);
  } else if (element === 0x1D) {
    return new Ok(iso_speed);
  } else if (element === 0x1E) {
    return new Ok(iso_speed_latitude_yyy);
  } else if (element === 0x1F) {
    return new Ok(iso_speed_latitude_zzz);
  } else if (element === 0x20) {
    return new Ok(exif_version);
  } else if (element === 0x21) {
    return new Ok(shutter_speed_value);
  } else if (element === 0x22) {
    return new Ok(aperture_value);
  } else if (element === 0x23) {
    return new Ok(brightness_value);
  } else if (element === 0x24) {
    return new Ok(exposure_bias_value);
  } else if (element === 0x25) {
    return new Ok(max_aperture_value);
  } else if (element === 0x26) {
    return new Ok(subject_distance);
  } else if (element === 0x27) {
    return new Ok(metering_mode);
  } else if (element === 0x28) {
    return new Ok(light_source);
  } else if (element === 0x29) {
    return new Ok(focal_length);
  } else if (element === 0x2A) {
    return new Ok(subject_area);
  } else if (element === 0x2B) {
    return new Ok(maker_note);
  } else if (element === 0x30) {
    return new Ok(temperature);
  } else if (element === 0x31) {
    return new Ok(humidity);
  } else if (element === 0x32) {
    return new Ok(pressure);
  } else if (element === 0x33) {
    return new Ok(water_depth);
  } else if (element === 0x34) {
    return new Ok(acceleration);
  } else if (element === 0x35) {
    return new Ok(camera_elevation_angle);
  } else if (element === 0x36) {
    return new Ok(flash_energy);
  } else if (element === 0x37) {
    return new Ok(subject_location);
  } else if (element === 0x38) {
    return new Ok(photographic_exposure_index);
  } else if (element === 0x39) {
    return new Ok(sensing_method);
  } else if (element === 0x3A) {
    return new Ok(file_source);
  } else if (element === 0x3B) {
    return new Ok(scene_type);
  } else if (element === 0x41) {
    return new Ok(custom_rendered);
  } else if (element === 0x42) {
    return new Ok(exposure_mode);
  } else if (element === 0x43) {
    return new Ok(white_balance);
  } else if (element === 0x44) {
    return new Ok(digital_zoom_ratio);
  } else if (element === 0x45) {
    return new Ok(focal_length_in_3_5mm_film);
  } else if (element === 0x46) {
    return new Ok(scene_capture_type);
  } else if (element === 0x47) {
    return new Ok(gain_control);
  } else if (element === 0x48) {
    return new Ok(contrast);
  } else if (element === 0x49) {
    return new Ok(saturation);
  } else if (element === 0x4A) {
    return new Ok(sharpness);
  } else if (element === 0x4B) {
    return new Ok(device_setting_description);
  } else if (element === 0x4C) {
    return new Ok(subject_distance_range);
  } else if (element === 0x4D) {
    return new Ok(camera_owner_name);
  } else if (element === 0x4E) {
    return new Ok(lens_specification);
  } else if (element === 0x4F) {
    return new Ok(lens_make);
  } else if (element === 0x50) {
    return new Ok(lens_model);
  } else if (element === 0x51) {
    return new Ok(lens_serial_number);
  } else if (element === 0x61) {
    return new Ok(interoperability_index);
  } else if (element === 0x62) {
    return new Ok(interoperability_version);
  } else if (element === 0x70) {
    return new Ok(gps_version_id);
  } else if (element === 0x71) {
    return new Ok(gps_latitude_ref);
  } else if (element === 0x72) {
    return new Ok(gps_latitude);
  } else if (element === 0x73) {
    return new Ok(gps_longitude_ref);
  } else if (element === 0x74) {
    return new Ok(gps_longitude);
  } else if (element === 0x75) {
    return new Ok(gps_altitude_ref);
  } else if (element === 0x76) {
    return new Ok(gps_altitude);
  } else if (element === 0x77) {
    return new Ok(gps_time_stamp);
  } else if (element === 0x78) {
    return new Ok(gps_satellites);
  } else if (element === 0x79) {
    return new Ok(gps_status);
  } else if (element === 0x7A) {
    return new Ok(gps_measure_mode);
  } else if (element === 0x7B) {
    return new Ok(gpsdop);
  } else if (element === 0x7C) {
    return new Ok(gps_speed_ref);
  } else if (element === 0x7D) {
    return new Ok(gps_speed);
  } else if (element === 0x7E) {
    return new Ok(gps_track_ref);
  } else if (element === 0x7F) {
    return new Ok(gps_track);
  } else if (element === 0x80) {
    return new Ok(gps_img_direction_ref);
  } else if (element === 0x81) {
    return new Ok(gps_img_direction);
  } else if (element === 0x82) {
    return new Ok(gps_map_datum);
  } else if (element === 0x83) {
    return new Ok(gps_dest_latitude_ref);
  } else if (element === 0x84) {
    return new Ok(gps_dest_latitude);
  } else if (element === 0x85) {
    return new Ok(gps_dest_longitude_ref);
  } else if (element === 0x86) {
    return new Ok(gps_dest_longitude);
  } else if (element === 0x87) {
    return new Ok(gps_dest_bearing_ref);
  } else if (element === 0x88) {
    return new Ok(gps_dest_bearing);
  } else if (element === 0x89) {
    return new Ok(gps_dest_distance_ref);
  } else if (element === 0x8A) {
    return new Ok(gps_dest_distance);
  } else if (element === 0x8B) {
    return new Ok(gps_processing_method);
  } else if (element === 0x8C) {
    return new Ok(gps_area_information);
  } else if (element === 0x8D) {
    return new Ok(gps_date_stamp);
  } else if (element === 0x8E) {
    return new Ok(gps_differential);
  } else if (element === 0x1001) {
    return new Ok(light_source_polarization);
  } else if (element === 0x1002) {
    return new Ok(emitter_color_temperature);
  } else if (element === 0x1003) {
    return new Ok(contact_method);
  } else if (element === 0x1004) {
    return new Ok(immersion_media);
  } else if (element === 0x1005) {
    return new Ok(optical_magnification_factor);
  } else {
    return new Error(undefined);
  }
}

export const contrast_bolus_agent = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x10),
  "Contrast/Bolus Agent",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const contrast_bolus_agent_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x12),
  "Contrast/Bolus Agent Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contrast_bolus_t1_relaxivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x13),
  "Contrast/Bolus T1 Relaxivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const contrast_bolus_administration_route_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x14),
  "Contrast/Bolus Administration Route Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const body_part_examined = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x15),
  "Body Part Examined",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scanning_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x20),
  "Scanning Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const sequence_variant = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x21),
  "Sequence Variant",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const scan_options = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x22),
  "Scan Options",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const mr_acquisition_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x23),
  "MR Acquisition Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const sequence_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x24),
  "Sequence Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const angio_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x25),
  "Angio Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const intervention_drug_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x26),
  "Intervention Drug Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const intervention_drug_stop_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x27),
  "Intervention Drug Stop Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const intervention_drug_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x28),
  "Intervention Drug Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const intervention_drug_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x29),
  "Intervention Drug Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const additional_drug_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2A),
  "Additional Drug Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radionuclide = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x30),
  "Radionuclide",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const radiopharmaceutical = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x31),
  "Radiopharmaceutical",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const energy_window_centerline = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x32),
  "Energy Window Centerline",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const energy_window_total_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x33),
  "Energy Window Total Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const intervention_drug_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x34),
  "Intervention Drug Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const intervention_drug_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x35),
  "Intervention Drug Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const intervention_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x36),
  "Intervention Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const therapy_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x37),
  "Therapy Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const intervention_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x38),
  "Intervention Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const therapy_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x39),
  "Therapy Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const intervention_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x3A),
  "Intervention Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const cine_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x40),
  "Cine Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const initial_cine_run_state = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x42),
  "Initial Cine Run State",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const slice_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x50),
  "Slice Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const kvp = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x60),
  "KVP",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const counts_accumulated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x70),
  "Counts Accumulated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const acquisition_termination_condition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x71),
  "Acquisition Termination Condition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const effective_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x72),
  "Effective Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const acquisition_start_condition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x73),
  "Acquisition Start Condition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acquisition_start_condition_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x74),
  "Acquisition Start Condition Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const acquisition_termination_condition_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x75),
  "Acquisition Termination Condition Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const repetition_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x80),
  "Repetition Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const echo_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x81),
  "Echo Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const inversion_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x82),
  "Inversion Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const number_of_averages = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x83),
  "Number of Averages",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const imaging_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x84),
  "Imaging Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const imaged_nucleus = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x85),
  "Imaged Nucleus",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const echo_numbers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x86),
  "Echo Number(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const magnetic_field_strength = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x87),
  "Magnetic Field Strength",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const spacing_between_slices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x88),
  "Spacing Between Slices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const number_of_phase_encoding_steps = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x89),
  "Number of Phase Encoding Steps",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const data_collection_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x90),
  "Data Collection Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const echo_train_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x91),
  "Echo Train Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const percent_sampling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x93),
  "Percent Sampling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const percent_phase_field_of_view = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x94),
  "Percent Phase Field of View",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const pixel_bandwidth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x95),
  "Pixel Bandwidth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const device_serial_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1000),
  "Device Serial Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const device_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1002),
  "Device UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const device_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1003),
  "Device ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const plate_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1004),
  "Plate ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const generator_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1005),
  "Generator ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const grid_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1006),
  "Grid ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const cassette_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1007),
  "Cassette ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const gantry_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1008),
  "Gantry ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const unique_device_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1009),
  "Unique Device Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const udi_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x100A),
  "UDI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const manufacturer_device_class_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x100B),
  "Manufacturer's Device Class UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const secondary_capture_device_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1010),
  "Secondary Capture Device ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const hardcopy_creation_device_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1011),
  "Hardcopy Creation Device ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const date_of_secondary_capture = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1012),
  "Date of Secondary Capture",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const time_of_secondary_capture = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1014),
  "Time of Secondary Capture",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const secondary_capture_device_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1016),
  "Secondary Capture Device Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const hardcopy_device_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1017),
  "Hardcopy Device Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const secondary_capture_device_manufacturer_model_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1018),
  "Secondary Capture Device Manufacturer's Model Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const secondary_capture_device_software_versions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1019),
  "Secondary Capture Device Software Versions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const hardcopy_device_software_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x101A),
  "Hardcopy Device Software Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const hardcopy_device_manufacturer_model_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x101B),
  "Hardcopy Device Manufacturer's Model Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const software_versions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1020),
  "Software Versions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const video_image_format_acquired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1022),
  "Video Image Format Acquired",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const digital_image_format_acquired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1023),
  "Digital Image Format Acquired",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const protocol_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1030),
  "Protocol Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const contrast_bolus_route = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1040),
  "Contrast/Bolus Route",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const contrast_bolus_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1041),
  "Contrast/Bolus Volume",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const contrast_bolus_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1042),
  "Contrast/Bolus Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const contrast_bolus_stop_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1043),
  "Contrast/Bolus Stop Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const contrast_bolus_total_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1044),
  "Contrast/Bolus Total Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const syringe_counts = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1045),
  "Syringe Counts",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const contrast_flow_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1046),
  "Contrast Flow Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const contrast_flow_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1047),
  "Contrast Flow Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const contrast_bolus_ingredient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1048),
  "Contrast/Bolus Ingredient",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const contrast_bolus_ingredient_concentration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1049),
  "Contrast/Bolus Ingredient Concentration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const spatial_resolution = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1050),
  "Spatial Resolution",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const trigger_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1060),
  "Trigger Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const trigger_source_or_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1061),
  "Trigger Source or Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const nominal_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1062),
  "Nominal Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const frame_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1063),
  "Frame Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const cardiac_framing_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1064),
  "Cardiac Framing Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const frame_time_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1065),
  "Frame Time Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const frame_delay = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1066),
  "Frame Delay",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const image_trigger_delay = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1067),
  "Image Trigger Delay",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const multiplex_group_time_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1068),
  "Multiplex Group Time Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const trigger_time_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1069),
  "Trigger Time Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const synchronization_trigger = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x106A),
  "Synchronization Trigger",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const synchronization_channel = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x106C),
  "Synchronization Channel",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const trigger_sample_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x106E),
  "Trigger Sample Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const radiopharmaceutical_route = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1070),
  "Radiopharmaceutical Route",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const radiopharmaceutical_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1071),
  "Radiopharmaceutical Volume",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radiopharmaceutical_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1072),
  "Radiopharmaceutical Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const radiopharmaceutical_stop_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1073),
  "Radiopharmaceutical Stop Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const radionuclide_total_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1074),
  "Radionuclide Total Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radionuclide_half_life = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1075),
  "Radionuclide Half Life",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radionuclide_positron_fraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1076),
  "Radionuclide Positron Fraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radiopharmaceutical_specific_activity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1077),
  "Radiopharmaceutical Specific Activity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radiopharmaceutical_start_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1078),
  "Radiopharmaceutical Start DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const radiopharmaceutical_stop_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1079),
  "Radiopharmaceutical Stop DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const beat_rejection_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1080),
  "Beat Rejection Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const low_rr_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1081),
  "Low R-R Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const high_rr_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1082),
  "High R-R Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const intervals_acquired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1083),
  "Intervals Acquired",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const intervals_rejected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1084),
  "Intervals Rejected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const pvc_rejection = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1085),
  "PVC Rejection",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const skip_beats = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1086),
  "Skip Beats",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const heart_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1088),
  "Heart Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const cardiac_number_of_images = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1090),
  "Cardiac Number of Images",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const trigger_window = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1094),
  "Trigger Window",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const reconstruction_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1100),
  "Reconstruction Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const distance_source_to_detector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1110),
  "Distance Source to Detector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const distance_source_to_patient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1111),
  "Distance Source to Patient",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const estimated_radiographic_magnification_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1114),
  "Estimated Radiographic Magnification Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gantry_detector_tilt = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1120),
  "Gantry/Detector Tilt",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gantry_detector_slew = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1121),
  "Gantry/Detector Slew",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1130),
  "Table Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_traverse = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1131),
  "Table Traverse",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_motion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1134),
  "Table Motion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const table_vertical_increment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1135),
  "Table Vertical Increment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const table_lateral_increment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1136),
  "Table Lateral Increment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const table_longitudinal_increment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1137),
  "Table Longitudinal Increment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const table_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1138),
  "Table Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x113A),
  "Table Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1140),
  "Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const angular_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1141),
  "Angular Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radial_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1142),
  "Radial Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const scan_arc = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1143),
  "Scan Arc",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const angular_step = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1144),
  "Angular Step",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const center_of_rotation_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1145),
  "Center of Rotation Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const rotation_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1146),
  "Rotation Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const field_of_view_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1147),
  "Field of View Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const field_of_view_dimensions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1149),
  "Field of View Dimension(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_2,
);

export const exposure_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1150),
  "Exposure Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const x_ray_tube_current = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1151),
  "X-Ray Tube Current",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const exposure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1152),
  "Exposure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const exposure_in_microamp_seconds = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1153),
  "Exposure in µAs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const average_pulse_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1154),
  "Average Pulse Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radiation_setting = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1155),
  "Radiation Setting",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rectification_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1156),
  "Rectification Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const radiation_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x115A),
  "Radiation Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_and_fluoroscopy_area_dose_product = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x115E),
  "Image and Fluoroscopy Area Dose Product",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const filter_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1160),
  "Filter Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const type_of_filters = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1161),
  "Type of Filters",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const intensifier_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1162),
  "Intensifier Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const imager_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1164),
  "Imager Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const grid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1166),
  "Grid",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const generator_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1170),
  "Generator Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const collimator_grid_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1180),
  "Collimator/grid Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const collimator_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1181),
  "Collimator Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const focal_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1182),
  "Focal Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_2,
);

export const x_focus_center = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1183),
  "X Focus Center",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_2,
);

export const y_focus_center = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1184),
  "Y Focus Center",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_2,
);

export const focal_spots = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1190),
  "Focal Spot(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const anode_target_material = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1191),
  "Anode Target Material",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const body_part_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11A0),
  "Body Part Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const compression_force = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11A2),
  "Compression Force",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const compression_pressure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11A3),
  "Compression Pressure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const paddle_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11A4),
  "Paddle Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const compression_contact_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11A5),
  "Compression Contact Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const acquisition_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B0),
  "Acquisition Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const dose_mode_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B1),
  "Dose Mode Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const acquired_subtraction_mask_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B2),
  "Acquired Subtraction Mask Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fluoroscopy_persistence_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B3),
  "Fluoroscopy Persistence Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fluoroscopy_last_image_hold_persistence_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B4),
  "Fluoroscopy Last Image Hold Persistence Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const upper_limit_number_of_persistent_fluoroscopy_frames = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B5),
  "Upper Limit Number Of Persistent Fluoroscopy Frames",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const contrast_bolus_auto_injection_trigger_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B6),
  "Contrast/Bolus Auto Injection Trigger Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const contrast_bolus_injection_delay = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B7),
  "Contrast/Bolus Injection Delay",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const xa_acquisition_phase_details_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B8),
  "XA Acquisition Phase Details Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const xa_acquisition_frame_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11B9),
  "XA Acquisition Frame Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const xa_plane_details_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11BA),
  "XA Plane Details Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_field_of_view_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11BB),
  "Acquisition Field of View Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const x_ray_filter_details_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11BC),
  "X-Ray Filter Details Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const xa_acquisition_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11BD),
  "XA Acquisition Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const reconstruction_pipeline_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11BE),
  "Reconstruction Pipeline Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_filter_details_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11BF),
  "Image Filter Details Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const applied_mask_subtraction_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11C0),
  "Applied Mask Subtraction Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const requested_series_description_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x11C1),
  "Requested Series Description Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const date_of_last_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1200),
  "Date of Last Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1_to_n,
);

export const time_of_last_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1201),
  "Time of Last Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1_to_n,
);

export const date_time_of_last_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1202),
  "DateTime of Last Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const calibration_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1203),
  "Calibration DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const date_of_manufacture = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1204),
  "Date of Manufacture",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const date_of_installation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1205),
  "Date of Installation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const convolution_kernel = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1210),
  "Convolution Kernel",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const upper_lower_pixel_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1240),
  "Upper/Lower Pixel Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const actual_frame_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1242),
  "Actual Frame Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const count_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1243),
  "Count Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const preferred_playback_sequencing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1244),
  "Preferred Playback Sequencing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const receive_coil_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1250),
  "Receive Coil Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const transmit_coil_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1251),
  "Transmit Coil Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const plate_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1260),
  "Plate Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const phosphor_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1261),
  "Phosphor Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const water_equivalent_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1271),
  "Water Equivalent Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const water_equivalent_diameter_calculation_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1272),
  "Water Equivalent Diameter Calculation Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scan_velocity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1300),
  "Scan Velocity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const whole_body_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1301),
  "Whole Body Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const scan_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1302),
  "Scan Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const acquisition_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1310),
  "Acquisition Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_4,
);

export const in_plane_phase_encoding_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1312),
  "In-plane Phase Encoding Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const flip_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1314),
  "Flip Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const variable_flip_angle_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1315),
  "Variable Flip Angle Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const sar = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1316),
  "SAR",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const d_bdt = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1318),
  "dB/dt",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const b_1rms = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1320),
  "B1rms",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const acquisition_device_processing_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1400),
  "Acquisition Device Processing Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const acquisition_device_processing_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1401),
  "Acquisition Device Processing Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const cassette_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1402),
  "Cassette Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const cassette_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1403),
  "Cassette Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const exposures_on_plate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1404),
  "Exposures on Plate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const relative_x_ray_exposure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1405),
  "Relative X-Ray Exposure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const exposure_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1411),
  "Exposure Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const target_exposure_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1412),
  "Target Exposure Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const deviation_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1413),
  "Deviation Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const column_angulation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1450),
  "Column Angulation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const tomo_layer_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1460),
  "Tomo Layer Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const tomo_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1470),
  "Tomo Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const tomo_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1480),
  "Tomo Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const tomo_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1490),
  "Tomo Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tomo_class = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1491),
  "Tomo Class",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_tomosynthesis_source_images = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1495),
  "Number of Tomosynthesis Source Images",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const positioner_motion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1500),
  "Positioner Motion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const positioner_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1508),
  "Positioner Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const positioner_primary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1510),
  "Positioner Primary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const positioner_secondary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1511),
  "Positioner Secondary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const positioner_primary_angle_increment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1520),
  "Positioner Primary Angle Increment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const positioner_secondary_angle_increment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1521),
  "Positioner Secondary Angle Increment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const detector_primary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1530),
  "Detector Primary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const detector_secondary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1531),
  "Detector Secondary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const shutter_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1600),
  "Shutter Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(3)),
);

export const shutter_left_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1602),
  "Shutter Left Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const shutter_right_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1604),
  "Shutter Right Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const shutter_upper_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1606),
  "Shutter Upper Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const shutter_lower_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1608),
  "Shutter Lower Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const center_of_circular_shutter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1610),
  "Center of Circular Shutter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2,
);

export const radius_of_circular_shutter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1612),
  "Radius of Circular Shutter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const vertices_of_the_polygonal_shutter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1620),
  "Vertices of the Polygonal Shutter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2_to_n,
);

export const shutter_presentation_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1622),
  "Shutter Presentation Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const shutter_overlay_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1623),
  "Shutter Overlay Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const shutter_presentation_color_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1624),
  "Shutter Presentation Color CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const outline_shape_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1630),
  "Outline Shape Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const outline_left_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1631),
  "Outline Left Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const outline_right_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1632),
  "Outline Right Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const outline_upper_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1633),
  "Outline Upper Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const outline_lower_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1634),
  "Outline Lower Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const center_of_circular_outline = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1635),
  "Center of Circular Outline",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const diameter_of_circular_outline = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1636),
  "Diameter of Circular Outline",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const number_of_polygonal_vertices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1637),
  "Number of Polygonal Vertices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const vertices_of_the_polygonal_outline = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1638),
  "Vertices of the Polygonal Outline",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const collimator_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1700),
  "Collimator Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(3)),
);

export const collimator_left_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1702),
  "Collimator Left Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const collimator_right_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1704),
  "Collimator Right Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const collimator_upper_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1706),
  "Collimator Upper Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const collimator_lower_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1708),
  "Collimator Lower Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const center_of_circular_collimator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1710),
  "Center of Circular Collimator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2,
);

export const radius_of_circular_collimator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1712),
  "Radius of Circular Collimator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const vertices_of_the_polygonal_collimator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1720),
  "Vertices of the Polygonal Collimator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2_to_n,
);

export const acquisition_time_synchronized = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1800),
  "Acquisition Time Synchronized",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const time_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1801),
  "Time Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const time_distribution_protocol = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1802),
  "Time Distribution Protocol",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ntp_source_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x1803),
  "NTP Source Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const page_number_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2001),
  "Page Number Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const frame_label_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2002),
  "Frame Label Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const frame_primary_angle_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2003),
  "Frame Primary Angle Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const frame_secondary_angle_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2004),
  "Frame Secondary Angle Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const slice_location_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2005),
  "Slice Location Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const display_window_label_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2006),
  "Display Window Label Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const nominal_scanned_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2010),
  "Nominal Scanned Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const digitizing_device_transport_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2020),
  "Digitizing Device Transport Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rotation_of_scanned_film = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2030),
  "Rotation of Scanned Film",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const biopsy_target_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2041),
  "Biopsy Target Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const target_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2042),
  "Target UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const localizing_cursor_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2043),
  "Localizing Cursor Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const calculated_target_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2044),
  "Calculated Target Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const target_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2045),
  "Target Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const displayed_z_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x2046),
  "Displayed Z Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ivus_acquisition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x3100),
  "IVUS Acquisition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ivus_pullback_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x3101),
  "IVUS Pullback Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const ivus_gated_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x3102),
  "IVUS Gated Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const ivus_pullback_start_frame_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x3103),
  "IVUS Pullback Start Frame Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const ivus_pullback_stop_frame_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x3104),
  "IVUS Pullback Stop Frame Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const lesion_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x3105),
  "Lesion Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const acquisition_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x4000),
  "Acquisition Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const output_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5000),
  "Output Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const transducer_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5010),
  "Transducer Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const transducer_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5011),
  "Transducer Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const focus_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5012),
  "Focus Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const processing_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5020),
  "Processing Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const postprocessing_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5021),
  "Postprocessing Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const mechanical_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5022),
  "Mechanical Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const bone_thermal_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5024),
  "Bone Thermal Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const cranial_thermal_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5026),
  "Cranial Thermal Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const soft_tissue_thermal_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5027),
  "Soft Tissue Thermal Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const soft_tissue_focus_thermal_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5028),
  "Soft Tissue-focus Thermal Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const soft_tissue_surface_thermal_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5029),
  "Soft Tissue-surface Thermal Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dynamic_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5030),
  "Dynamic Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const total_gain = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5040),
  "Total Gain",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const depth_of_scan_field = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5050),
  "Depth of Scan Field",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const patient_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5100),
  "Patient Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const view_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5101),
  "View Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const projection_eponymous_name_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5104),
  "Projection Eponymous Name Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_transformation_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5210),
  "Image Transformation Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_6,
);

export const image_translation_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x5212),
  "Image Translation Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const sensitivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6000),
  "Sensitivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const sequence_of_ultrasound_regions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6011),
  "Sequence of Ultrasound Regions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const region_spatial_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6012),
  "Region Spatial Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const region_data_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6014),
  "Region Data Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const region_flags = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6016),
  "Region Flags",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const region_location_min_x0 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6018),
  "Region Location Min X0",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const region_location_min_y0 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x601A),
  "Region Location Min Y0",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const region_location_max_x1 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x601C),
  "Region Location Max X1",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const region_location_max_y1 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x601E),
  "Region Location Max Y1",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const reference_pixel_x0 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6020),
  "Reference Pixel X0",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const reference_pixel_y0 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6022),
  "Reference Pixel Y0",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const physical_units_x_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6024),
  "Physical Units X Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const physical_units_y_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6026),
  "Physical Units Y Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const reference_pixel_physical_value_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6028),
  "Reference Pixel Physical Value X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const reference_pixel_physical_value_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x602A),
  "Reference Pixel Physical Value Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const physical_delta_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x602C),
  "Physical Delta X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const physical_delta_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x602E),
  "Physical Delta Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const transducer_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6030),
  "Transducer Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const transducer_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6031),
  "Transducer Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pulse_repetition_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6032),
  "Pulse Repetition Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const doppler_correction_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6034),
  "Doppler Correction Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const steering_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6036),
  "Steering Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const doppler_sample_volume_x_position_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6038),
  "Doppler Sample Volume X Position (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const doppler_sample_volume_x_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6039),
  "Doppler Sample Volume X Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const doppler_sample_volume_y_position_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x603A),
  "Doppler Sample Volume Y Position (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const doppler_sample_volume_y_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x603B),
  "Doppler Sample Volume Y Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const tm_line_position_x0_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x603C),
  "TM-Line Position X0 (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const tm_line_position_x0 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x603D),
  "TM-Line Position X0",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const tm_line_position_y0_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x603E),
  "TM-Line Position Y0 (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const tm_line_position_y0 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x603F),
  "TM-Line Position Y0",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const tm_line_position_x1_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6040),
  "TM-Line Position X1 (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const tm_line_position_x1 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6041),
  "TM-Line Position X1",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const tm_line_position_y1_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6042),
  "TM-Line Position Y1 (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const tm_line_position_y1 = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6043),
  "TM-Line Position Y1",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const pixel_component_organization = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6044),
  "Pixel Component Organization",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pixel_component_mask = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6046),
  "Pixel Component Mask",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const pixel_component_range_start = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6048),
  "Pixel Component Range Start",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const pixel_component_range_stop = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x604A),
  "Pixel Component Range Stop",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const pixel_component_physical_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x604C),
  "Pixel Component Physical Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pixel_component_data_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x604E),
  "Pixel Component Data Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_table_break_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6050),
  "Number of Table Break Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const table_of_x_break_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6052),
  "Table of X Break Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const table_of_y_break_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6054),
  "Table of Y Break Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const number_of_table_entries = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6056),
  "Number of Table Entries",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const table_of_pixel_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6058),
  "Table of Pixel Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const table_of_parameter_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x605A),
  "Table of Parameter Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const r_wave_time_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6060),
  "R Wave Time Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const active_image_area_overlay_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x6070),
  "Active Image Area Overlay Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const detector_conditions_nominal_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7000),
  "Detector Conditions Nominal Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const detector_temperature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7001),
  "Detector Temperature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const detector_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7004),
  "Detector Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const detector_configuration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7005),
  "Detector Configuration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const detector_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7006),
  "Detector Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const detector_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7008),
  "Detector Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const detector_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x700A),
  "Detector ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const date_of_last_detector_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x700C),
  "Date of Last Detector Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const time_of_last_detector_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x700E),
  "Time of Last Detector Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const exposures_on_detector_since_last_calibration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7010),
  "Exposures on Detector Since Last Calibration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const exposures_on_detector_since_manufactured = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7011),
  "Exposures on Detector Since Manufactured",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const detector_time_since_last_exposure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7012),
  "Detector Time Since Last Exposure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const detector_active_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7014),
  "Detector Active Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const detector_activation_offset_from_exposure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7016),
  "Detector Activation Offset From Exposure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const detector_binning = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x701A),
  "Detector Binning",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const detector_element_physical_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7020),
  "Detector Element Physical Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const detector_element_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7022),
  "Detector Element Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const detector_active_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7024),
  "Detector Active Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const detector_active_dimensions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7026),
  "Detector Active Dimension(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_2,
);

export const detector_active_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7028),
  "Detector Active Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const detector_manufacturer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x702A),
  "Detector Manufacturer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const detector_manufacturer_model_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x702B),
  "Detector Manufacturer's Model Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const field_of_view_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7030),
  "Field of View Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const field_of_view_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7032),
  "Field of View Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const field_of_view_horizontal_flip = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7034),
  "Field of View Horizontal Flip",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pixel_data_area_origin_relative_to_fov = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7036),
  "Pixel Data Area Origin Relative To FOV",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const pixel_data_area_rotation_angle_relative_to_fov = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7038),
  "Pixel Data Area Rotation Angle Relative To FOV",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const grid_absorbing_material = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7040),
  "Grid Absorbing Material",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const grid_spacing_material = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7041),
  "Grid Spacing Material",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const grid_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7042),
  "Grid Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const grid_pitch = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7044),
  "Grid Pitch",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const grid_aspect_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7046),
  "Grid Aspect Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2,
);

export const grid_period = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7048),
  "Grid Period",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const grid_focal_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x704C),
  "Grid Focal Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const filter_material = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7050),
  "Filter Material",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const filter_thickness_minimum = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7052),
  "Filter Thickness Minimum",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const filter_thickness_maximum = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7054),
  "Filter Thickness Maximum",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const filter_beam_path_length_minimum = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7056),
  "Filter Beam Path Length Minimum",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const filter_beam_path_length_maximum = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7058),
  "Filter Beam Path Length Maximum",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const exposure_control_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7060),
  "Exposure Control Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const exposure_control_mode_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7062),
  "Exposure Control Mode Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const exposure_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7064),
  "Exposure Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const phototimer_setting = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x7065),
  "Phototimer Setting",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const exposure_time_in_microseconds = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x8150),
  "Exposure Time in µS",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const x_ray_tube_current_in_microamps = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x8151),
  "X-Ray Tube Current in µA",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const content_qualification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9004),
  "Content Qualification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pulse_sequence_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9005),
  "Pulse Sequence Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const mr_imaging_modifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9006),
  "MR Imaging Modifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const echo_pulse_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9008),
  "Echo Pulse Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const inversion_recovery = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9009),
  "Inversion Recovery",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const flow_compensation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9010),
  "Flow Compensation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const multiple_spin_echo = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9011),
  "Multiple Spin Echo",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const multi_planar_excitation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9012),
  "Multi-planar Excitation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const phase_contrast = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9014),
  "Phase Contrast",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const time_of_flight_contrast = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9015),
  "Time of Flight Contrast",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const spoiling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9016),
  "Spoiling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const steady_state_pulse_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9017),
  "Steady State Pulse Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const echo_planar_pulse_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9018),
  "Echo Planar Pulse Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tag_angle_first_axis = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9019),
  "Tag Angle First Axis",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const magnetization_transfer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9020),
  "Magnetization Transfer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const t2_preparation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9021),
  "T2 Preparation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const blood_signal_nulling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9022),
  "Blood Signal Nulling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const saturation_recovery = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9024),
  "Saturation Recovery",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const spectrally_selected_suppression = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9025),
  "Spectrally Selected Suppression",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const spectrally_selected_excitation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9026),
  "Spectrally Selected Excitation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const spatial_presaturation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9027),
  "Spatial Pre-saturation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tagging = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9028),
  "Tagging",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const oversampling_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9029),
  "Oversampling Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tag_spacing_first_dimension = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9030),
  "Tag Spacing First Dimension",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const geometry_of_k_space_traversal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9032),
  "Geometry of k-Space Traversal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const segmented_k_space_traversal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9033),
  "Segmented k-Space Traversal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rectilinear_phase_encode_reordering = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9034),
  "Rectilinear Phase Encode Reordering",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tag_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9035),
  "Tag Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const partial_fourier_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9036),
  "Partial Fourier Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const cardiac_synchronization_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9037),
  "Cardiac Synchronization Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const receive_coil_manufacturer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9041),
  "Receive Coil Manufacturer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const mr_receive_coil_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9042),
  "MR Receive Coil Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const receive_coil_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9043),
  "Receive Coil Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const quadrature_receive_coil = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9044),
  "Quadrature Receive Coil",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const multi_coil_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9045),
  "Multi-Coil Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const multi_coil_configuration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9046),
  "Multi-Coil Configuration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const multi_coil_element_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9047),
  "Multi-Coil Element Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const multi_coil_element_used = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9048),
  "Multi-Coil Element Used",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mr_transmit_coil_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9049),
  "MR Transmit Coil Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transmit_coil_manufacturer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9050),
  "Transmit Coil Manufacturer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const transmit_coil_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9051),
  "Transmit Coil Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const spectral_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9052),
  "Spectral Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_2,
);

export const chemical_shift_reference = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9053),
  "Chemical Shift Reference",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_2,
);

export const volume_localization_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9054),
  "Volume Localization Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mr_acquisition_frequency_encoding_steps = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9058),
  "MR Acquisition Frequency Encoding Steps",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const decoupling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9059),
  "De-coupling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const decoupled_nucleus = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9060),
  "De-coupled Nucleus",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_2,
);

export const decoupling_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9061),
  "De-coupling Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_2,
);

export const decoupling_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9062),
  "De-coupling Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const decoupling_chemical_shift_reference = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9063),
  "De-coupling Chemical Shift Reference",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_2,
);

export const k_space_filtering = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9064),
  "k-space Filtering",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const time_domain_filtering = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9065),
  "Time Domain Filtering",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_2,
);

export const number_of_zero_fills = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9066),
  "Number of Zero Fills",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_2,
);

export const baseline_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9067),
  "Baseline Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const parallel_reduction_factor_in_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9069),
  "Parallel Reduction Factor In-plane",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const cardiac_rr_interval_specified = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9070),
  "Cardiac R-R Interval Specified",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const acquisition_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9073),
  "Acquisition Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const frame_acquisition_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9074),
  "Frame Acquisition DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const diffusion_directionality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9075),
  "Diffusion Directionality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const diffusion_gradient_direction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9076),
  "Diffusion Gradient Direction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const parallel_acquisition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9077),
  "Parallel Acquisition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const parallel_acquisition_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9078),
  "Parallel Acquisition Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const inversion_times = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9079),
  "Inversion Times",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const metabolite_map_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9080),
  "Metabolite Map Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const partial_fourier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9081),
  "Partial Fourier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const effective_echo_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9082),
  "Effective Echo Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const metabolite_map_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9083),
  "Metabolite Map Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const chemical_shift_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9084),
  "Chemical Shift Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const cardiac_signal_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9085),
  "Cardiac Signal Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const diffusion_b_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9087),
  "Diffusion b-value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const diffusion_gradient_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9089),
  "Diffusion Gradient Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const velocity_encoding_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9090),
  "Velocity Encoding Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const velocity_encoding_minimum_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9091),
  "Velocity Encoding Minimum Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const velocity_encoding_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9092),
  "Velocity Encoding Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_k_space_trajectories = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9093),
  "Number of k-Space Trajectories",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const coverage_of_k_space = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9094),
  "Coverage of k-Space",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const spectroscopy_acquisition_phase_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9095),
  "Spectroscopy Acquisition Phase Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const parallel_reduction_factor_in_plane_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9096),
  "Parallel Reduction Factor In-plane (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const transmitter_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9098),
  "Transmitter Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_2,
);

export const resonant_nucleus = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9100),
  "Resonant Nucleus",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_2,
);

export const frequency_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9101),
  "Frequency Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mr_spectroscopy_fov_geometry_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9103),
  "MR Spectroscopy FOV/Geometry Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const slab_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9104),
  "Slab Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const slab_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9105),
  "Slab Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const mid_slab_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9106),
  "Mid Slab Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const mr_spatial_saturation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9107),
  "MR Spatial Saturation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_timing_and_related_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9112),
  "MR Timing and Related Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_echo_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9114),
  "MR Echo Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_modifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9115),
  "MR Modifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_diffusion_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9117),
  "MR Diffusion Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const cardiac_synchronization_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9118),
  "Cardiac Synchronization Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_averages_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9119),
  "MR Averages Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_fov_geometry_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9125),
  "MR FOV/Geometry Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const volume_localization_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9126),
  "Volume Localization Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const spectroscopy_acquisition_data_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9127),
  "Spectroscopy Acquisition Data Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const diffusion_anisotropy_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9147),
  "Diffusion Anisotropy Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const frame_reference_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9151),
  "Frame Reference DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const mr_metabolite_map_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9152),
  "MR Metabolite Map Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const parallel_reduction_factor_out_of_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9155),
  "Parallel Reduction Factor out-of-plane",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const spectroscopy_acquisition_out_of_plane_phase_steps = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9159),
  "Spectroscopy Acquisition Out-of-plane Phase Steps",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const bulk_motion_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9166),
  "Bulk Motion Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const parallel_reduction_factor_second_in_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9168),
  "Parallel Reduction Factor Second In-plane",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const cardiac_beat_rejection_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9169),
  "Cardiac Beat Rejection Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const respiratory_motion_compensation_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9170),
  "Respiratory Motion Compensation Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const respiratory_signal_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9171),
  "Respiratory Signal Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const bulk_motion_compensation_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9172),
  "Bulk Motion Compensation Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const bulk_motion_signal_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9173),
  "Bulk Motion Signal Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const applicable_safety_standard_agency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9174),
  "Applicable Safety Standard Agency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const applicable_safety_standard_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9175),
  "Applicable Safety Standard Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const operating_mode_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9176),
  "Operating Mode Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const operating_mode_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9177),
  "Operating Mode Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const operating_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9178),
  "Operating Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const specific_absorption_rate_definition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9179),
  "Specific Absorption Rate Definition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gradient_output_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9180),
  "Gradient Output Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const specific_absorption_rate_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9181),
  "Specific Absorption Rate Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const gradient_output = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9182),
  "Gradient Output",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const flow_compensation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9183),
  "Flow Compensation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tagging_delay = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9184),
  "Tagging Delay",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const respiratory_motion_compensation_technique_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9185),
  "Respiratory Motion Compensation Technique Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const respiratory_signal_source_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9186),
  "Respiratory Signal Source ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const chemical_shift_minimum_integration_limit_in_hz = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9195),
  "Chemical Shift Minimum Integration Limit in Hz",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const chemical_shift_maximum_integration_limit_in_hz = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9196),
  "Chemical Shift Maximum Integration Limit in Hz",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const mr_velocity_encoding_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9197),
  "MR Velocity Encoding Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const first_order_phase_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9198),
  "First Order Phase Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const water_referenced_phase_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9199),
  "Water Referenced Phase Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mr_spectroscopy_acquisition_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9200),
  "MR Spectroscopy Acquisition Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const respiratory_cycle_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9214),
  "Respiratory Cycle Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const velocity_encoding_maximum_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9217),
  "Velocity Encoding Maximum Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const tag_spacing_second_dimension = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9218),
  "Tag Spacing Second Dimension",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const tag_angle_second_axis = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9219),
  "Tag Angle Second Axis",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const frame_acquisition_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9220),
  "Frame Acquisition Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const mr_image_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9226),
  "MR Image Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_spectroscopy_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9227),
  "MR Spectroscopy Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mr_acquisition_phase_encoding_steps_in_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9231),
  "MR Acquisition Phase Encoding Steps in-plane",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const mr_acquisition_phase_encoding_steps_out_of_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9232),
  "MR Acquisition Phase Encoding Steps out-of-plane",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const spectroscopy_acquisition_phase_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9234),
  "Spectroscopy Acquisition Phase Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const cardiac_cycle_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9236),
  "Cardiac Cycle Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const specific_absorption_rate_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9239),
  "Specific Absorption Rate Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rf_echo_train_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9240),
  "RF Echo Train Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const gradient_echo_train_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9241),
  "Gradient Echo Train Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const arterial_spin_labeling_contrast = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9250),
  "Arterial Spin Labeling Contrast",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mr_arterial_spin_labeling_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9251),
  "MR Arterial Spin Labeling Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const asl_technique_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9252),
  "ASL Technique Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const asl_slab_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9253),
  "ASL Slab Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const asl_slab_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9254),
  "ASL Slab Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const asl_slab_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9255),
  "ASL Slab Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const asl_mid_slab_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9256),
  "ASL Mid Slab Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const asl_context = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9257),
  "ASL Context",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const asl_pulse_train_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9258),
  "ASL Pulse Train Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const asl_crusher_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9259),
  "ASL Crusher Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const asl_crusher_flow_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x925A),
  "ASL Crusher Flow Limit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const asl_crusher_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x925B),
  "ASL Crusher Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const asl_bolus_cutoff_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x925C),
  "ASL Bolus Cut-off Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const asl_bolus_cutoff_timing_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x925D),
  "ASL Bolus Cut-off Timing Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const asl_bolus_cutoff_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x925E),
  "ASL Bolus Cut-off Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const asl_bolus_cutoff_delay_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x925F),
  "ASL Bolus Cut-off Delay Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const asl_slab_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9260),
  "ASL Slab Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const chemical_shift_minimum_integration_limit_inppm = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9295),
  "Chemical Shift Minimum Integration Limit in ppm",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const chemical_shift_maximum_integration_limit_inppm = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9296),
  "Chemical Shift Maximum Integration Limit in ppm",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const water_reference_acquisition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9297),
  "Water Reference Acquisition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const echo_peak_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9298),
  "Echo Peak Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const ct_acquisition_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9301),
  "CT Acquisition Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9302),
  "Acquisition Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tube_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9303),
  "Tube Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const ct_acquisition_details_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9304),
  "CT Acquisition Details Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const revolution_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9305),
  "Revolution Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const single_collimation_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9306),
  "Single Collimation Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const total_collimation_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9307),
  "Total Collimation Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const ct_table_dynamics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9308),
  "CT Table Dynamics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const table_speed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9309),
  "Table Speed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const table_feed_per_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9310),
  "Table Feed per Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const spiral_pitch_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9311),
  "Spiral Pitch Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const ct_geometry_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9312),
  "CT Geometry Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const data_collection_center_patient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9313),
  "Data Collection Center (Patient)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const ct_reconstruction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9314),
  "CT Reconstruction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_algorithm = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9315),
  "Reconstruction Algorithm",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const convolution_kernel_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9316),
  "Convolution Kernel Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reconstruction_field_of_view = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9317),
  "Reconstruction Field of View",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const reconstruction_target_center_patient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9318),
  "Reconstruction Target Center (Patient)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const reconstruction_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9319),
  "Reconstruction Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const image_filter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9320),
  "Image Filter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const ct_exposure_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9321),
  "CT Exposure Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9322),
  "Reconstruction Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const exposure_modulation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9323),
  "Exposure Modulation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const estimated_dose_saving = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9324),
  "Estimated Dose Saving",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const ct_x_ray_details_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9325),
  "CT X-Ray Details Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ct_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9326),
  "CT Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const table_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9327),
  "Table Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const exposure_time_inms = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9328),
  "Exposure Time in ms",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const ct_image_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9329),
  "CT Image Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_tube_current_in_milliamps = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9330),
  "X-Ray Tube Current in mA",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const exposure_inm_as = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9332),
  "Exposure in mAs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const constant_volume_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9333),
  "Constant Volume Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fluoroscopy_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9334),
  "Fluoroscopy Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const distance_source_to_data_collection_center = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9335),
  "Distance Source to Data Collection Center",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const contrast_bolus_agent_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9337),
  "Contrast/Bolus Agent Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const contrast_bolus_ingredient_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9338),
  "Contrast/Bolus Ingredient Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contrast_administration_profile_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9340),
  "Contrast Administration Profile Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contrast_bolus_usage_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9341),
  "Contrast/Bolus Usage Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contrast_bolus_agent_administered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9342),
  "Contrast/Bolus Agent Administered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const contrast_bolus_agent_detected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9343),
  "Contrast/Bolus Agent Detected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const contrast_bolus_agent_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9344),
  "Contrast/Bolus Agent Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ctdi_vol = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9345),
  "CTDIvol",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const ctdi_phantom_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9346),
  "CTDI Phantom Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const calcium_scoring_mass_factor_patient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9351),
  "Calcium Scoring Mass Factor Patient",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const calcium_scoring_mass_factor_device = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9352),
  "Calcium Scoring Mass Factor Device",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const energy_weighting_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9353),
  "Energy Weighting Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ct_additional_x_ray_source_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9360),
  "CT Additional X-Ray Source Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const multienergy_ct_acquisition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9361),
  "Multi-energy CT Acquisition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const multienergy_ct_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9362),
  "Multi-energy CT Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const multienergy_ct_processing_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9363),
  "Multi-energy CT Processing Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const multienergy_ct_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9364),
  "Multi-energy CT Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const multienergy_ct_x_ray_source_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9365),
  "Multi-energy CT X-Ray Source Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_source_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9366),
  "X-Ray Source Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const x_ray_source_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9367),
  "X-Ray Source ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const multienergy_source_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9368),
  "Multi-energy Source Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_start_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9369),
  "Source Start DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const source_end_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x936A),
  "Source End DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const switching_phase_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x936B),
  "Switching Phase Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const switching_phase_nominal_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x936C),
  "Switching Phase Nominal Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const switching_phase_transition_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x936D),
  "Switching Phase Transition Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const effective_bin_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x936E),
  "Effective Bin Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const multienergy_ct_x_ray_detector_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x936F),
  "Multi-energy CT X-Ray Detector Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_detector_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9370),
  "X-Ray Detector Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const x_ray_detector_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9371),
  "X-Ray Detector ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const multienergy_detector_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9372),
  "Multi-energy Detector Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const x_ray_detector_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9373),
  "X-Ray Detector Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const nominal_max_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9374),
  "Nominal Max Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const nominal_min_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9375),
  "Nominal Min Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const referenced_x_ray_detector_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9376),
  "Referenced X-Ray Detector Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const referenced_x_ray_source_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9377),
  "Referenced X-Ray Source Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const referenced_path_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9378),
  "Referenced Path Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const multienergy_ct_path_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9379),
  "Multi-energy CT Path Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const multienergy_ct_path_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x937A),
  "Multi-energy CT Path Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const multienergy_acquisition_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x937B),
  "Multi-energy Acquisition Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const monoenergetic_energy_equivalent = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x937C),
  "Monoenergetic Energy Equivalent",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const material_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x937D),
  "Material Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const decomposition_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x937E),
  "Decomposition Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const decomposition_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x937F),
  "Decomposition Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const decomposition_algorithm_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9380),
  "Decomposition Algorithm Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const decomposition_material_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9381),
  "Decomposition Material Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const material_attenuation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9382),
  "Material Attenuation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const photon_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9383),
  "Photon Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const x_ray_mass_attenuation_coefficient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9384),
  "X-Ray Mass Attenuation Coefficient",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const projection_pixel_calibration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9401),
  "Projection Pixel Calibration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const distance_source_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9402),
  "Distance Source to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const distance_object_to_table_top = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9403),
  "Distance Object to Table Top",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const object_pixel_spacing_in_center_of_beam = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9404),
  "Object Pixel Spacing in Center of Beam",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const positioner_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9405),
  "Positioner Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const table_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9406),
  "Table Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const collimator_shape_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9407),
  "Collimator Shape Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const planes_in_acquisition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9410),
  "Planes in Acquisition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const xaxrf_frame_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9412),
  "XA/XRF Frame Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9417),
  "Frame Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_receptor_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9420),
  "X-Ray Receptor Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acquisition_protocol_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9423),
  "Acquisition Protocol Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const acquisition_protocol_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9424),
  "Acquisition Protocol Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const contrast_bolus_ingredient_opaque = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9425),
  "Contrast/Bolus Ingredient Opaque",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const distance_receptor_plane_to_detector_housing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9426),
  "Distance Receptor Plane to Detector Housing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const intensifier_active_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9427),
  "Intensifier Active Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const intensifier_active_dimensions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9428),
  "Intensifier Active Dimension(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_2,
);

export const physical_detector_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9429),
  "Physical Detector Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const position_of_isocenter_projection = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9430),
  "Position of Isocenter Projection",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const field_of_view_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9432),
  "Field of View Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const field_of_view_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9433),
  "Field of View Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const exposure_control_sensing_regions_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9434),
  "Exposure Control Sensing Regions Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const exposure_control_sensing_region_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9435),
  "Exposure Control Sensing Region Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const exposure_control_sensing_region_left_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9436),
  "Exposure Control Sensing Region Left Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const exposure_control_sensing_region_right_vertical_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9437),
  "Exposure Control Sensing Region Right Vertical Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const exposure_control_sensing_region_upper_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9438),
  "Exposure Control Sensing Region Upper Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const exposure_control_sensing_region_lower_horizontal_edge = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9439),
  "Exposure Control Sensing Region Lower Horizontal Edge",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const center_of_circular_exposure_control_sensing_region = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9440),
  "Center of Circular Exposure Control Sensing Region",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_2,
);

export const radius_of_circular_exposure_control_sensing_region = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9441),
  "Radius of Circular Exposure Control Sensing Region",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const vertices_of_the_polygonal_exposure_control_sensing_region = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9442),
  "Vertices of the Polygonal Exposure Control Sensing Region",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_2_to_n,
);

export const column_angulation_patient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9447),
  "Column Angulation (Patient)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const beam_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9449),
  "Beam Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const frame_detector_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9451),
  "Frame Detector Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const calculated_anatomy_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9452),
  "Calculated Anatomy Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const calibration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9455),
  "Calibration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const object_thickness_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9456),
  "Object Thickness Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const plane_identification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9457),
  "Plane Identification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const field_of_view_dimensions_in_float = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9461),
  "Field of View Dimension(s) in Float",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_2,
);

export const isocenter_reference_system_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9462),
  "Isocenter Reference System Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const positioner_isocenter_primary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9463),
  "Positioner Isocenter Primary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const positioner_isocenter_secondary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9464),
  "Positioner Isocenter Secondary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const positioner_isocenter_detector_rotation_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9465),
  "Positioner Isocenter Detector Rotation Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_x_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9466),
  "Table X Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_y_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9467),
  "Table Y Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_z_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9468),
  "Table Z Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_horizontal_rotation_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9469),
  "Table Horizontal Rotation Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_head_tilt_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9470),
  "Table Head Tilt Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_cradle_tilt_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9471),
  "Table Cradle Tilt Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const frame_display_shutter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9472),
  "Frame Display Shutter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquired_image_area_dose_product = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9473),
  "Acquired Image Area Dose Product",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const c_arm_positioner_tabletop_relationship = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9474),
  "C-arm Positioner Tabletop Relationship",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const x_ray_geometry_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9476),
  "X-Ray Geometry Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const irradiation_event_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9477),
  "Irradiation Event Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_3d_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9504),
  "X-Ray 3D Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contributing_sources_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9506),
  "Contributing Sources Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_3d_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9507),
  "X-Ray 3D Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const primary_positioner_scan_arc = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9508),
  "Primary Positioner Scan Arc",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const secondary_positioner_scan_arc = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9509),
  "Secondary Positioner Scan Arc",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const primary_positioner_scan_start_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9510),
  "Primary Positioner Scan Start Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const secondary_positioner_scan_start_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9511),
  "Secondary Positioner Scan Start Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const primary_positioner_increment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9514),
  "Primary Positioner Increment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const secondary_positioner_increment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9515),
  "Secondary Positioner Increment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const start_acquisition_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9516),
  "Start Acquisition DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const end_acquisition_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9517),
  "End Acquisition DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const primary_positioner_increment_sign = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9518),
  "Primary Positioner Increment Sign",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const secondary_positioner_increment_sign = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9519),
  "Secondary Positioner Increment Sign",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const application_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9524),
  "Application Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const application_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9525),
  "Application Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const application_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9526),
  "Application Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const algorithm_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9527),
  "Algorithm Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const algorithm_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9528),
  "Algorithm Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const x_ray_3d_reconstruction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9530),
  "X-Ray 3D Reconstruction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9531),
  "Reconstruction Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const per_projection_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9538),
  "Per Projection Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const detector_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9541),
  "Detector Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_acquisition_dose_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9542),
  "X-Ray Acquisition Dose Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_source_isocenter_primary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9543),
  "X-Ray Source Isocenter Primary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const x_ray_source_isocenter_secondary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9544),
  "X-Ray Source Isocenter Secondary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const breast_support_isocenter_primary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9545),
  "Breast Support Isocenter Primary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const breast_support_isocenter_secondary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9546),
  "Breast Support Isocenter Secondary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const breast_support_x_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9547),
  "Breast Support X Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const breast_support_y_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9548),
  "Breast Support Y Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const breast_support_z_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9549),
  "Breast Support Z Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const detector_isocenter_primary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9550),
  "Detector Isocenter Primary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const detector_isocenter_secondary_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9551),
  "Detector Isocenter Secondary Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const detector_x_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9552),
  "Detector X Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const detector_y_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9553),
  "Detector Y Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const detector_z_position_to_isocenter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9554),
  "Detector Z Position to Isocenter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const x_ray_grid_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9555),
  "X-Ray Grid Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_ray_filter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9556),
  "X-Ray Filter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const detector_active_area_tlhc_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9557),
  "Detector Active Area TLHC Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const detector_active_area_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9558),
  "Detector Active Area Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_6,
);

export const positioner_primary_angle_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9559),
  "Positioner Primary Angle Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const diffusion_b_matrix_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9601),
  "Diffusion b-matrix Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const diffusion_b_value_xx = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9602),
  "Diffusion b-value XX",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const diffusion_b_value_xy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9603),
  "Diffusion b-value XY",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const diffusion_b_value_xz = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9604),
  "Diffusion b-value XZ",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const diffusion_b_value_yy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9605),
  "Diffusion b-value YY",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const diffusion_b_value_yz = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9606),
  "Diffusion b-value YZ",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const diffusion_b_value_zz = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9607),
  "Diffusion b-value ZZ",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const functional_mr_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9621),
  "Functional MR Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const functional_settling_phase_frames_present = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9622),
  "Functional Settling Phase Frames Present",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const functional_sync_pulse = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9623),
  "Functional Sync Pulse",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const settling_phase_frame = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9624),
  "Settling Phase Frame",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const decay_correction_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9701),
  "Decay Correction DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const start_density_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9715),
  "Start Density Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const start_relative_density_difference_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9716),
  "Start Relative Density Difference Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const start_cardiac_trigger_count_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9717),
  "Start Cardiac Trigger Count Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const start_respiratory_trigger_count_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9718),
  "Start Respiratory Trigger Count Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const termination_counts_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9719),
  "Termination Counts Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const termination_density_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9720),
  "Termination Density Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const termination_relative_density_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9721),
  "Termination Relative Density Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const termination_time_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9722),
  "Termination Time Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const termination_cardiac_trigger_count_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9723),
  "Termination Cardiac Trigger Count Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const termination_respiratory_trigger_count_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9724),
  "Termination Respiratory Trigger Count Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const detector_geometry = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9725),
  "Detector Geometry",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const transverse_detector_separation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9726),
  "Transverse Detector Separation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const axial_detector_dimension = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9727),
  "Axial Detector Dimension",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiopharmaceutical_agent_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9729),
  "Radiopharmaceutical Agent Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pet_frame_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9732),
  "PET Frame Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pet_detector_motion_details_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9733),
  "PET Detector Motion Details Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pet_table_dynamics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9734),
  "PET Table Dynamics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pet_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9735),
  "PET Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pet_frame_correction_factors_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9736),
  "PET Frame Correction Factors Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiopharmaceutical_usage_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9737),
  "Radiopharmaceutical Usage Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const attenuation_correction_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9738),
  "Attenuation Correction Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_iterations = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9739),
  "Number of Iterations",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_subsets = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9740),
  "Number of Subsets",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pet_reconstruction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9749),
  "PET Reconstruction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pet_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9751),
  "PET Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const time_of_flight_information_used = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9755),
  "Time of Flight Information Used",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reconstruction_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9756),
  "Reconstruction Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const decay_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9758),
  "Decay Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const attenuation_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9759),
  "Attenuation Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scatter_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9760),
  "Scatter Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dead_time_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9761),
  "Dead Time Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gantry_motion_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9762),
  "Gantry Motion Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_motion_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9763),
  "Patient Motion Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const count_loss_normalization_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9764),
  "Count Loss Normalization Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const randoms_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9765),
  "Randoms Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const non_uniform_radial_sampling_corrected = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9766),
  "Non-uniform Radial Sampling Corrected",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const sensitivity_calibrated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9767),
  "Sensitivity Calibrated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const detector_normalization_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9768),
  "Detector Normalization Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const iterative_reconstruction_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9769),
  "Iterative Reconstruction Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const attenuation_correction_temporal_relationship = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9770),
  "Attenuation Correction Temporal Relationship",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_physiological_state_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9771),
  "Patient Physiological State Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_physiological_state_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9772),
  "Patient Physiological State Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const depths_of_focus = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9801),
  "Depth(s) of Focus",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const excluded_intervals_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9803),
  "Excluded Intervals Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const exclusion_start_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9804),
  "Exclusion Start DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const exclusion_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9805),
  "Exclusion Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const us_image_description_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9806),
  "US Image Description Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_data_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9807),
  "Image Data Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const data_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9808),
  "Data Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const transducer_scan_pattern_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9809),
  "Transducer Scan Pattern Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const aliased_data_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x980B),
  "Aliased Data Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const position_measuring_device_used = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x980C),
  "Position Measuring Device Used",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const transducer_geometry_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x980D),
  "Transducer Geometry Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transducer_beam_steering_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x980E),
  "Transducer Beam Steering Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transducer_application_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x980F),
  "Transducer Application Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const zero_velocity_pixel_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9810),
  "Zero Velocity Pixel Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const photoacoustic_excitation_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9821),
  "Photoacoustic Excitation Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const excitation_spectral_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9822),
  "Excitation Spectral Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const excitation_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9823),
  "Excitation Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const excitation_pulse_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9824),
  "Excitation Pulse Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const excitation_wavelength_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9825),
  "Excitation Wavelength Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const excitation_wavelength = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9826),
  "Excitation Wavelength",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const illumination_translation_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9828),
  "Illumination Translation Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acoustic_coupling_medium_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9829),
  "Acoustic Coupling Medium Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acoustic_coupling_medium_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x982A),
  "Acoustic Coupling Medium Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acoustic_coupling_medium_temperature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x982B),
  "Acoustic Coupling Medium Temperature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const transducer_response_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x982C),
  "Transducer Response Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const center_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x982D),
  "Center Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const fractional_bandwidth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x982E),
  "Fractional Bandwidth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const lower_cutoff_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x982F),
  "Lower Cutoff Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const upper_cutoff_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9830),
  "Upper Cutoff Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const transducer_technology_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9831),
  "Transducer Technology Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const sound_speed_correction_mechanism_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9832),
  "Sound Speed Correction Mechanism Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const object_sound_speed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9833),
  "Object Sound Speed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const acoustic_coupling_medium_sound_speed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9834),
  "Acoustic Coupling Medium Sound Speed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const photoacoustic_image_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9835),
  "Photoacoustic Image Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_data_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9836),
  "Image Data Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reference_location_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9900),
  "Reference Location Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const reference_location_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9901),
  "Reference Location Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const reference_basis_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9902),
  "Reference Basis Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reference_geometry_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9903),
  "Reference Geometry Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const offset_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9904),
  "Offset Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const offset_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9905),
  "Offset Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const potential_scheduled_protocol_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9906),
  "Potential Scheduled Protocol Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const potential_requested_procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9907),
  "Potential Requested Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const potential_reasons_for_procedure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9908),
  "Potential Reasons for Procedure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1_to_n,
);

export const potential_reasons_for_procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9909),
  "Potential Reasons for Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const potential_diagnostic_tasks = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x990A),
  "Potential Diagnostic Tasks",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1_to_n,
);

export const contraindications_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x990B),
  "Contraindications Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_defined_protocol_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x990C),
  "Referenced Defined Protocol Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_performed_protocol_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x990D),
  "Referenced Performed Protocol Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const predecessor_protocol_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x990E),
  "Predecessor Protocol Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const protocol_planning_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x990F),
  "Protocol Planning Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const protocol_design_rationale = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9910),
  "Protocol Design Rationale",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const patient_specification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9911),
  "Patient Specification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const model_specification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9912),
  "Model Specification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const parameters_specification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9913),
  "Parameters Specification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const instruction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9914),
  "Instruction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const instruction_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9915),
  "Instruction Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const instruction_text = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9916),
  "Instruction Text",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const instruction_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9917),
  "Instruction Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const instruction_performed_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9918),
  "Instruction Performed Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const instruction_performed_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9919),
  "Instruction Performed DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const instruction_performance_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x991A),
  "Instruction Performance Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const patient_positioning_instruction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x991B),
  "Patient Positioning Instruction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const positioning_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x991C),
  "Positioning Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const positioning_landmark_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x991D),
  "Positioning Landmark Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const target_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x991E),
  "Target Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const acquisition_protocol_element_specification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x991F),
  "Acquisition Protocol Element Specification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_protocol_element_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9920),
  "Acquisition Protocol Element Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const protocol_element_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9921),
  "Protocol Element Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const protocol_element_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9922),
  "Protocol Element Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const protocol_element_characteristics_summary = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9923),
  "Protocol Element Characteristics Summary",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const protocol_element_purpose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9924),
  "Protocol Element Purpose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const acquisition_motion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9930),
  "Acquisition Motion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acquisition_start_location_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9931),
  "Acquisition Start Location Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_end_location_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9932),
  "Acquisition End Location Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_protocol_element_specification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9933),
  "Reconstruction Protocol Element Specification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_protocol_element_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9934),
  "Reconstruction Protocol Element Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const storage_protocol_element_specification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9935),
  "Storage Protocol Element Specification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const storage_protocol_element_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9936),
  "Storage Protocol Element Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requested_series_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9937),
  "Requested Series Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_acquisition_protocol_element_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9938),
  "Source Acquisition Protocol Element Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const source_acquisition_beam_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9939),
  "Source Acquisition Beam Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const source_reconstruction_protocol_element_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x993A),
  "Source Reconstruction Protocol Element Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const reconstruction_start_location_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x993B),
  "Reconstruction Start Location Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_end_location_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x993C),
  "Reconstruction End Location Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_algorithm_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x993D),
  "Reconstruction Algorithm Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_target_center_location_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x993E),
  "Reconstruction Target Center Location Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_filter_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9941),
  "Image Filter Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const ctdi_vol_notification_trigger = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9942),
  "CTDIvol Notification Trigger",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const dlp_notification_trigger = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9943),
  "DLP Notification Trigger",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const auto_kvp_selection_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9944),
  "Auto KVP Selection Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const auto_kvp_upper_bound = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9945),
  "Auto KVP Upper Bound",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const auto_kvp_lower_bound = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9946),
  "Auto KVP Lower Bound",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const protocol_defined_patient_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0x9947),
  "Protocol Defined Patient Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const contributing_equipment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0xA001),
  "Contributing Equipment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contribution_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0xA002),
  "Contribution DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const contribution_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x18, 0xA003),
  "Contribution Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

function find_element_in_group_0018(element) {
  if (element === 0x10) {
    return new Ok(contrast_bolus_agent);
  } else if (element === 0x12) {
    return new Ok(contrast_bolus_agent_sequence);
  } else if (element === 0x13) {
    return new Ok(contrast_bolus_t1_relaxivity);
  } else if (element === 0x14) {
    return new Ok(contrast_bolus_administration_route_sequence);
  } else if (element === 0x15) {
    return new Ok(body_part_examined);
  } else if (element === 0x20) {
    return new Ok(scanning_sequence);
  } else if (element === 0x21) {
    return new Ok(sequence_variant);
  } else if (element === 0x22) {
    return new Ok(scan_options);
  } else if (element === 0x23) {
    return new Ok(mr_acquisition_type);
  } else if (element === 0x24) {
    return new Ok(sequence_name);
  } else if (element === 0x25) {
    return new Ok(angio_flag);
  } else if (element === 0x26) {
    return new Ok(intervention_drug_information_sequence);
  } else if (element === 0x27) {
    return new Ok(intervention_drug_stop_time);
  } else if (element === 0x28) {
    return new Ok(intervention_drug_dose);
  } else if (element === 0x29) {
    return new Ok(intervention_drug_code_sequence);
  } else if (element === 0x2A) {
    return new Ok(additional_drug_sequence);
  } else if (element === 0x30) {
    return new Ok(radionuclide);
  } else if (element === 0x31) {
    return new Ok(radiopharmaceutical);
  } else if (element === 0x32) {
    return new Ok(energy_window_centerline);
  } else if (element === 0x33) {
    return new Ok(energy_window_total_width);
  } else if (element === 0x34) {
    return new Ok(intervention_drug_name);
  } else if (element === 0x35) {
    return new Ok(intervention_drug_start_time);
  } else if (element === 0x36) {
    return new Ok(intervention_sequence);
  } else if (element === 0x37) {
    return new Ok(therapy_type);
  } else if (element === 0x38) {
    return new Ok(intervention_status);
  } else if (element === 0x39) {
    return new Ok(therapy_description);
  } else if (element === 0x3A) {
    return new Ok(intervention_description);
  } else if (element === 0x40) {
    return new Ok(cine_rate);
  } else if (element === 0x42) {
    return new Ok(initial_cine_run_state);
  } else if (element === 0x50) {
    return new Ok(slice_thickness);
  } else if (element === 0x60) {
    return new Ok(kvp);
  } else if (element === 0x70) {
    return new Ok(counts_accumulated);
  } else if (element === 0x71) {
    return new Ok(acquisition_termination_condition);
  } else if (element === 0x72) {
    return new Ok(effective_duration);
  } else if (element === 0x73) {
    return new Ok(acquisition_start_condition);
  } else if (element === 0x74) {
    return new Ok(acquisition_start_condition_data);
  } else if (element === 0x75) {
    return new Ok(acquisition_termination_condition_data);
  } else if (element === 0x80) {
    return new Ok(repetition_time);
  } else if (element === 0x81) {
    return new Ok(echo_time);
  } else if (element === 0x82) {
    return new Ok(inversion_time);
  } else if (element === 0x83) {
    return new Ok(number_of_averages);
  } else if (element === 0x84) {
    return new Ok(imaging_frequency);
  } else if (element === 0x85) {
    return new Ok(imaged_nucleus);
  } else if (element === 0x86) {
    return new Ok(echo_numbers);
  } else if (element === 0x87) {
    return new Ok(magnetic_field_strength);
  } else if (element === 0x88) {
    return new Ok(spacing_between_slices);
  } else if (element === 0x89) {
    return new Ok(number_of_phase_encoding_steps);
  } else if (element === 0x90) {
    return new Ok(data_collection_diameter);
  } else if (element === 0x91) {
    return new Ok(echo_train_length);
  } else if (element === 0x93) {
    return new Ok(percent_sampling);
  } else if (element === 0x94) {
    return new Ok(percent_phase_field_of_view);
  } else if (element === 0x95) {
    return new Ok(pixel_bandwidth);
  } else if (element === 0x1000) {
    return new Ok(device_serial_number);
  } else if (element === 0x1002) {
    return new Ok(device_uid);
  } else if (element === 0x1003) {
    return new Ok(device_id);
  } else if (element === 0x1004) {
    return new Ok(plate_id);
  } else if (element === 0x1005) {
    return new Ok(generator_id);
  } else if (element === 0x1006) {
    return new Ok(grid_id);
  } else if (element === 0x1007) {
    return new Ok(cassette_id);
  } else if (element === 0x1008) {
    return new Ok(gantry_id);
  } else if (element === 0x1009) {
    return new Ok(unique_device_identifier);
  } else if (element === 0x100A) {
    return new Ok(udi_sequence);
  } else if (element === 0x100B) {
    return new Ok(manufacturer_device_class_uid);
  } else if (element === 0x1010) {
    return new Ok(secondary_capture_device_id);
  } else if (element === 0x1011) {
    return new Ok(hardcopy_creation_device_id);
  } else if (element === 0x1012) {
    return new Ok(date_of_secondary_capture);
  } else if (element === 0x1014) {
    return new Ok(time_of_secondary_capture);
  } else if (element === 0x1016) {
    return new Ok(secondary_capture_device_manufacturer);
  } else if (element === 0x1017) {
    return new Ok(hardcopy_device_manufacturer);
  } else if (element === 0x1018) {
    return new Ok(secondary_capture_device_manufacturer_model_name);
  } else if (element === 0x1019) {
    return new Ok(secondary_capture_device_software_versions);
  } else if (element === 0x101A) {
    return new Ok(hardcopy_device_software_version);
  } else if (element === 0x101B) {
    return new Ok(hardcopy_device_manufacturer_model_name);
  } else if (element === 0x1020) {
    return new Ok(software_versions);
  } else if (element === 0x1022) {
    return new Ok(video_image_format_acquired);
  } else if (element === 0x1023) {
    return new Ok(digital_image_format_acquired);
  } else if (element === 0x1030) {
    return new Ok(protocol_name);
  } else if (element === 0x1040) {
    return new Ok(contrast_bolus_route);
  } else if (element === 0x1041) {
    return new Ok(contrast_bolus_volume);
  } else if (element === 0x1042) {
    return new Ok(contrast_bolus_start_time);
  } else if (element === 0x1043) {
    return new Ok(contrast_bolus_stop_time);
  } else if (element === 0x1044) {
    return new Ok(contrast_bolus_total_dose);
  } else if (element === 0x1045) {
    return new Ok(syringe_counts);
  } else if (element === 0x1046) {
    return new Ok(contrast_flow_rate);
  } else if (element === 0x1047) {
    return new Ok(contrast_flow_duration);
  } else if (element === 0x1048) {
    return new Ok(contrast_bolus_ingredient);
  } else if (element === 0x1049) {
    return new Ok(contrast_bolus_ingredient_concentration);
  } else if (element === 0x1050) {
    return new Ok(spatial_resolution);
  } else if (element === 0x1060) {
    return new Ok(trigger_time);
  } else if (element === 0x1061) {
    return new Ok(trigger_source_or_type);
  } else if (element === 0x1062) {
    return new Ok(nominal_interval);
  } else if (element === 0x1063) {
    return new Ok(frame_time);
  } else if (element === 0x1064) {
    return new Ok(cardiac_framing_type);
  } else if (element === 0x1065) {
    return new Ok(frame_time_vector);
  } else if (element === 0x1066) {
    return new Ok(frame_delay);
  } else if (element === 0x1067) {
    return new Ok(image_trigger_delay);
  } else if (element === 0x1068) {
    return new Ok(multiplex_group_time_offset);
  } else if (element === 0x1069) {
    return new Ok(trigger_time_offset);
  } else if (element === 0x106A) {
    return new Ok(synchronization_trigger);
  } else if (element === 0x106C) {
    return new Ok(synchronization_channel);
  } else if (element === 0x106E) {
    return new Ok(trigger_sample_position);
  } else if (element === 0x1070) {
    return new Ok(radiopharmaceutical_route);
  } else if (element === 0x1071) {
    return new Ok(radiopharmaceutical_volume);
  } else if (element === 0x1072) {
    return new Ok(radiopharmaceutical_start_time);
  } else if (element === 0x1073) {
    return new Ok(radiopharmaceutical_stop_time);
  } else if (element === 0x1074) {
    return new Ok(radionuclide_total_dose);
  } else if (element === 0x1075) {
    return new Ok(radionuclide_half_life);
  } else if (element === 0x1076) {
    return new Ok(radionuclide_positron_fraction);
  } else if (element === 0x1077) {
    return new Ok(radiopharmaceutical_specific_activity);
  } else if (element === 0x1078) {
    return new Ok(radiopharmaceutical_start_date_time);
  } else if (element === 0x1079) {
    return new Ok(radiopharmaceutical_stop_date_time);
  } else if (element === 0x1080) {
    return new Ok(beat_rejection_flag);
  } else if (element === 0x1081) {
    return new Ok(low_rr_value);
  } else if (element === 0x1082) {
    return new Ok(high_rr_value);
  } else if (element === 0x1083) {
    return new Ok(intervals_acquired);
  } else if (element === 0x1084) {
    return new Ok(intervals_rejected);
  } else if (element === 0x1085) {
    return new Ok(pvc_rejection);
  } else if (element === 0x1086) {
    return new Ok(skip_beats);
  } else if (element === 0x1088) {
    return new Ok(heart_rate);
  } else if (element === 0x1090) {
    return new Ok(cardiac_number_of_images);
  } else if (element === 0x1094) {
    return new Ok(trigger_window);
  } else if (element === 0x1100) {
    return new Ok(reconstruction_diameter);
  } else if (element === 0x1110) {
    return new Ok(distance_source_to_detector);
  } else if (element === 0x1111) {
    return new Ok(distance_source_to_patient);
  } else if (element === 0x1114) {
    return new Ok(estimated_radiographic_magnification_factor);
  } else if (element === 0x1120) {
    return new Ok(gantry_detector_tilt);
  } else if (element === 0x1121) {
    return new Ok(gantry_detector_slew);
  } else if (element === 0x1130) {
    return new Ok(table_height);
  } else if (element === 0x1131) {
    return new Ok(table_traverse);
  } else if (element === 0x1134) {
    return new Ok(table_motion);
  } else if (element === 0x1135) {
    return new Ok(table_vertical_increment);
  } else if (element === 0x1136) {
    return new Ok(table_lateral_increment);
  } else if (element === 0x1137) {
    return new Ok(table_longitudinal_increment);
  } else if (element === 0x1138) {
    return new Ok(table_angle);
  } else if (element === 0x113A) {
    return new Ok(table_type);
  } else if (element === 0x1140) {
    return new Ok(rotation_direction);
  } else if (element === 0x1141) {
    return new Ok(angular_position);
  } else if (element === 0x1142) {
    return new Ok(radial_position);
  } else if (element === 0x1143) {
    return new Ok(scan_arc);
  } else if (element === 0x1144) {
    return new Ok(angular_step);
  } else if (element === 0x1145) {
    return new Ok(center_of_rotation_offset);
  } else if (element === 0x1146) {
    return new Ok(rotation_offset);
  } else if (element === 0x1147) {
    return new Ok(field_of_view_shape);
  } else if (element === 0x1149) {
    return new Ok(field_of_view_dimensions);
  } else if (element === 0x1150) {
    return new Ok(exposure_time);
  } else if (element === 0x1151) {
    return new Ok(x_ray_tube_current);
  } else if (element === 0x1152) {
    return new Ok(exposure);
  } else if (element === 0x1153) {
    return new Ok(exposure_in_microamp_seconds);
  } else if (element === 0x1154) {
    return new Ok(average_pulse_width);
  } else if (element === 0x1155) {
    return new Ok(radiation_setting);
  } else if (element === 0x1156) {
    return new Ok(rectification_type);
  } else if (element === 0x115A) {
    return new Ok(radiation_mode);
  } else if (element === 0x115E) {
    return new Ok(image_and_fluoroscopy_area_dose_product);
  } else if (element === 0x1160) {
    return new Ok(filter_type);
  } else if (element === 0x1161) {
    return new Ok(type_of_filters);
  } else if (element === 0x1162) {
    return new Ok(intensifier_size);
  } else if (element === 0x1164) {
    return new Ok(imager_pixel_spacing);
  } else if (element === 0x1166) {
    return new Ok(grid);
  } else if (element === 0x1170) {
    return new Ok(generator_power);
  } else if (element === 0x1180) {
    return new Ok(collimator_grid_name);
  } else if (element === 0x1181) {
    return new Ok(collimator_type);
  } else if (element === 0x1182) {
    return new Ok(focal_distance);
  } else if (element === 0x1183) {
    return new Ok(x_focus_center);
  } else if (element === 0x1184) {
    return new Ok(y_focus_center);
  } else if (element === 0x1190) {
    return new Ok(focal_spots);
  } else if (element === 0x1191) {
    return new Ok(anode_target_material);
  } else if (element === 0x11A0) {
    return new Ok(body_part_thickness);
  } else if (element === 0x11A2) {
    return new Ok(compression_force);
  } else if (element === 0x11A3) {
    return new Ok(compression_pressure);
  } else if (element === 0x11A4) {
    return new Ok(paddle_description);
  } else if (element === 0x11A5) {
    return new Ok(compression_contact_area);
  } else if (element === 0x11B0) {
    return new Ok(acquisition_mode);
  } else if (element === 0x11B1) {
    return new Ok(dose_mode_name);
  } else if (element === 0x11B2) {
    return new Ok(acquired_subtraction_mask_flag);
  } else if (element === 0x11B3) {
    return new Ok(fluoroscopy_persistence_flag);
  } else if (element === 0x11B4) {
    return new Ok(fluoroscopy_last_image_hold_persistence_flag);
  } else if (element === 0x11B5) {
    return new Ok(upper_limit_number_of_persistent_fluoroscopy_frames);
  } else if (element === 0x11B6) {
    return new Ok(contrast_bolus_auto_injection_trigger_flag);
  } else if (element === 0x11B7) {
    return new Ok(contrast_bolus_injection_delay);
  } else if (element === 0x11B8) {
    return new Ok(xa_acquisition_phase_details_sequence);
  } else if (element === 0x11B9) {
    return new Ok(xa_acquisition_frame_rate);
  } else if (element === 0x11BA) {
    return new Ok(xa_plane_details_sequence);
  } else if (element === 0x11BB) {
    return new Ok(acquisition_field_of_view_label);
  } else if (element === 0x11BC) {
    return new Ok(x_ray_filter_details_sequence);
  } else if (element === 0x11BD) {
    return new Ok(xa_acquisition_duration);
  } else if (element === 0x11BE) {
    return new Ok(reconstruction_pipeline_type);
  } else if (element === 0x11BF) {
    return new Ok(image_filter_details_sequence);
  } else if (element === 0x11C0) {
    return new Ok(applied_mask_subtraction_flag);
  } else if (element === 0x11C1) {
    return new Ok(requested_series_description_code_sequence);
  } else if (element === 0x1200) {
    return new Ok(date_of_last_calibration);
  } else if (element === 0x1201) {
    return new Ok(time_of_last_calibration);
  } else if (element === 0x1202) {
    return new Ok(date_time_of_last_calibration);
  } else if (element === 0x1203) {
    return new Ok(calibration_date_time);
  } else if (element === 0x1204) {
    return new Ok(date_of_manufacture);
  } else if (element === 0x1205) {
    return new Ok(date_of_installation);
  } else if (element === 0x1210) {
    return new Ok(convolution_kernel);
  } else if (element === 0x1240) {
    return new Ok(upper_lower_pixel_values);
  } else if (element === 0x1242) {
    return new Ok(actual_frame_duration);
  } else if (element === 0x1243) {
    return new Ok(count_rate);
  } else if (element === 0x1244) {
    return new Ok(preferred_playback_sequencing);
  } else if (element === 0x1250) {
    return new Ok(receive_coil_name);
  } else if (element === 0x1251) {
    return new Ok(transmit_coil_name);
  } else if (element === 0x1260) {
    return new Ok(plate_type);
  } else if (element === 0x1261) {
    return new Ok(phosphor_type);
  } else if (element === 0x1271) {
    return new Ok(water_equivalent_diameter);
  } else if (element === 0x1272) {
    return new Ok(water_equivalent_diameter_calculation_method_code_sequence);
  } else if (element === 0x1300) {
    return new Ok(scan_velocity);
  } else if (element === 0x1301) {
    return new Ok(whole_body_technique);
  } else if (element === 0x1302) {
    return new Ok(scan_length);
  } else if (element === 0x1310) {
    return new Ok(acquisition_matrix);
  } else if (element === 0x1312) {
    return new Ok(in_plane_phase_encoding_direction);
  } else if (element === 0x1314) {
    return new Ok(flip_angle);
  } else if (element === 0x1315) {
    return new Ok(variable_flip_angle_flag);
  } else if (element === 0x1316) {
    return new Ok(sar);
  } else if (element === 0x1318) {
    return new Ok(d_bdt);
  } else if (element === 0x1320) {
    return new Ok(b_1rms);
  } else if (element === 0x1400) {
    return new Ok(acquisition_device_processing_description);
  } else if (element === 0x1401) {
    return new Ok(acquisition_device_processing_code);
  } else if (element === 0x1402) {
    return new Ok(cassette_orientation);
  } else if (element === 0x1403) {
    return new Ok(cassette_size);
  } else if (element === 0x1404) {
    return new Ok(exposures_on_plate);
  } else if (element === 0x1405) {
    return new Ok(relative_x_ray_exposure);
  } else if (element === 0x1411) {
    return new Ok(exposure_index);
  } else if (element === 0x1412) {
    return new Ok(target_exposure_index);
  } else if (element === 0x1413) {
    return new Ok(deviation_index);
  } else if (element === 0x1450) {
    return new Ok(column_angulation);
  } else if (element === 0x1460) {
    return new Ok(tomo_layer_height);
  } else if (element === 0x1470) {
    return new Ok(tomo_angle);
  } else if (element === 0x1480) {
    return new Ok(tomo_time);
  } else if (element === 0x1490) {
    return new Ok(tomo_type);
  } else if (element === 0x1491) {
    return new Ok(tomo_class);
  } else if (element === 0x1495) {
    return new Ok(number_of_tomosynthesis_source_images);
  } else if (element === 0x1500) {
    return new Ok(positioner_motion);
  } else if (element === 0x1508) {
    return new Ok(positioner_type);
  } else if (element === 0x1510) {
    return new Ok(positioner_primary_angle);
  } else if (element === 0x1511) {
    return new Ok(positioner_secondary_angle);
  } else if (element === 0x1520) {
    return new Ok(positioner_primary_angle_increment);
  } else if (element === 0x1521) {
    return new Ok(positioner_secondary_angle_increment);
  } else if (element === 0x1530) {
    return new Ok(detector_primary_angle);
  } else if (element === 0x1531) {
    return new Ok(detector_secondary_angle);
  } else if (element === 0x1600) {
    return new Ok(shutter_shape);
  } else if (element === 0x1602) {
    return new Ok(shutter_left_vertical_edge);
  } else if (element === 0x1604) {
    return new Ok(shutter_right_vertical_edge);
  } else if (element === 0x1606) {
    return new Ok(shutter_upper_horizontal_edge);
  } else if (element === 0x1608) {
    return new Ok(shutter_lower_horizontal_edge);
  } else if (element === 0x1610) {
    return new Ok(center_of_circular_shutter);
  } else if (element === 0x1612) {
    return new Ok(radius_of_circular_shutter);
  } else if (element === 0x1620) {
    return new Ok(vertices_of_the_polygonal_shutter);
  } else if (element === 0x1622) {
    return new Ok(shutter_presentation_value);
  } else if (element === 0x1623) {
    return new Ok(shutter_overlay_group);
  } else if (element === 0x1624) {
    return new Ok(shutter_presentation_color_cie_lab_value);
  } else if (element === 0x1630) {
    return new Ok(outline_shape_type);
  } else if (element === 0x1631) {
    return new Ok(outline_left_vertical_edge);
  } else if (element === 0x1632) {
    return new Ok(outline_right_vertical_edge);
  } else if (element === 0x1633) {
    return new Ok(outline_upper_horizontal_edge);
  } else if (element === 0x1634) {
    return new Ok(outline_lower_horizontal_edge);
  } else if (element === 0x1635) {
    return new Ok(center_of_circular_outline);
  } else if (element === 0x1636) {
    return new Ok(diameter_of_circular_outline);
  } else if (element === 0x1637) {
    return new Ok(number_of_polygonal_vertices);
  } else if (element === 0x1638) {
    return new Ok(vertices_of_the_polygonal_outline);
  } else if (element === 0x1700) {
    return new Ok(collimator_shape);
  } else if (element === 0x1702) {
    return new Ok(collimator_left_vertical_edge);
  } else if (element === 0x1704) {
    return new Ok(collimator_right_vertical_edge);
  } else if (element === 0x1706) {
    return new Ok(collimator_upper_horizontal_edge);
  } else if (element === 0x1708) {
    return new Ok(collimator_lower_horizontal_edge);
  } else if (element === 0x1710) {
    return new Ok(center_of_circular_collimator);
  } else if (element === 0x1712) {
    return new Ok(radius_of_circular_collimator);
  } else if (element === 0x1720) {
    return new Ok(vertices_of_the_polygonal_collimator);
  } else if (element === 0x1800) {
    return new Ok(acquisition_time_synchronized);
  } else if (element === 0x1801) {
    return new Ok(time_source);
  } else if (element === 0x1802) {
    return new Ok(time_distribution_protocol);
  } else if (element === 0x1803) {
    return new Ok(ntp_source_address);
  } else if (element === 0x2001) {
    return new Ok(page_number_vector);
  } else if (element === 0x2002) {
    return new Ok(frame_label_vector);
  } else if (element === 0x2003) {
    return new Ok(frame_primary_angle_vector);
  } else if (element === 0x2004) {
    return new Ok(frame_secondary_angle_vector);
  } else if (element === 0x2005) {
    return new Ok(slice_location_vector);
  } else if (element === 0x2006) {
    return new Ok(display_window_label_vector);
  } else if (element === 0x2010) {
    return new Ok(nominal_scanned_pixel_spacing);
  } else if (element === 0x2020) {
    return new Ok(digitizing_device_transport_direction);
  } else if (element === 0x2030) {
    return new Ok(rotation_of_scanned_film);
  } else if (element === 0x2041) {
    return new Ok(biopsy_target_sequence);
  } else if (element === 0x2042) {
    return new Ok(target_uid);
  } else if (element === 0x2043) {
    return new Ok(localizing_cursor_position);
  } else if (element === 0x2044) {
    return new Ok(calculated_target_position);
  } else if (element === 0x2045) {
    return new Ok(target_label);
  } else if (element === 0x2046) {
    return new Ok(displayed_z_value);
  } else if (element === 0x3100) {
    return new Ok(ivus_acquisition);
  } else if (element === 0x3101) {
    return new Ok(ivus_pullback_rate);
  } else if (element === 0x3102) {
    return new Ok(ivus_gated_rate);
  } else if (element === 0x3103) {
    return new Ok(ivus_pullback_start_frame_number);
  } else if (element === 0x3104) {
    return new Ok(ivus_pullback_stop_frame_number);
  } else if (element === 0x3105) {
    return new Ok(lesion_number);
  } else if (element === 0x4000) {
    return new Ok(acquisition_comments);
  } else if (element === 0x5000) {
    return new Ok(output_power);
  } else if (element === 0x5010) {
    return new Ok(transducer_data);
  } else if (element === 0x5011) {
    return new Ok(transducer_identification_sequence);
  } else if (element === 0x5012) {
    return new Ok(focus_depth);
  } else if (element === 0x5020) {
    return new Ok(processing_function);
  } else if (element === 0x5021) {
    return new Ok(postprocessing_function);
  } else if (element === 0x5022) {
    return new Ok(mechanical_index);
  } else if (element === 0x5024) {
    return new Ok(bone_thermal_index);
  } else if (element === 0x5026) {
    return new Ok(cranial_thermal_index);
  } else if (element === 0x5027) {
    return new Ok(soft_tissue_thermal_index);
  } else if (element === 0x5028) {
    return new Ok(soft_tissue_focus_thermal_index);
  } else if (element === 0x5029) {
    return new Ok(soft_tissue_surface_thermal_index);
  } else if (element === 0x5030) {
    return new Ok(dynamic_range);
  } else if (element === 0x5040) {
    return new Ok(total_gain);
  } else if (element === 0x5050) {
    return new Ok(depth_of_scan_field);
  } else if (element === 0x5100) {
    return new Ok(patient_position);
  } else if (element === 0x5101) {
    return new Ok(view_position);
  } else if (element === 0x5104) {
    return new Ok(projection_eponymous_name_code_sequence);
  } else if (element === 0x5210) {
    return new Ok(image_transformation_matrix);
  } else if (element === 0x5212) {
    return new Ok(image_translation_vector);
  } else if (element === 0x6000) {
    return new Ok(sensitivity);
  } else if (element === 0x6011) {
    return new Ok(sequence_of_ultrasound_regions);
  } else if (element === 0x6012) {
    return new Ok(region_spatial_format);
  } else if (element === 0x6014) {
    return new Ok(region_data_type);
  } else if (element === 0x6016) {
    return new Ok(region_flags);
  } else if (element === 0x6018) {
    return new Ok(region_location_min_x0);
  } else if (element === 0x601A) {
    return new Ok(region_location_min_y0);
  } else if (element === 0x601C) {
    return new Ok(region_location_max_x1);
  } else if (element === 0x601E) {
    return new Ok(region_location_max_y1);
  } else if (element === 0x6020) {
    return new Ok(reference_pixel_x0);
  } else if (element === 0x6022) {
    return new Ok(reference_pixel_y0);
  } else if (element === 0x6024) {
    return new Ok(physical_units_x_direction);
  } else if (element === 0x6026) {
    return new Ok(physical_units_y_direction);
  } else if (element === 0x6028) {
    return new Ok(reference_pixel_physical_value_x);
  } else if (element === 0x602A) {
    return new Ok(reference_pixel_physical_value_y);
  } else if (element === 0x602C) {
    return new Ok(physical_delta_x);
  } else if (element === 0x602E) {
    return new Ok(physical_delta_y);
  } else if (element === 0x6030) {
    return new Ok(transducer_frequency);
  } else if (element === 0x6031) {
    return new Ok(transducer_type);
  } else if (element === 0x6032) {
    return new Ok(pulse_repetition_frequency);
  } else if (element === 0x6034) {
    return new Ok(doppler_correction_angle);
  } else if (element === 0x6036) {
    return new Ok(steering_angle);
  } else if (element === 0x6038) {
    return new Ok(doppler_sample_volume_x_position_retired);
  } else if (element === 0x6039) {
    return new Ok(doppler_sample_volume_x_position);
  } else if (element === 0x603A) {
    return new Ok(doppler_sample_volume_y_position_retired);
  } else if (element === 0x603B) {
    return new Ok(doppler_sample_volume_y_position);
  } else if (element === 0x603C) {
    return new Ok(tm_line_position_x0_retired);
  } else if (element === 0x603D) {
    return new Ok(tm_line_position_x0);
  } else if (element === 0x603E) {
    return new Ok(tm_line_position_y0_retired);
  } else if (element === 0x603F) {
    return new Ok(tm_line_position_y0);
  } else if (element === 0x6040) {
    return new Ok(tm_line_position_x1_retired);
  } else if (element === 0x6041) {
    return new Ok(tm_line_position_x1);
  } else if (element === 0x6042) {
    return new Ok(tm_line_position_y1_retired);
  } else if (element === 0x6043) {
    return new Ok(tm_line_position_y1);
  } else if (element === 0x6044) {
    return new Ok(pixel_component_organization);
  } else if (element === 0x6046) {
    return new Ok(pixel_component_mask);
  } else if (element === 0x6048) {
    return new Ok(pixel_component_range_start);
  } else if (element === 0x604A) {
    return new Ok(pixel_component_range_stop);
  } else if (element === 0x604C) {
    return new Ok(pixel_component_physical_units);
  } else if (element === 0x604E) {
    return new Ok(pixel_component_data_type);
  } else if (element === 0x6050) {
    return new Ok(number_of_table_break_points);
  } else if (element === 0x6052) {
    return new Ok(table_of_x_break_points);
  } else if (element === 0x6054) {
    return new Ok(table_of_y_break_points);
  } else if (element === 0x6056) {
    return new Ok(number_of_table_entries);
  } else if (element === 0x6058) {
    return new Ok(table_of_pixel_values);
  } else if (element === 0x605A) {
    return new Ok(table_of_parameter_values);
  } else if (element === 0x6060) {
    return new Ok(r_wave_time_vector);
  } else if (element === 0x6070) {
    return new Ok(active_image_area_overlay_group);
  } else if (element === 0x7000) {
    return new Ok(detector_conditions_nominal_flag);
  } else if (element === 0x7001) {
    return new Ok(detector_temperature);
  } else if (element === 0x7004) {
    return new Ok(detector_type);
  } else if (element === 0x7005) {
    return new Ok(detector_configuration);
  } else if (element === 0x7006) {
    return new Ok(detector_description);
  } else if (element === 0x7008) {
    return new Ok(detector_mode);
  } else if (element === 0x700A) {
    return new Ok(detector_id);
  } else if (element === 0x700C) {
    return new Ok(date_of_last_detector_calibration);
  } else if (element === 0x700E) {
    return new Ok(time_of_last_detector_calibration);
  } else if (element === 0x7010) {
    return new Ok(exposures_on_detector_since_last_calibration);
  } else if (element === 0x7011) {
    return new Ok(exposures_on_detector_since_manufactured);
  } else if (element === 0x7012) {
    return new Ok(detector_time_since_last_exposure);
  } else if (element === 0x7014) {
    return new Ok(detector_active_time);
  } else if (element === 0x7016) {
    return new Ok(detector_activation_offset_from_exposure);
  } else if (element === 0x701A) {
    return new Ok(detector_binning);
  } else if (element === 0x7020) {
    return new Ok(detector_element_physical_size);
  } else if (element === 0x7022) {
    return new Ok(detector_element_spacing);
  } else if (element === 0x7024) {
    return new Ok(detector_active_shape);
  } else if (element === 0x7026) {
    return new Ok(detector_active_dimensions);
  } else if (element === 0x7028) {
    return new Ok(detector_active_origin);
  } else if (element === 0x702A) {
    return new Ok(detector_manufacturer_name);
  } else if (element === 0x702B) {
    return new Ok(detector_manufacturer_model_name);
  } else if (element === 0x7030) {
    return new Ok(field_of_view_origin);
  } else if (element === 0x7032) {
    return new Ok(field_of_view_rotation);
  } else if (element === 0x7034) {
    return new Ok(field_of_view_horizontal_flip);
  } else if (element === 0x7036) {
    return new Ok(pixel_data_area_origin_relative_to_fov);
  } else if (element === 0x7038) {
    return new Ok(pixel_data_area_rotation_angle_relative_to_fov);
  } else if (element === 0x7040) {
    return new Ok(grid_absorbing_material);
  } else if (element === 0x7041) {
    return new Ok(grid_spacing_material);
  } else if (element === 0x7042) {
    return new Ok(grid_thickness);
  } else if (element === 0x7044) {
    return new Ok(grid_pitch);
  } else if (element === 0x7046) {
    return new Ok(grid_aspect_ratio);
  } else if (element === 0x7048) {
    return new Ok(grid_period);
  } else if (element === 0x704C) {
    return new Ok(grid_focal_distance);
  } else if (element === 0x7050) {
    return new Ok(filter_material);
  } else if (element === 0x7052) {
    return new Ok(filter_thickness_minimum);
  } else if (element === 0x7054) {
    return new Ok(filter_thickness_maximum);
  } else if (element === 0x7056) {
    return new Ok(filter_beam_path_length_minimum);
  } else if (element === 0x7058) {
    return new Ok(filter_beam_path_length_maximum);
  } else if (element === 0x7060) {
    return new Ok(exposure_control_mode);
  } else if (element === 0x7062) {
    return new Ok(exposure_control_mode_description);
  } else if (element === 0x7064) {
    return new Ok(exposure_status);
  } else if (element === 0x7065) {
    return new Ok(phototimer_setting);
  } else if (element === 0x8150) {
    return new Ok(exposure_time_in_microseconds);
  } else if (element === 0x8151) {
    return new Ok(x_ray_tube_current_in_microamps);
  } else if (element === 0x9004) {
    return new Ok(content_qualification);
  } else if (element === 0x9005) {
    return new Ok(pulse_sequence_name);
  } else if (element === 0x9006) {
    return new Ok(mr_imaging_modifier_sequence);
  } else if (element === 0x9008) {
    return new Ok(echo_pulse_sequence);
  } else if (element === 0x9009) {
    return new Ok(inversion_recovery);
  } else if (element === 0x9010) {
    return new Ok(flow_compensation);
  } else if (element === 0x9011) {
    return new Ok(multiple_spin_echo);
  } else if (element === 0x9012) {
    return new Ok(multi_planar_excitation);
  } else if (element === 0x9014) {
    return new Ok(phase_contrast);
  } else if (element === 0x9015) {
    return new Ok(time_of_flight_contrast);
  } else if (element === 0x9016) {
    return new Ok(spoiling);
  } else if (element === 0x9017) {
    return new Ok(steady_state_pulse_sequence);
  } else if (element === 0x9018) {
    return new Ok(echo_planar_pulse_sequence);
  } else if (element === 0x9019) {
    return new Ok(tag_angle_first_axis);
  } else if (element === 0x9020) {
    return new Ok(magnetization_transfer);
  } else if (element === 0x9021) {
    return new Ok(t2_preparation);
  } else if (element === 0x9022) {
    return new Ok(blood_signal_nulling);
  } else if (element === 0x9024) {
    return new Ok(saturation_recovery);
  } else if (element === 0x9025) {
    return new Ok(spectrally_selected_suppression);
  } else if (element === 0x9026) {
    return new Ok(spectrally_selected_excitation);
  } else if (element === 0x9027) {
    return new Ok(spatial_presaturation);
  } else if (element === 0x9028) {
    return new Ok(tagging);
  } else if (element === 0x9029) {
    return new Ok(oversampling_phase);
  } else if (element === 0x9030) {
    return new Ok(tag_spacing_first_dimension);
  } else if (element === 0x9032) {
    return new Ok(geometry_of_k_space_traversal);
  } else if (element === 0x9033) {
    return new Ok(segmented_k_space_traversal);
  } else if (element === 0x9034) {
    return new Ok(rectilinear_phase_encode_reordering);
  } else if (element === 0x9035) {
    return new Ok(tag_thickness);
  } else if (element === 0x9036) {
    return new Ok(partial_fourier_direction);
  } else if (element === 0x9037) {
    return new Ok(cardiac_synchronization_technique);
  } else if (element === 0x9041) {
    return new Ok(receive_coil_manufacturer_name);
  } else if (element === 0x9042) {
    return new Ok(mr_receive_coil_sequence);
  } else if (element === 0x9043) {
    return new Ok(receive_coil_type);
  } else if (element === 0x9044) {
    return new Ok(quadrature_receive_coil);
  } else if (element === 0x9045) {
    return new Ok(multi_coil_definition_sequence);
  } else if (element === 0x9046) {
    return new Ok(multi_coil_configuration);
  } else if (element === 0x9047) {
    return new Ok(multi_coil_element_name);
  } else if (element === 0x9048) {
    return new Ok(multi_coil_element_used);
  } else if (element === 0x9049) {
    return new Ok(mr_transmit_coil_sequence);
  } else if (element === 0x9050) {
    return new Ok(transmit_coil_manufacturer_name);
  } else if (element === 0x9051) {
    return new Ok(transmit_coil_type);
  } else if (element === 0x9052) {
    return new Ok(spectral_width);
  } else if (element === 0x9053) {
    return new Ok(chemical_shift_reference);
  } else if (element === 0x9054) {
    return new Ok(volume_localization_technique);
  } else if (element === 0x9058) {
    return new Ok(mr_acquisition_frequency_encoding_steps);
  } else if (element === 0x9059) {
    return new Ok(decoupling);
  } else if (element === 0x9060) {
    return new Ok(decoupled_nucleus);
  } else if (element === 0x9061) {
    return new Ok(decoupling_frequency);
  } else if (element === 0x9062) {
    return new Ok(decoupling_method);
  } else if (element === 0x9063) {
    return new Ok(decoupling_chemical_shift_reference);
  } else if (element === 0x9064) {
    return new Ok(k_space_filtering);
  } else if (element === 0x9065) {
    return new Ok(time_domain_filtering);
  } else if (element === 0x9066) {
    return new Ok(number_of_zero_fills);
  } else if (element === 0x9067) {
    return new Ok(baseline_correction);
  } else if (element === 0x9069) {
    return new Ok(parallel_reduction_factor_in_plane);
  } else if (element === 0x9070) {
    return new Ok(cardiac_rr_interval_specified);
  } else if (element === 0x9073) {
    return new Ok(acquisition_duration);
  } else if (element === 0x9074) {
    return new Ok(frame_acquisition_date_time);
  } else if (element === 0x9075) {
    return new Ok(diffusion_directionality);
  } else if (element === 0x9076) {
    return new Ok(diffusion_gradient_direction_sequence);
  } else if (element === 0x9077) {
    return new Ok(parallel_acquisition);
  } else if (element === 0x9078) {
    return new Ok(parallel_acquisition_technique);
  } else if (element === 0x9079) {
    return new Ok(inversion_times);
  } else if (element === 0x9080) {
    return new Ok(metabolite_map_description);
  } else if (element === 0x9081) {
    return new Ok(partial_fourier);
  } else if (element === 0x9082) {
    return new Ok(effective_echo_time);
  } else if (element === 0x9083) {
    return new Ok(metabolite_map_code_sequence);
  } else if (element === 0x9084) {
    return new Ok(chemical_shift_sequence);
  } else if (element === 0x9085) {
    return new Ok(cardiac_signal_source);
  } else if (element === 0x9087) {
    return new Ok(diffusion_b_value);
  } else if (element === 0x9089) {
    return new Ok(diffusion_gradient_orientation);
  } else if (element === 0x9090) {
    return new Ok(velocity_encoding_direction);
  } else if (element === 0x9091) {
    return new Ok(velocity_encoding_minimum_value);
  } else if (element === 0x9092) {
    return new Ok(velocity_encoding_acquisition_sequence);
  } else if (element === 0x9093) {
    return new Ok(number_of_k_space_trajectories);
  } else if (element === 0x9094) {
    return new Ok(coverage_of_k_space);
  } else if (element === 0x9095) {
    return new Ok(spectroscopy_acquisition_phase_rows);
  } else if (element === 0x9096) {
    return new Ok(parallel_reduction_factor_in_plane_retired);
  } else if (element === 0x9098) {
    return new Ok(transmitter_frequency);
  } else if (element === 0x9100) {
    return new Ok(resonant_nucleus);
  } else if (element === 0x9101) {
    return new Ok(frequency_correction);
  } else if (element === 0x9103) {
    return new Ok(mr_spectroscopy_fov_geometry_sequence);
  } else if (element === 0x9104) {
    return new Ok(slab_thickness);
  } else if (element === 0x9105) {
    return new Ok(slab_orientation);
  } else if (element === 0x9106) {
    return new Ok(mid_slab_position);
  } else if (element === 0x9107) {
    return new Ok(mr_spatial_saturation_sequence);
  } else if (element === 0x9112) {
    return new Ok(mr_timing_and_related_parameters_sequence);
  } else if (element === 0x9114) {
    return new Ok(mr_echo_sequence);
  } else if (element === 0x9115) {
    return new Ok(mr_modifier_sequence);
  } else if (element === 0x9117) {
    return new Ok(mr_diffusion_sequence);
  } else if (element === 0x9118) {
    return new Ok(cardiac_synchronization_sequence);
  } else if (element === 0x9119) {
    return new Ok(mr_averages_sequence);
  } else if (element === 0x9125) {
    return new Ok(mr_fov_geometry_sequence);
  } else if (element === 0x9126) {
    return new Ok(volume_localization_sequence);
  } else if (element === 0x9127) {
    return new Ok(spectroscopy_acquisition_data_columns);
  } else if (element === 0x9147) {
    return new Ok(diffusion_anisotropy_type);
  } else if (element === 0x9151) {
    return new Ok(frame_reference_date_time);
  } else if (element === 0x9152) {
    return new Ok(mr_metabolite_map_sequence);
  } else if (element === 0x9155) {
    return new Ok(parallel_reduction_factor_out_of_plane);
  } else if (element === 0x9159) {
    return new Ok(spectroscopy_acquisition_out_of_plane_phase_steps);
  } else if (element === 0x9166) {
    return new Ok(bulk_motion_status);
  } else if (element === 0x9168) {
    return new Ok(parallel_reduction_factor_second_in_plane);
  } else if (element === 0x9169) {
    return new Ok(cardiac_beat_rejection_technique);
  } else if (element === 0x9170) {
    return new Ok(respiratory_motion_compensation_technique);
  } else if (element === 0x9171) {
    return new Ok(respiratory_signal_source);
  } else if (element === 0x9172) {
    return new Ok(bulk_motion_compensation_technique);
  } else if (element === 0x9173) {
    return new Ok(bulk_motion_signal_source);
  } else if (element === 0x9174) {
    return new Ok(applicable_safety_standard_agency);
  } else if (element === 0x9175) {
    return new Ok(applicable_safety_standard_description);
  } else if (element === 0x9176) {
    return new Ok(operating_mode_sequence);
  } else if (element === 0x9177) {
    return new Ok(operating_mode_type);
  } else if (element === 0x9178) {
    return new Ok(operating_mode);
  } else if (element === 0x9179) {
    return new Ok(specific_absorption_rate_definition);
  } else if (element === 0x9180) {
    return new Ok(gradient_output_type);
  } else if (element === 0x9181) {
    return new Ok(specific_absorption_rate_value);
  } else if (element === 0x9182) {
    return new Ok(gradient_output);
  } else if (element === 0x9183) {
    return new Ok(flow_compensation_direction);
  } else if (element === 0x9184) {
    return new Ok(tagging_delay);
  } else if (element === 0x9185) {
    return new Ok(respiratory_motion_compensation_technique_description);
  } else if (element === 0x9186) {
    return new Ok(respiratory_signal_source_id);
  } else if (element === 0x9195) {
    return new Ok(chemical_shift_minimum_integration_limit_in_hz);
  } else if (element === 0x9196) {
    return new Ok(chemical_shift_maximum_integration_limit_in_hz);
  } else if (element === 0x9197) {
    return new Ok(mr_velocity_encoding_sequence);
  } else if (element === 0x9198) {
    return new Ok(first_order_phase_correction);
  } else if (element === 0x9199) {
    return new Ok(water_referenced_phase_correction);
  } else if (element === 0x9200) {
    return new Ok(mr_spectroscopy_acquisition_type);
  } else if (element === 0x9214) {
    return new Ok(respiratory_cycle_position);
  } else if (element === 0x9217) {
    return new Ok(velocity_encoding_maximum_value);
  } else if (element === 0x9218) {
    return new Ok(tag_spacing_second_dimension);
  } else if (element === 0x9219) {
    return new Ok(tag_angle_second_axis);
  } else if (element === 0x9220) {
    return new Ok(frame_acquisition_duration);
  } else if (element === 0x9226) {
    return new Ok(mr_image_frame_type_sequence);
  } else if (element === 0x9227) {
    return new Ok(mr_spectroscopy_frame_type_sequence);
  } else if (element === 0x9231) {
    return new Ok(mr_acquisition_phase_encoding_steps_in_plane);
  } else if (element === 0x9232) {
    return new Ok(mr_acquisition_phase_encoding_steps_out_of_plane);
  } else if (element === 0x9234) {
    return new Ok(spectroscopy_acquisition_phase_columns);
  } else if (element === 0x9236) {
    return new Ok(cardiac_cycle_position);
  } else if (element === 0x9239) {
    return new Ok(specific_absorption_rate_sequence);
  } else if (element === 0x9240) {
    return new Ok(rf_echo_train_length);
  } else if (element === 0x9241) {
    return new Ok(gradient_echo_train_length);
  } else if (element === 0x9250) {
    return new Ok(arterial_spin_labeling_contrast);
  } else if (element === 0x9251) {
    return new Ok(mr_arterial_spin_labeling_sequence);
  } else if (element === 0x9252) {
    return new Ok(asl_technique_description);
  } else if (element === 0x9253) {
    return new Ok(asl_slab_number);
  } else if (element === 0x9254) {
    return new Ok(asl_slab_thickness);
  } else if (element === 0x9255) {
    return new Ok(asl_slab_orientation);
  } else if (element === 0x9256) {
    return new Ok(asl_mid_slab_position);
  } else if (element === 0x9257) {
    return new Ok(asl_context);
  } else if (element === 0x9258) {
    return new Ok(asl_pulse_train_duration);
  } else if (element === 0x9259) {
    return new Ok(asl_crusher_flag);
  } else if (element === 0x925A) {
    return new Ok(asl_crusher_flow_limit);
  } else if (element === 0x925B) {
    return new Ok(asl_crusher_description);
  } else if (element === 0x925C) {
    return new Ok(asl_bolus_cutoff_flag);
  } else if (element === 0x925D) {
    return new Ok(asl_bolus_cutoff_timing_sequence);
  } else if (element === 0x925E) {
    return new Ok(asl_bolus_cutoff_technique);
  } else if (element === 0x925F) {
    return new Ok(asl_bolus_cutoff_delay_time);
  } else if (element === 0x9260) {
    return new Ok(asl_slab_sequence);
  } else if (element === 0x9295) {
    return new Ok(chemical_shift_minimum_integration_limit_inppm);
  } else if (element === 0x9296) {
    return new Ok(chemical_shift_maximum_integration_limit_inppm);
  } else if (element === 0x9297) {
    return new Ok(water_reference_acquisition);
  } else if (element === 0x9298) {
    return new Ok(echo_peak_position);
  } else if (element === 0x9301) {
    return new Ok(ct_acquisition_type_sequence);
  } else if (element === 0x9302) {
    return new Ok(acquisition_type);
  } else if (element === 0x9303) {
    return new Ok(tube_angle);
  } else if (element === 0x9304) {
    return new Ok(ct_acquisition_details_sequence);
  } else if (element === 0x9305) {
    return new Ok(revolution_time);
  } else if (element === 0x9306) {
    return new Ok(single_collimation_width);
  } else if (element === 0x9307) {
    return new Ok(total_collimation_width);
  } else if (element === 0x9308) {
    return new Ok(ct_table_dynamics_sequence);
  } else if (element === 0x9309) {
    return new Ok(table_speed);
  } else if (element === 0x9310) {
    return new Ok(table_feed_per_rotation);
  } else if (element === 0x9311) {
    return new Ok(spiral_pitch_factor);
  } else if (element === 0x9312) {
    return new Ok(ct_geometry_sequence);
  } else if (element === 0x9313) {
    return new Ok(data_collection_center_patient);
  } else if (element === 0x9314) {
    return new Ok(ct_reconstruction_sequence);
  } else if (element === 0x9315) {
    return new Ok(reconstruction_algorithm);
  } else if (element === 0x9316) {
    return new Ok(convolution_kernel_group);
  } else if (element === 0x9317) {
    return new Ok(reconstruction_field_of_view);
  } else if (element === 0x9318) {
    return new Ok(reconstruction_target_center_patient);
  } else if (element === 0x9319) {
    return new Ok(reconstruction_angle);
  } else if (element === 0x9320) {
    return new Ok(image_filter);
  } else if (element === 0x9321) {
    return new Ok(ct_exposure_sequence);
  } else if (element === 0x9322) {
    return new Ok(reconstruction_pixel_spacing);
  } else if (element === 0x9323) {
    return new Ok(exposure_modulation_type);
  } else if (element === 0x9324) {
    return new Ok(estimated_dose_saving);
  } else if (element === 0x9325) {
    return new Ok(ct_x_ray_details_sequence);
  } else if (element === 0x9326) {
    return new Ok(ct_position_sequence);
  } else if (element === 0x9327) {
    return new Ok(table_position);
  } else if (element === 0x9328) {
    return new Ok(exposure_time_inms);
  } else if (element === 0x9329) {
    return new Ok(ct_image_frame_type_sequence);
  } else if (element === 0x9330) {
    return new Ok(x_ray_tube_current_in_milliamps);
  } else if (element === 0x9332) {
    return new Ok(exposure_inm_as);
  } else if (element === 0x9333) {
    return new Ok(constant_volume_flag);
  } else if (element === 0x9334) {
    return new Ok(fluoroscopy_flag);
  } else if (element === 0x9335) {
    return new Ok(distance_source_to_data_collection_center);
  } else if (element === 0x9337) {
    return new Ok(contrast_bolus_agent_number);
  } else if (element === 0x9338) {
    return new Ok(contrast_bolus_ingredient_code_sequence);
  } else if (element === 0x9340) {
    return new Ok(contrast_administration_profile_sequence);
  } else if (element === 0x9341) {
    return new Ok(contrast_bolus_usage_sequence);
  } else if (element === 0x9342) {
    return new Ok(contrast_bolus_agent_administered);
  } else if (element === 0x9343) {
    return new Ok(contrast_bolus_agent_detected);
  } else if (element === 0x9344) {
    return new Ok(contrast_bolus_agent_phase);
  } else if (element === 0x9345) {
    return new Ok(ctdi_vol);
  } else if (element === 0x9346) {
    return new Ok(ctdi_phantom_type_code_sequence);
  } else if (element === 0x9351) {
    return new Ok(calcium_scoring_mass_factor_patient);
  } else if (element === 0x9352) {
    return new Ok(calcium_scoring_mass_factor_device);
  } else if (element === 0x9353) {
    return new Ok(energy_weighting_factor);
  } else if (element === 0x9360) {
    return new Ok(ct_additional_x_ray_source_sequence);
  } else if (element === 0x9361) {
    return new Ok(multienergy_ct_acquisition);
  } else if (element === 0x9362) {
    return new Ok(multienergy_ct_acquisition_sequence);
  } else if (element === 0x9363) {
    return new Ok(multienergy_ct_processing_sequence);
  } else if (element === 0x9364) {
    return new Ok(multienergy_ct_characteristics_sequence);
  } else if (element === 0x9365) {
    return new Ok(multienergy_ct_x_ray_source_sequence);
  } else if (element === 0x9366) {
    return new Ok(x_ray_source_index);
  } else if (element === 0x9367) {
    return new Ok(x_ray_source_id);
  } else if (element === 0x9368) {
    return new Ok(multienergy_source_technique);
  } else if (element === 0x9369) {
    return new Ok(source_start_date_time);
  } else if (element === 0x936A) {
    return new Ok(source_end_date_time);
  } else if (element === 0x936B) {
    return new Ok(switching_phase_number);
  } else if (element === 0x936C) {
    return new Ok(switching_phase_nominal_duration);
  } else if (element === 0x936D) {
    return new Ok(switching_phase_transition_duration);
  } else if (element === 0x936E) {
    return new Ok(effective_bin_energy);
  } else if (element === 0x936F) {
    return new Ok(multienergy_ct_x_ray_detector_sequence);
  } else if (element === 0x9370) {
    return new Ok(x_ray_detector_index);
  } else if (element === 0x9371) {
    return new Ok(x_ray_detector_id);
  } else if (element === 0x9372) {
    return new Ok(multienergy_detector_type);
  } else if (element === 0x9373) {
    return new Ok(x_ray_detector_label);
  } else if (element === 0x9374) {
    return new Ok(nominal_max_energy);
  } else if (element === 0x9375) {
    return new Ok(nominal_min_energy);
  } else if (element === 0x9376) {
    return new Ok(referenced_x_ray_detector_index);
  } else if (element === 0x9377) {
    return new Ok(referenced_x_ray_source_index);
  } else if (element === 0x9378) {
    return new Ok(referenced_path_index);
  } else if (element === 0x9379) {
    return new Ok(multienergy_ct_path_sequence);
  } else if (element === 0x937A) {
    return new Ok(multienergy_ct_path_index);
  } else if (element === 0x937B) {
    return new Ok(multienergy_acquisition_description);
  } else if (element === 0x937C) {
    return new Ok(monoenergetic_energy_equivalent);
  } else if (element === 0x937D) {
    return new Ok(material_code_sequence);
  } else if (element === 0x937E) {
    return new Ok(decomposition_method);
  } else if (element === 0x937F) {
    return new Ok(decomposition_description);
  } else if (element === 0x9380) {
    return new Ok(decomposition_algorithm_identification_sequence);
  } else if (element === 0x9381) {
    return new Ok(decomposition_material_sequence);
  } else if (element === 0x9382) {
    return new Ok(material_attenuation_sequence);
  } else if (element === 0x9383) {
    return new Ok(photon_energy);
  } else if (element === 0x9384) {
    return new Ok(x_ray_mass_attenuation_coefficient);
  } else if (element === 0x9401) {
    return new Ok(projection_pixel_calibration_sequence);
  } else if (element === 0x9402) {
    return new Ok(distance_source_to_isocenter);
  } else if (element === 0x9403) {
    return new Ok(distance_object_to_table_top);
  } else if (element === 0x9404) {
    return new Ok(object_pixel_spacing_in_center_of_beam);
  } else if (element === 0x9405) {
    return new Ok(positioner_position_sequence);
  } else if (element === 0x9406) {
    return new Ok(table_position_sequence);
  } else if (element === 0x9407) {
    return new Ok(collimator_shape_sequence);
  } else if (element === 0x9410) {
    return new Ok(planes_in_acquisition);
  } else if (element === 0x9412) {
    return new Ok(xaxrf_frame_characteristics_sequence);
  } else if (element === 0x9417) {
    return new Ok(frame_acquisition_sequence);
  } else if (element === 0x9420) {
    return new Ok(x_ray_receptor_type);
  } else if (element === 0x9423) {
    return new Ok(acquisition_protocol_name);
  } else if (element === 0x9424) {
    return new Ok(acquisition_protocol_description);
  } else if (element === 0x9425) {
    return new Ok(contrast_bolus_ingredient_opaque);
  } else if (element === 0x9426) {
    return new Ok(distance_receptor_plane_to_detector_housing);
  } else if (element === 0x9427) {
    return new Ok(intensifier_active_shape);
  } else if (element === 0x9428) {
    return new Ok(intensifier_active_dimensions);
  } else if (element === 0x9429) {
    return new Ok(physical_detector_size);
  } else if (element === 0x9430) {
    return new Ok(position_of_isocenter_projection);
  } else if (element === 0x9432) {
    return new Ok(field_of_view_sequence);
  } else if (element === 0x9433) {
    return new Ok(field_of_view_description);
  } else if (element === 0x9434) {
    return new Ok(exposure_control_sensing_regions_sequence);
  } else if (element === 0x9435) {
    return new Ok(exposure_control_sensing_region_shape);
  } else if (element === 0x9436) {
    return new Ok(exposure_control_sensing_region_left_vertical_edge);
  } else if (element === 0x9437) {
    return new Ok(exposure_control_sensing_region_right_vertical_edge);
  } else if (element === 0x9438) {
    return new Ok(exposure_control_sensing_region_upper_horizontal_edge);
  } else if (element === 0x9439) {
    return new Ok(exposure_control_sensing_region_lower_horizontal_edge);
  } else if (element === 0x9440) {
    return new Ok(center_of_circular_exposure_control_sensing_region);
  } else if (element === 0x9441) {
    return new Ok(radius_of_circular_exposure_control_sensing_region);
  } else if (element === 0x9442) {
    return new Ok(vertices_of_the_polygonal_exposure_control_sensing_region);
  } else if (element === 0x9447) {
    return new Ok(column_angulation_patient);
  } else if (element === 0x9449) {
    return new Ok(beam_angle);
  } else if (element === 0x9451) {
    return new Ok(frame_detector_parameters_sequence);
  } else if (element === 0x9452) {
    return new Ok(calculated_anatomy_thickness);
  } else if (element === 0x9455) {
    return new Ok(calibration_sequence);
  } else if (element === 0x9456) {
    return new Ok(object_thickness_sequence);
  } else if (element === 0x9457) {
    return new Ok(plane_identification);
  } else if (element === 0x9461) {
    return new Ok(field_of_view_dimensions_in_float);
  } else if (element === 0x9462) {
    return new Ok(isocenter_reference_system_sequence);
  } else if (element === 0x9463) {
    return new Ok(positioner_isocenter_primary_angle);
  } else if (element === 0x9464) {
    return new Ok(positioner_isocenter_secondary_angle);
  } else if (element === 0x9465) {
    return new Ok(positioner_isocenter_detector_rotation_angle);
  } else if (element === 0x9466) {
    return new Ok(table_x_position_to_isocenter);
  } else if (element === 0x9467) {
    return new Ok(table_y_position_to_isocenter);
  } else if (element === 0x9468) {
    return new Ok(table_z_position_to_isocenter);
  } else if (element === 0x9469) {
    return new Ok(table_horizontal_rotation_angle);
  } else if (element === 0x9470) {
    return new Ok(table_head_tilt_angle);
  } else if (element === 0x9471) {
    return new Ok(table_cradle_tilt_angle);
  } else if (element === 0x9472) {
    return new Ok(frame_display_shutter_sequence);
  } else if (element === 0x9473) {
    return new Ok(acquired_image_area_dose_product);
  } else if (element === 0x9474) {
    return new Ok(c_arm_positioner_tabletop_relationship);
  } else if (element === 0x9476) {
    return new Ok(x_ray_geometry_sequence);
  } else if (element === 0x9477) {
    return new Ok(irradiation_event_identification_sequence);
  } else if (element === 0x9504) {
    return new Ok(x_ray_3d_frame_type_sequence);
  } else if (element === 0x9506) {
    return new Ok(contributing_sources_sequence);
  } else if (element === 0x9507) {
    return new Ok(x_ray_3d_acquisition_sequence);
  } else if (element === 0x9508) {
    return new Ok(primary_positioner_scan_arc);
  } else if (element === 0x9509) {
    return new Ok(secondary_positioner_scan_arc);
  } else if (element === 0x9510) {
    return new Ok(primary_positioner_scan_start_angle);
  } else if (element === 0x9511) {
    return new Ok(secondary_positioner_scan_start_angle);
  } else if (element === 0x9514) {
    return new Ok(primary_positioner_increment);
  } else if (element === 0x9515) {
    return new Ok(secondary_positioner_increment);
  } else if (element === 0x9516) {
    return new Ok(start_acquisition_date_time);
  } else if (element === 0x9517) {
    return new Ok(end_acquisition_date_time);
  } else if (element === 0x9518) {
    return new Ok(primary_positioner_increment_sign);
  } else if (element === 0x9519) {
    return new Ok(secondary_positioner_increment_sign);
  } else if (element === 0x9524) {
    return new Ok(application_name);
  } else if (element === 0x9525) {
    return new Ok(application_version);
  } else if (element === 0x9526) {
    return new Ok(application_manufacturer);
  } else if (element === 0x9527) {
    return new Ok(algorithm_type);
  } else if (element === 0x9528) {
    return new Ok(algorithm_description);
  } else if (element === 0x9530) {
    return new Ok(x_ray_3d_reconstruction_sequence);
  } else if (element === 0x9531) {
    return new Ok(reconstruction_description);
  } else if (element === 0x9538) {
    return new Ok(per_projection_acquisition_sequence);
  } else if (element === 0x9541) {
    return new Ok(detector_position_sequence);
  } else if (element === 0x9542) {
    return new Ok(x_ray_acquisition_dose_sequence);
  } else if (element === 0x9543) {
    return new Ok(x_ray_source_isocenter_primary_angle);
  } else if (element === 0x9544) {
    return new Ok(x_ray_source_isocenter_secondary_angle);
  } else if (element === 0x9545) {
    return new Ok(breast_support_isocenter_primary_angle);
  } else if (element === 0x9546) {
    return new Ok(breast_support_isocenter_secondary_angle);
  } else if (element === 0x9547) {
    return new Ok(breast_support_x_position_to_isocenter);
  } else if (element === 0x9548) {
    return new Ok(breast_support_y_position_to_isocenter);
  } else if (element === 0x9549) {
    return new Ok(breast_support_z_position_to_isocenter);
  } else if (element === 0x9550) {
    return new Ok(detector_isocenter_primary_angle);
  } else if (element === 0x9551) {
    return new Ok(detector_isocenter_secondary_angle);
  } else if (element === 0x9552) {
    return new Ok(detector_x_position_to_isocenter);
  } else if (element === 0x9553) {
    return new Ok(detector_y_position_to_isocenter);
  } else if (element === 0x9554) {
    return new Ok(detector_z_position_to_isocenter);
  } else if (element === 0x9555) {
    return new Ok(x_ray_grid_sequence);
  } else if (element === 0x9556) {
    return new Ok(x_ray_filter_sequence);
  } else if (element === 0x9557) {
    return new Ok(detector_active_area_tlhc_position);
  } else if (element === 0x9558) {
    return new Ok(detector_active_area_orientation);
  } else if (element === 0x9559) {
    return new Ok(positioner_primary_angle_direction);
  } else if (element === 0x9601) {
    return new Ok(diffusion_b_matrix_sequence);
  } else if (element === 0x9602) {
    return new Ok(diffusion_b_value_xx);
  } else if (element === 0x9603) {
    return new Ok(diffusion_b_value_xy);
  } else if (element === 0x9604) {
    return new Ok(diffusion_b_value_xz);
  } else if (element === 0x9605) {
    return new Ok(diffusion_b_value_yy);
  } else if (element === 0x9606) {
    return new Ok(diffusion_b_value_yz);
  } else if (element === 0x9607) {
    return new Ok(diffusion_b_value_zz);
  } else if (element === 0x9621) {
    return new Ok(functional_mr_sequence);
  } else if (element === 0x9622) {
    return new Ok(functional_settling_phase_frames_present);
  } else if (element === 0x9623) {
    return new Ok(functional_sync_pulse);
  } else if (element === 0x9624) {
    return new Ok(settling_phase_frame);
  } else if (element === 0x9701) {
    return new Ok(decay_correction_date_time);
  } else if (element === 0x9715) {
    return new Ok(start_density_threshold);
  } else if (element === 0x9716) {
    return new Ok(start_relative_density_difference_threshold);
  } else if (element === 0x9717) {
    return new Ok(start_cardiac_trigger_count_threshold);
  } else if (element === 0x9718) {
    return new Ok(start_respiratory_trigger_count_threshold);
  } else if (element === 0x9719) {
    return new Ok(termination_counts_threshold);
  } else if (element === 0x9720) {
    return new Ok(termination_density_threshold);
  } else if (element === 0x9721) {
    return new Ok(termination_relative_density_threshold);
  } else if (element === 0x9722) {
    return new Ok(termination_time_threshold);
  } else if (element === 0x9723) {
    return new Ok(termination_cardiac_trigger_count_threshold);
  } else if (element === 0x9724) {
    return new Ok(termination_respiratory_trigger_count_threshold);
  } else if (element === 0x9725) {
    return new Ok(detector_geometry);
  } else if (element === 0x9726) {
    return new Ok(transverse_detector_separation);
  } else if (element === 0x9727) {
    return new Ok(axial_detector_dimension);
  } else if (element === 0x9729) {
    return new Ok(radiopharmaceutical_agent_number);
  } else if (element === 0x9732) {
    return new Ok(pet_frame_acquisition_sequence);
  } else if (element === 0x9733) {
    return new Ok(pet_detector_motion_details_sequence);
  } else if (element === 0x9734) {
    return new Ok(pet_table_dynamics_sequence);
  } else if (element === 0x9735) {
    return new Ok(pet_position_sequence);
  } else if (element === 0x9736) {
    return new Ok(pet_frame_correction_factors_sequence);
  } else if (element === 0x9737) {
    return new Ok(radiopharmaceutical_usage_sequence);
  } else if (element === 0x9738) {
    return new Ok(attenuation_correction_source);
  } else if (element === 0x9739) {
    return new Ok(number_of_iterations);
  } else if (element === 0x9740) {
    return new Ok(number_of_subsets);
  } else if (element === 0x9749) {
    return new Ok(pet_reconstruction_sequence);
  } else if (element === 0x9751) {
    return new Ok(pet_frame_type_sequence);
  } else if (element === 0x9755) {
    return new Ok(time_of_flight_information_used);
  } else if (element === 0x9756) {
    return new Ok(reconstruction_type);
  } else if (element === 0x9758) {
    return new Ok(decay_corrected);
  } else if (element === 0x9759) {
    return new Ok(attenuation_corrected);
  } else if (element === 0x9760) {
    return new Ok(scatter_corrected);
  } else if (element === 0x9761) {
    return new Ok(dead_time_corrected);
  } else if (element === 0x9762) {
    return new Ok(gantry_motion_corrected);
  } else if (element === 0x9763) {
    return new Ok(patient_motion_corrected);
  } else if (element === 0x9764) {
    return new Ok(count_loss_normalization_corrected);
  } else if (element === 0x9765) {
    return new Ok(randoms_corrected);
  } else if (element === 0x9766) {
    return new Ok(non_uniform_radial_sampling_corrected);
  } else if (element === 0x9767) {
    return new Ok(sensitivity_calibrated);
  } else if (element === 0x9768) {
    return new Ok(detector_normalization_correction);
  } else if (element === 0x9769) {
    return new Ok(iterative_reconstruction_method);
  } else if (element === 0x9770) {
    return new Ok(attenuation_correction_temporal_relationship);
  } else if (element === 0x9771) {
    return new Ok(patient_physiological_state_sequence);
  } else if (element === 0x9772) {
    return new Ok(patient_physiological_state_code_sequence);
  } else if (element === 0x9801) {
    return new Ok(depths_of_focus);
  } else if (element === 0x9803) {
    return new Ok(excluded_intervals_sequence);
  } else if (element === 0x9804) {
    return new Ok(exclusion_start_date_time);
  } else if (element === 0x9805) {
    return new Ok(exclusion_duration);
  } else if (element === 0x9806) {
    return new Ok(us_image_description_sequence);
  } else if (element === 0x9807) {
    return new Ok(image_data_type_sequence);
  } else if (element === 0x9808) {
    return new Ok(data_type);
  } else if (element === 0x9809) {
    return new Ok(transducer_scan_pattern_code_sequence);
  } else if (element === 0x980B) {
    return new Ok(aliased_data_type);
  } else if (element === 0x980C) {
    return new Ok(position_measuring_device_used);
  } else if (element === 0x980D) {
    return new Ok(transducer_geometry_code_sequence);
  } else if (element === 0x980E) {
    return new Ok(transducer_beam_steering_code_sequence);
  } else if (element === 0x980F) {
    return new Ok(transducer_application_code_sequence);
  } else if (element === 0x9810) {
    return new Ok(zero_velocity_pixel_value);
  } else if (element === 0x9821) {
    return new Ok(photoacoustic_excitation_characteristics_sequence);
  } else if (element === 0x9822) {
    return new Ok(excitation_spectral_width);
  } else if (element === 0x9823) {
    return new Ok(excitation_energy);
  } else if (element === 0x9824) {
    return new Ok(excitation_pulse_duration);
  } else if (element === 0x9825) {
    return new Ok(excitation_wavelength_sequence);
  } else if (element === 0x9826) {
    return new Ok(excitation_wavelength);
  } else if (element === 0x9828) {
    return new Ok(illumination_translation_flag);
  } else if (element === 0x9829) {
    return new Ok(acoustic_coupling_medium_flag);
  } else if (element === 0x982A) {
    return new Ok(acoustic_coupling_medium_code_sequence);
  } else if (element === 0x982B) {
    return new Ok(acoustic_coupling_medium_temperature);
  } else if (element === 0x982C) {
    return new Ok(transducer_response_sequence);
  } else if (element === 0x982D) {
    return new Ok(center_frequency);
  } else if (element === 0x982E) {
    return new Ok(fractional_bandwidth);
  } else if (element === 0x982F) {
    return new Ok(lower_cutoff_frequency);
  } else if (element === 0x9830) {
    return new Ok(upper_cutoff_frequency);
  } else if (element === 0x9831) {
    return new Ok(transducer_technology_sequence);
  } else if (element === 0x9832) {
    return new Ok(sound_speed_correction_mechanism_code_sequence);
  } else if (element === 0x9833) {
    return new Ok(object_sound_speed);
  } else if (element === 0x9834) {
    return new Ok(acoustic_coupling_medium_sound_speed);
  } else if (element === 0x9835) {
    return new Ok(photoacoustic_image_frame_type_sequence);
  } else if (element === 0x9836) {
    return new Ok(image_data_type_code_sequence);
  } else if (element === 0x9900) {
    return new Ok(reference_location_label);
  } else if (element === 0x9901) {
    return new Ok(reference_location_description);
  } else if (element === 0x9902) {
    return new Ok(reference_basis_code_sequence);
  } else if (element === 0x9903) {
    return new Ok(reference_geometry_code_sequence);
  } else if (element === 0x9904) {
    return new Ok(offset_distance);
  } else if (element === 0x9905) {
    return new Ok(offset_direction);
  } else if (element === 0x9906) {
    return new Ok(potential_scheduled_protocol_code_sequence);
  } else if (element === 0x9907) {
    return new Ok(potential_requested_procedure_code_sequence);
  } else if (element === 0x9908) {
    return new Ok(potential_reasons_for_procedure);
  } else if (element === 0x9909) {
    return new Ok(potential_reasons_for_procedure_code_sequence);
  } else if (element === 0x990A) {
    return new Ok(potential_diagnostic_tasks);
  } else if (element === 0x990B) {
    return new Ok(contraindications_code_sequence);
  } else if (element === 0x990C) {
    return new Ok(referenced_defined_protocol_sequence);
  } else if (element === 0x990D) {
    return new Ok(referenced_performed_protocol_sequence);
  } else if (element === 0x990E) {
    return new Ok(predecessor_protocol_sequence);
  } else if (element === 0x990F) {
    return new Ok(protocol_planning_information);
  } else if (element === 0x9910) {
    return new Ok(protocol_design_rationale);
  } else if (element === 0x9911) {
    return new Ok(patient_specification_sequence);
  } else if (element === 0x9912) {
    return new Ok(model_specification_sequence);
  } else if (element === 0x9913) {
    return new Ok(parameters_specification_sequence);
  } else if (element === 0x9914) {
    return new Ok(instruction_sequence);
  } else if (element === 0x9915) {
    return new Ok(instruction_index);
  } else if (element === 0x9916) {
    return new Ok(instruction_text);
  } else if (element === 0x9917) {
    return new Ok(instruction_description);
  } else if (element === 0x9918) {
    return new Ok(instruction_performed_flag);
  } else if (element === 0x9919) {
    return new Ok(instruction_performed_date_time);
  } else if (element === 0x991A) {
    return new Ok(instruction_performance_comment);
  } else if (element === 0x991B) {
    return new Ok(patient_positioning_instruction_sequence);
  } else if (element === 0x991C) {
    return new Ok(positioning_method_code_sequence);
  } else if (element === 0x991D) {
    return new Ok(positioning_landmark_sequence);
  } else if (element === 0x991E) {
    return new Ok(target_frame_of_reference_uid);
  } else if (element === 0x991F) {
    return new Ok(acquisition_protocol_element_specification_sequence);
  } else if (element === 0x9920) {
    return new Ok(acquisition_protocol_element_sequence);
  } else if (element === 0x9921) {
    return new Ok(protocol_element_number);
  } else if (element === 0x9922) {
    return new Ok(protocol_element_name);
  } else if (element === 0x9923) {
    return new Ok(protocol_element_characteristics_summary);
  } else if (element === 0x9924) {
    return new Ok(protocol_element_purpose);
  } else if (element === 0x9930) {
    return new Ok(acquisition_motion);
  } else if (element === 0x9931) {
    return new Ok(acquisition_start_location_sequence);
  } else if (element === 0x9932) {
    return new Ok(acquisition_end_location_sequence);
  } else if (element === 0x9933) {
    return new Ok(reconstruction_protocol_element_specification_sequence);
  } else if (element === 0x9934) {
    return new Ok(reconstruction_protocol_element_sequence);
  } else if (element === 0x9935) {
    return new Ok(storage_protocol_element_specification_sequence);
  } else if (element === 0x9936) {
    return new Ok(storage_protocol_element_sequence);
  } else if (element === 0x9937) {
    return new Ok(requested_series_description);
  } else if (element === 0x9938) {
    return new Ok(source_acquisition_protocol_element_number);
  } else if (element === 0x9939) {
    return new Ok(source_acquisition_beam_number);
  } else if (element === 0x993A) {
    return new Ok(source_reconstruction_protocol_element_number);
  } else if (element === 0x993B) {
    return new Ok(reconstruction_start_location_sequence);
  } else if (element === 0x993C) {
    return new Ok(reconstruction_end_location_sequence);
  } else if (element === 0x993D) {
    return new Ok(reconstruction_algorithm_sequence);
  } else if (element === 0x993E) {
    return new Ok(reconstruction_target_center_location_sequence);
  } else if (element === 0x9941) {
    return new Ok(image_filter_description);
  } else if (element === 0x9942) {
    return new Ok(ctdi_vol_notification_trigger);
  } else if (element === 0x9943) {
    return new Ok(dlp_notification_trigger);
  } else if (element === 0x9944) {
    return new Ok(auto_kvp_selection_type);
  } else if (element === 0x9945) {
    return new Ok(auto_kvp_upper_bound);
  } else if (element === 0x9946) {
    return new Ok(auto_kvp_lower_bound);
  } else if (element === 0x9947) {
    return new Ok(protocol_defined_patient_position);
  } else if (element === 0xA001) {
    return new Ok(contributing_equipment_sequence);
  } else if (element === 0xA002) {
    return new Ok(contribution_date_time);
  } else if (element === 0xA003) {
    return new Ok(contribution_description);
  } else {
    return new Error(undefined);
  }
}

export const study_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0xD),
  "Study Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const series_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0xE),
  "Series Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const study_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x10),
  "Study ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const series_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x11),
  "Series Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const acquisition_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x12),
  "Acquisition Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const instance_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x13),
  "Instance Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const isotope_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x14),
  "Isotope Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const phase_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x15),
  "Phase Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const interval_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x16),
  "Interval Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const time_slot_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x17),
  "Time Slot Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const angle_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x18),
  "Angle Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const item_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x19),
  "Item Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const patient_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x20),
  "Patient Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_2,
);

export const overlay_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x22),
  "Overlay Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const curve_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x24),
  "Curve Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const lut_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x26),
  "LUT Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const pyramid_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x27),
  "Pyramid Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const image_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x30),
  "Image Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const image_position_patient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x32),
  "Image Position (Patient)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const image_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x35),
  "Image Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_6,
);

export const image_orientation_patient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x37),
  "Image Orientation (Patient)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_6,
);

export const location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x50),
  "Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x52),
  "Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const laterality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x60),
  "Laterality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_laterality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x62),
  "Image Laterality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_geometry_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x70),
  "Image Geometry Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const masking_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x80),
  "Masking Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const report_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0xAA),
  "Report Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const temporal_position_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x100),
  "Temporal Position Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_temporal_positions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x105),
  "Number of Temporal Positions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const temporal_resolution = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x110),
  "Temporal Resolution",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const synchronization_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x200),
  "Synchronization Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const sop_instance_uid_of_concatenation_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x242),
  "SOP Instance UID of Concatenation Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const series_in_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1000),
  "Series in Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const acquisitions_in_series = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1001),
  "Acquisitions in Series",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const images_in_acquisition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1002),
  "Images in Acquisition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const images_in_series = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1003),
  "Images in Series",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const acquisitions_in_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1004),
  "Acquisitions in Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const images_in_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1005),
  "Images in Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const reference = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1020),
  "Reference",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const target_position_reference_indicator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x103F),
  "Target Position Reference Indicator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const position_reference_indicator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1040),
  "Position Reference Indicator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const slice_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1041),
  "Slice Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const other_study_numbers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1070),
  "Other Study Numbers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const number_of_patient_related_studies = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1200),
  "Number of Patient Related Studies",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_patient_related_series = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1202),
  "Number of Patient Related Series",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_patient_related_instances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1204),
  "Number of Patient Related Instances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_study_related_series = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1206),
  "Number of Study Related Series",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_study_related_instances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1208),
  "Number of Study Related Instances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_series_related_instances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x1209),
  "Number of Series Related Instances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const source_image_ids = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x3100),
  "Source Image IDs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const modifying_device_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x3401),
  "Modifying Device ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const modified_image_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x3402),
  "Modified Image ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const modified_image_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x3403),
  "Modified Image Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const modifying_device_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x3404),
  "Modifying Device Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const modified_image_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x3405),
  "Modified Image Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const modified_image_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x3406),
  "Modified Image Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const image_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x4000),
  "Image Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const original_image_identification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x5000),
  "Original Image Identification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const original_image_identification_nomenclature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x5002),
  "Original Image Identification Nomenclature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const stack_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9056),
  "Stack ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const in_stack_position_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9057),
  "In-Stack Position Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const frame_anatomy_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9071),
  "Frame Anatomy Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_laterality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9072),
  "Frame Laterality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const frame_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9111),
  "Frame Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const plane_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9113),
  "Plane Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const plane_orientation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9116),
  "Plane Orientation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const temporal_position_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9128),
  "Temporal Position Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const nominal_cardiac_trigger_delay_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9153),
  "Nominal Cardiac Trigger Delay Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const nominal_cardiac_trigger_time_prior_to_r_peak = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9154),
  "Nominal Cardiac Trigger Time Prior To R-Peak",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const actual_cardiac_trigger_time_prior_to_r_peak = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9155),
  "Actual Cardiac Trigger Time Prior To R-Peak",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const frame_acquisition_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9156),
  "Frame Acquisition Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const dimension_index_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9157),
  "Dimension Index Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const frame_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9158),
  "Frame Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const concatenation_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9161),
  "Concatenation UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const in_concatenation_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9162),
  "In-concatenation Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const in_concatenation_total_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9163),
  "In-concatenation Total Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const dimension_organization_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9164),
  "Dimension Organization UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const dimension_index_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9165),
  "Dimension Index Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const functional_group_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9167),
  "Functional Group Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const unassigned_shared_converted_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9170),
  "Unassigned Shared Converted Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const unassigned_per_frame_converted_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9171),
  "Unassigned Per-Frame Converted Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conversion_source_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9172),
  "Conversion Source Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dimension_index_private_creator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9213),
  "Dimension Index Private Creator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const dimension_organization_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9221),
  "Dimension Organization Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dimension_index_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9222),
  "Dimension Index Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const concatenation_frame_offset_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9228),
  "Concatenation Frame Offset Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const functional_group_private_creator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9238),
  "Functional Group Private Creator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const nominal_percentage_of_cardiac_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9241),
  "Nominal Percentage of Cardiac Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const nominal_percentage_of_respiratory_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9245),
  "Nominal Percentage of Respiratory Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const starting_respiratory_amplitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9246),
  "Starting Respiratory Amplitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const starting_respiratory_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9247),
  "Starting Respiratory Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ending_respiratory_amplitude = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9248),
  "Ending Respiratory Amplitude",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ending_respiratory_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9249),
  "Ending Respiratory Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const respiratory_trigger_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9250),
  "Respiratory Trigger Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rr_interval_time_nominal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9251),
  "R-R Interval Time Nominal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const actual_cardiac_trigger_delay_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9252),
  "Actual Cardiac Trigger Delay Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const respiratory_synchronization_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9253),
  "Respiratory Synchronization Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const respiratory_interval_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9254),
  "Respiratory Interval Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const nominal_respiratory_trigger_delay_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9255),
  "Nominal Respiratory Trigger Delay Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const respiratory_trigger_delay_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9256),
  "Respiratory Trigger Delay Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const actual_respiratory_trigger_delay_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9257),
  "Actual Respiratory Trigger Delay Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const image_position_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9301),
  "Image Position (Volume)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const image_orientation_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9302),
  "Image Orientation (Volume)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_6,
);

export const ultrasound_acquisition_geometry = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9307),
  "Ultrasound Acquisition Geometry",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const apex_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9308),
  "Apex Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const volume_to_transducer_mapping_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9309),
  "Volume to Transducer Mapping Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  /* @__PURE__ */ new ValueMultiplicity(16, /* @__PURE__ */ new Some(16)),
);

export const volume_to_table_mapping_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x930A),
  "Volume to Table Mapping Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  /* @__PURE__ */ new ValueMultiplicity(16, /* @__PURE__ */ new Some(16)),
);

export const volume_to_transducer_relationship = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x930B),
  "Volume to Transducer Relationship",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_frame_of_reference_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x930C),
  "Patient Frame of Reference Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const temporal_position_time_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x930D),
  "Temporal Position Time Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const plane_position_volume_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x930E),
  "Plane Position (Volume) Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const plane_orientation_volume_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x930F),
  "Plane Orientation (Volume) Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const temporal_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9310),
  "Temporal Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dimension_organization_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9311),
  "Dimension Organization Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const volume_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9312),
  "Volume Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const table_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9313),
  "Table Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const dimension_description_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9421),
  "Dimension Description Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_orientation_in_frame_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9450),
  "Patient Orientation in Frame Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9453),
  "Frame Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const acquisition_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9518),
  "Acquisition Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const contributing_sop_instances_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9529),
  "Contributing SOP Instances Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reconstruction_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x20, 0x9536),
  "Reconstruction Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

function find_element_in_group_0020(element) {
  if (element === 0xD) {
    return new Ok(study_instance_uid);
  } else if (element === 0xE) {
    return new Ok(series_instance_uid);
  } else if (element === 0x10) {
    return new Ok(study_id);
  } else if (element === 0x11) {
    return new Ok(series_number);
  } else if (element === 0x12) {
    return new Ok(acquisition_number);
  } else if (element === 0x13) {
    return new Ok(instance_number);
  } else if (element === 0x14) {
    return new Ok(isotope_number);
  } else if (element === 0x15) {
    return new Ok(phase_number);
  } else if (element === 0x16) {
    return new Ok(interval_number);
  } else if (element === 0x17) {
    return new Ok(time_slot_number);
  } else if (element === 0x18) {
    return new Ok(angle_number);
  } else if (element === 0x19) {
    return new Ok(item_number);
  } else if (element === 0x20) {
    return new Ok(patient_orientation);
  } else if (element === 0x22) {
    return new Ok(overlay_number);
  } else if (element === 0x24) {
    return new Ok(curve_number);
  } else if (element === 0x26) {
    return new Ok(lut_number);
  } else if (element === 0x27) {
    return new Ok(pyramid_label);
  } else if (element === 0x30) {
    return new Ok(image_position);
  } else if (element === 0x32) {
    return new Ok(image_position_patient);
  } else if (element === 0x35) {
    return new Ok(image_orientation);
  } else if (element === 0x37) {
    return new Ok(image_orientation_patient);
  } else if (element === 0x50) {
    return new Ok(location);
  } else if (element === 0x52) {
    return new Ok(frame_of_reference_uid);
  } else if (element === 0x60) {
    return new Ok(laterality);
  } else if (element === 0x62) {
    return new Ok(image_laterality);
  } else if (element === 0x70) {
    return new Ok(image_geometry_type);
  } else if (element === 0x80) {
    return new Ok(masking_image);
  } else if (element === 0xAA) {
    return new Ok(report_number);
  } else if (element === 0x100) {
    return new Ok(temporal_position_identifier);
  } else if (element === 0x105) {
    return new Ok(number_of_temporal_positions);
  } else if (element === 0x110) {
    return new Ok(temporal_resolution);
  } else if (element === 0x200) {
    return new Ok(synchronization_frame_of_reference_uid);
  } else if (element === 0x242) {
    return new Ok(sop_instance_uid_of_concatenation_source);
  } else if (element === 0x1000) {
    return new Ok(series_in_study);
  } else if (element === 0x1001) {
    return new Ok(acquisitions_in_series);
  } else if (element === 0x1002) {
    return new Ok(images_in_acquisition);
  } else if (element === 0x1003) {
    return new Ok(images_in_series);
  } else if (element === 0x1004) {
    return new Ok(acquisitions_in_study);
  } else if (element === 0x1005) {
    return new Ok(images_in_study);
  } else if (element === 0x1020) {
    return new Ok(reference);
  } else if (element === 0x103F) {
    return new Ok(target_position_reference_indicator);
  } else if (element === 0x1040) {
    return new Ok(position_reference_indicator);
  } else if (element === 0x1041) {
    return new Ok(slice_location);
  } else if (element === 0x1070) {
    return new Ok(other_study_numbers);
  } else if (element === 0x1200) {
    return new Ok(number_of_patient_related_studies);
  } else if (element === 0x1202) {
    return new Ok(number_of_patient_related_series);
  } else if (element === 0x1204) {
    return new Ok(number_of_patient_related_instances);
  } else if (element === 0x1206) {
    return new Ok(number_of_study_related_series);
  } else if (element === 0x1208) {
    return new Ok(number_of_study_related_instances);
  } else if (element === 0x1209) {
    return new Ok(number_of_series_related_instances);
  } else if (element === 0x3401) {
    return new Ok(modifying_device_id);
  } else if (element === 0x3402) {
    return new Ok(modified_image_id);
  } else if (element === 0x3403) {
    return new Ok(modified_image_date);
  } else if (element === 0x3404) {
    return new Ok(modifying_device_manufacturer);
  } else if (element === 0x3405) {
    return new Ok(modified_image_time);
  } else if (element === 0x3406) {
    return new Ok(modified_image_description);
  } else if (element === 0x4000) {
    return new Ok(image_comments);
  } else if (element === 0x5000) {
    return new Ok(original_image_identification);
  } else if (element === 0x5002) {
    return new Ok(original_image_identification_nomenclature);
  } else if (element === 0x9056) {
    return new Ok(stack_id);
  } else if (element === 0x9057) {
    return new Ok(in_stack_position_number);
  } else if (element === 0x9071) {
    return new Ok(frame_anatomy_sequence);
  } else if (element === 0x9072) {
    return new Ok(frame_laterality);
  } else if (element === 0x9111) {
    return new Ok(frame_content_sequence);
  } else if (element === 0x9113) {
    return new Ok(plane_position_sequence);
  } else if (element === 0x9116) {
    return new Ok(plane_orientation_sequence);
  } else if (element === 0x9128) {
    return new Ok(temporal_position_index);
  } else if (element === 0x9153) {
    return new Ok(nominal_cardiac_trigger_delay_time);
  } else if (element === 0x9154) {
    return new Ok(nominal_cardiac_trigger_time_prior_to_r_peak);
  } else if (element === 0x9155) {
    return new Ok(actual_cardiac_trigger_time_prior_to_r_peak);
  } else if (element === 0x9156) {
    return new Ok(frame_acquisition_number);
  } else if (element === 0x9157) {
    return new Ok(dimension_index_values);
  } else if (element === 0x9158) {
    return new Ok(frame_comments);
  } else if (element === 0x9161) {
    return new Ok(concatenation_uid);
  } else if (element === 0x9162) {
    return new Ok(in_concatenation_number);
  } else if (element === 0x9163) {
    return new Ok(in_concatenation_total_number);
  } else if (element === 0x9164) {
    return new Ok(dimension_organization_uid);
  } else if (element === 0x9165) {
    return new Ok(dimension_index_pointer);
  } else if (element === 0x9167) {
    return new Ok(functional_group_pointer);
  } else if (element === 0x9170) {
    return new Ok(unassigned_shared_converted_attributes_sequence);
  } else if (element === 0x9171) {
    return new Ok(unassigned_per_frame_converted_attributes_sequence);
  } else if (element === 0x9172) {
    return new Ok(conversion_source_attributes_sequence);
  } else if (element === 0x9213) {
    return new Ok(dimension_index_private_creator);
  } else if (element === 0x9221) {
    return new Ok(dimension_organization_sequence);
  } else if (element === 0x9222) {
    return new Ok(dimension_index_sequence);
  } else if (element === 0x9228) {
    return new Ok(concatenation_frame_offset_number);
  } else if (element === 0x9238) {
    return new Ok(functional_group_private_creator);
  } else if (element === 0x9241) {
    return new Ok(nominal_percentage_of_cardiac_phase);
  } else if (element === 0x9245) {
    return new Ok(nominal_percentage_of_respiratory_phase);
  } else if (element === 0x9246) {
    return new Ok(starting_respiratory_amplitude);
  } else if (element === 0x9247) {
    return new Ok(starting_respiratory_phase);
  } else if (element === 0x9248) {
    return new Ok(ending_respiratory_amplitude);
  } else if (element === 0x9249) {
    return new Ok(ending_respiratory_phase);
  } else if (element === 0x9250) {
    return new Ok(respiratory_trigger_type);
  } else if (element === 0x9251) {
    return new Ok(rr_interval_time_nominal);
  } else if (element === 0x9252) {
    return new Ok(actual_cardiac_trigger_delay_time);
  } else if (element === 0x9253) {
    return new Ok(respiratory_synchronization_sequence);
  } else if (element === 0x9254) {
    return new Ok(respiratory_interval_time);
  } else if (element === 0x9255) {
    return new Ok(nominal_respiratory_trigger_delay_time);
  } else if (element === 0x9256) {
    return new Ok(respiratory_trigger_delay_threshold);
  } else if (element === 0x9257) {
    return new Ok(actual_respiratory_trigger_delay_time);
  } else if (element === 0x9301) {
    return new Ok(image_position_volume);
  } else if (element === 0x9302) {
    return new Ok(image_orientation_volume);
  } else if (element === 0x9307) {
    return new Ok(ultrasound_acquisition_geometry);
  } else if (element === 0x9308) {
    return new Ok(apex_position);
  } else if (element === 0x9309) {
    return new Ok(volume_to_transducer_mapping_matrix);
  } else if (element === 0x930A) {
    return new Ok(volume_to_table_mapping_matrix);
  } else if (element === 0x930B) {
    return new Ok(volume_to_transducer_relationship);
  } else if (element === 0x930C) {
    return new Ok(patient_frame_of_reference_source);
  } else if (element === 0x930D) {
    return new Ok(temporal_position_time_offset);
  } else if (element === 0x930E) {
    return new Ok(plane_position_volume_sequence);
  } else if (element === 0x930F) {
    return new Ok(plane_orientation_volume_sequence);
  } else if (element === 0x9310) {
    return new Ok(temporal_position_sequence);
  } else if (element === 0x9311) {
    return new Ok(dimension_organization_type);
  } else if (element === 0x9312) {
    return new Ok(volume_frame_of_reference_uid);
  } else if (element === 0x9313) {
    return new Ok(table_frame_of_reference_uid);
  } else if (element === 0x9421) {
    return new Ok(dimension_description_label);
  } else if (element === 0x9450) {
    return new Ok(patient_orientation_in_frame_sequence);
  } else if (element === 0x9453) {
    return new Ok(frame_label);
  } else if (element === 0x9518) {
    return new Ok(acquisition_index);
  } else if (element === 0x9529) {
    return new Ok(contributing_sop_instances_reference_sequence);
  } else if (element === 0x9536) {
    return new Ok(reconstruction_index);
  } else {
    return new Error(undefined);
  }
}

export const light_path_filter_pass_through_wavelength = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1),
  "Light Path Filter Pass-Through Wavelength",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const light_path_filter_pass_band = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x2),
  "Light Path Filter Pass Band",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const image_path_filter_pass_through_wavelength = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x3),
  "Image Path Filter Pass-Through Wavelength",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_path_filter_pass_band = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x4),
  "Image Path Filter Pass Band",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const patient_eye_movement_commanded = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x5),
  "Patient Eye Movement Commanded",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_eye_movement_command_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x6),
  "Patient Eye Movement Command Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const spherical_lens_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x7),
  "Spherical Lens Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const cylinder_lens_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x8),
  "Cylinder Lens Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const cylinder_axis = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x9),
  "Cylinder Axis",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const emmetropic_magnification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0xA),
  "Emmetropic Magnification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const intra_ocular_pressure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0xB),
  "Intra Ocular Pressure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const horizontal_field_of_view = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0xC),
  "Horizontal Field of View",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const pupil_dilated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0xD),
  "Pupil Dilated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const degree_of_dilation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0xE),
  "Degree of Dilation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const vertex_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0xF),
  "Vertex Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const stereo_baseline_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x10),
  "Stereo Baseline Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stereo_baseline_displacement = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x11),
  "Stereo Baseline Displacement",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stereo_horizontal_pixel_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x12),
  "Stereo Horizontal Pixel Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stereo_vertical_pixel_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x13),
  "Stereo Vertical Pixel Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stereo_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x14),
  "Stereo Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const acquisition_device_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x15),
  "Acquisition Device Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const illumination_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x16),
  "Illumination Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const light_path_filter_type_stack_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x17),
  "Light Path Filter Type Stack Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_path_filter_type_stack_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x18),
  "Image Path Filter Type Stack Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lenses_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x19),
  "Lenses Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_description_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1A),
  "Channel Description Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const refractive_state_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1B),
  "Refractive State Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mydriatic_agent_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1C),
  "Mydriatic Agent Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const relative_image_position_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1D),
  "Relative Image Position Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const camera_angle_of_view = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1E),
  "Camera Angle of View",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stereo_pairs_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x20),
  "Stereo Pairs Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const left_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x21),
  "Left Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const right_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x22),
  "Right Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const stereo_pairs_present = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x28),
  "Stereo Pairs Present",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const axial_length_of_the_eye = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x30),
  "Axial Length of the Eye",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ophthalmic_frame_location_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x31),
  "Ophthalmic Frame Location Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reference_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x32),
  "Reference Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2_to_n,
);

export const depth_spatial_resolution = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x35),
  "Depth Spatial Resolution",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const maximum_depth_distortion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x36),
  "Maximum Depth Distortion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const along_scan_spatial_resolution = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x37),
  "Along-scan Spatial Resolution",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const maximum_along_scan_distortion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x38),
  "Maximum Along-scan Distortion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ophthalmic_image_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x39),
  "Ophthalmic Image Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const depth_of_transverse_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x41),
  "Depth of Transverse Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const mydriatic_agent_concentration_units_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x42),
  "Mydriatic Agent Concentration Units Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const across_scan_spatial_resolution = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x48),
  "Across-scan Spatial Resolution",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const maximum_across_scan_distortion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x49),
  "Maximum Across-scan Distortion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const mydriatic_agent_concentration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x4E),
  "Mydriatic Agent Concentration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const illumination_wave_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x55),
  "Illumination Wave Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const illumination_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x56),
  "Illumination Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const illumination_bandwidth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x57),
  "Illumination Bandwidth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const mydriatic_agent_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x58),
  "Mydriatic Agent Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_measurements_right_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1007),
  "Ophthalmic Axial Measurements Right Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_measurements_left_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1008),
  "Ophthalmic Axial Measurements Left Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_measurements_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1009),
  "Ophthalmic Axial Measurements Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ophthalmic_axial_length_measurements_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1010),
  "Ophthalmic Axial Length Measurements Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ophthalmic_axial_length_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1012),
  "Ophthalmic Axial Length Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1019),
  "Ophthalmic Axial Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const lens_status_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1024),
  "Lens Status Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const vitreous_status_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1025),
  "Vitreous Status Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const iol_formula_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1028),
  "IOL Formula Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const iol_formula_detail = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1029),
  "IOL Formula Detail",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const keratometer_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1033),
  "Keratometer Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const source_of_ophthalmic_axial_length_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1035),
  "Source of Ophthalmic Axial Length Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_of_corneal_size_data_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1036),
  "Source of Corneal Size Data Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const target_refraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1037),
  "Target Refraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const refractive_procedure_occurred = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1039),
  "Refractive Procedure Occurred",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const refractive_surgery_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1040),
  "Refractive Surgery Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_ultrasound_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1044),
  "Ophthalmic Ultrasound Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surgically_induced_astigmatism_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1045),
  "Surgically Induced Astigmatism Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const type_of_optical_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1046),
  "Type of Optical Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const toric_iol_power_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1047),
  "Toric IOL Power Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const predicted_toric_error_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1048),
  "Predicted Toric Error Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pre_selected_for_implantation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1049),
  "Pre-Selected for Implantation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const toric_iol_power_for_exact_emmetropia_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x104A),
  "Toric IOL Power for Exact Emmetropia Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const toric_iol_power_for_exact_target_refraction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x104B),
  "Toric IOL Power for Exact Target Refraction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1050),
  "Ophthalmic Axial Length Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const iol_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1053),
  "IOL Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const predicted_refractive_error = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1054),
  "Predicted Refractive Error",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ophthalmic_axial_length_velocity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1059),
  "Ophthalmic Axial Length Velocity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const lens_status_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1065),
  "Lens Status Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const vitreous_status_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1066),
  "Vitreous Status Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const iol_power_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1090),
  "IOL Power Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lens_constant_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1092),
  "Lens Constant Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const iol_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1093),
  "IOL Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const lens_constant_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1094),
  "Lens Constant Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const implant_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1095),
  "Implant Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const keratometry_measurement_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1096),
  "Keratometry Measurement Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_part_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1097),
  "Implant Part Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const referenced_ophthalmic_axial_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1100),
  "Referenced Ophthalmic Axial Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_measurements_segment_name_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1101),
  "Ophthalmic Axial Length Measurements Segment Name Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const refractive_error_before_refractive_surgery_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1103),
  "Refractive Error Before Refractive Surgery Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const iol_power_for_exact_emmetropia = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1121),
  "IOL Power For Exact Emmetropia",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const iol_power_for_exact_target_refraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1122),
  "IOL Power For Exact Target Refraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const anterior_chamber_depth_definition_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1125),
  "Anterior Chamber Depth Definition Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lens_thickness_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1127),
  "Lens Thickness Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anterior_chamber_depth_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1128),
  "Anterior Chamber Depth Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const calculation_comment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x112A),
  "Calculation Comment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const calculation_comment_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x112B),
  "Calculation Comment Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const calculation_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x112C),
  "Calculation Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const lens_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1130),
  "Lens Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const anterior_chamber_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1131),
  "Anterior Chamber Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const source_of_lens_thickness_data_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1132),
  "Source of Lens Thickness Data Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_of_anterior_chamber_depth_data_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1133),
  "Source of Anterior Chamber Depth Data Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_of_refractive_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1134),
  "Source of Refractive Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_of_refractive_measurements_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1135),
  "Source of Refractive Measurements Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_measurement_modified = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1140),
  "Ophthalmic Axial Length Measurement Modified",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ophthalmic_axial_length_data_source_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1150),
  "Ophthalmic Axial Length Data Source Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_acquisition_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1153),
  "Ophthalmic Axial Length Acquisition Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const signal_to_noise_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1155),
  "Signal to Noise Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ophthalmic_axial_length_data_source_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1159),
  "Ophthalmic Axial Length Data Source Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const ophthalmic_axial_length_measurements_total_length_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1210),
  "Ophthalmic Axial Length Measurements Total Length Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_measurements_segmental_length_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1211),
  "Ophthalmic Axial Length Measurements Segmental Length Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_measurements_length_summation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1212),
  "Ophthalmic Axial Length Measurements Length Summation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ultrasound_ophthalmic_axial_length_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1220),
  "Ultrasound Ophthalmic Axial Length Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const optical_ophthalmic_axial_length_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1225),
  "Optical Ophthalmic Axial Length Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ultrasound_selected_ophthalmic_axial_length_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1230),
  "Ultrasound Selected Ophthalmic Axial Length Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_selection_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1250),
  "Ophthalmic Axial Length Selection Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const optical_selected_ophthalmic_axial_length_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1255),
  "Optical Selected Ophthalmic Axial Length Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const selected_segmental_ophthalmic_axial_length_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1257),
  "Selected Segmental Ophthalmic Axial Length Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const selected_total_ophthalmic_axial_length_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1260),
  "Selected Total Ophthalmic Axial Length Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_quality_metric_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1262),
  "Ophthalmic Axial Length Quality Metric Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_quality_metric_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1265),
  "Ophthalmic Axial Length Quality Metric Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_quality_metric_type_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1273),
  "Ophthalmic Axial Length Quality Metric Type Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const intraocular_lens_calculations_right_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1300),
  "Intraocular Lens Calculations Right Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const intraocular_lens_calculations_left_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1310),
  "Intraocular Lens Calculations Left Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_ophthalmic_axial_length_measurement_qc_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1330),
  "Referenced Ophthalmic Axial Length Measurement QC Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_mapping_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1415),
  "Ophthalmic Mapping Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acquisition_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1420),
  "Acquisition Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_method_algorithm_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1423),
  "Acquisition Method Algorithm Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_thickness_map_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1436),
  "Ophthalmic Thickness Map Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_thickness_mapping_normals_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1443),
  "Ophthalmic Thickness Mapping Normals Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const retinal_thickness_definition_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1445),
  "Retinal Thickness Definition Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pixel_value_mapping_to_coded_concept_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1450),
  "Pixel Value Mapping to Coded Concept Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mapped_pixel_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1452),
  "Mapped Pixel Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const pixel_value_mapping_explanation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1454),
  "Pixel Value Mapping Explanation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const ophthalmic_thickness_map_quality_threshold_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1458),
  "Ophthalmic Thickness Map Quality Threshold Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_thickness_map_threshold_quality_rating = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1460),
  "Ophthalmic Thickness Map Threshold Quality Rating",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const anatomic_structure_reference_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1463),
  "Anatomic Structure Reference Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const registration_to_localizer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1465),
  "Registration to Localizer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const registered_localizer_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1466),
  "Registered Localizer Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const registered_localizer_top_left_hand_corner = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1467),
  "Registered Localizer Top Left Hand Corner",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const registered_localizer_bottom_right_hand_corner = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1468),
  "Registered Localizer Bottom Right Hand Corner",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const ophthalmic_thickness_map_quality_rating_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1470),
  "Ophthalmic Thickness Map Quality Rating Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const relevant_opt_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1472),
  "Relevant OPT Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transformation_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1512),
  "Transformation Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transformation_algorithm_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1513),
  "Transformation Algorithm Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_axial_length_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1515),
  "Ophthalmic Axial Length Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ophthalmic_fov = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1517),
  "Ophthalmic FOV",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const two_dimensional_to_three_dimensional_map_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1518),
  "Two Dimensional to Three Dimensional Map Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const wide_field_ophthalmic_photography_quality_rating_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1525),
  "Wide Field Ophthalmic Photography Quality Rating Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const wide_field_ophthalmic_photography_quality_threshold_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1526),
  "Wide Field Ophthalmic Photography Quality Threshold Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const wide_field_ophthalmic_photography_threshold_quality_rating = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1527),
  "Wide Field Ophthalmic Photography Threshold Quality Rating",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const x_coordinates_center_pixel_view_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1528),
  "X Coordinates Center Pixel View Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const y_coordinates_center_pixel_view_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1529),
  "Y Coordinates Center Pixel View Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const number_of_map_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1530),
  "Number of Map Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const two_dimensional_to_three_dimensional_map_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1531),
  "Two Dimensional to Three Dimensional Map Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const derivation_algorithm_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1612),
  "Derivation Algorithm Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_image_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1615),
  "Ophthalmic Image Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_image_type_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1616),
  "Ophthalmic Image Type Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const scan_pattern_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1618),
  "Scan Pattern Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_surface_mesh_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1620),
  "Referenced Surface Mesh Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_volumetric_properties_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1622),
  "Ophthalmic Volumetric Properties Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ophthalmic_anatomic_reference_point_x_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1624),
  "Ophthalmic Anatomic Reference Point X-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ophthalmic_anatomic_reference_point_y_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1626),
  "Ophthalmic Anatomic Reference Point Y-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ophthalmic_en_face_image_quality_rating_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1628),
  "Ophthalmic En Face Image Quality Rating Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const quality_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1630),
  "Quality Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const oct_bscan_analysis_acquisition_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1640),
  "OCT B-scan Analysis Acquisition Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_bscans_per_frame = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1642),
  "Number of B-scans Per Frame",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const bscan_slab_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1643),
  "B-scan Slab Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const distance_between_bscan_slabs = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1644),
  "Distance Between B-scan Slabs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const bscan_cycle_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1645),
  "B-scan Cycle Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const bscan_cycle_time_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1646),
  "B-scan Cycle Time Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const ascan_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1649),
  "A-scan Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const bscan_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1650),
  "B-scan Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const surface_mesh_z_pixel_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x22, 0x1658),
  "Surface Mesh Z-Pixel Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

function find_element_in_group_0022(element) {
  if (element === 0x1) {
    return new Ok(light_path_filter_pass_through_wavelength);
  } else if (element === 0x2) {
    return new Ok(light_path_filter_pass_band);
  } else if (element === 0x3) {
    return new Ok(image_path_filter_pass_through_wavelength);
  } else if (element === 0x4) {
    return new Ok(image_path_filter_pass_band);
  } else if (element === 0x5) {
    return new Ok(patient_eye_movement_commanded);
  } else if (element === 0x6) {
    return new Ok(patient_eye_movement_command_code_sequence);
  } else if (element === 0x7) {
    return new Ok(spherical_lens_power);
  } else if (element === 0x8) {
    return new Ok(cylinder_lens_power);
  } else if (element === 0x9) {
    return new Ok(cylinder_axis);
  } else if (element === 0xA) {
    return new Ok(emmetropic_magnification);
  } else if (element === 0xB) {
    return new Ok(intra_ocular_pressure);
  } else if (element === 0xC) {
    return new Ok(horizontal_field_of_view);
  } else if (element === 0xD) {
    return new Ok(pupil_dilated);
  } else if (element === 0xE) {
    return new Ok(degree_of_dilation);
  } else if (element === 0xF) {
    return new Ok(vertex_distance);
  } else if (element === 0x10) {
    return new Ok(stereo_baseline_angle);
  } else if (element === 0x11) {
    return new Ok(stereo_baseline_displacement);
  } else if (element === 0x12) {
    return new Ok(stereo_horizontal_pixel_offset);
  } else if (element === 0x13) {
    return new Ok(stereo_vertical_pixel_offset);
  } else if (element === 0x14) {
    return new Ok(stereo_rotation);
  } else if (element === 0x15) {
    return new Ok(acquisition_device_type_code_sequence);
  } else if (element === 0x16) {
    return new Ok(illumination_type_code_sequence);
  } else if (element === 0x17) {
    return new Ok(light_path_filter_type_stack_code_sequence);
  } else if (element === 0x18) {
    return new Ok(image_path_filter_type_stack_code_sequence);
  } else if (element === 0x19) {
    return new Ok(lenses_code_sequence);
  } else if (element === 0x1A) {
    return new Ok(channel_description_code_sequence);
  } else if (element === 0x1B) {
    return new Ok(refractive_state_sequence);
  } else if (element === 0x1C) {
    return new Ok(mydriatic_agent_code_sequence);
  } else if (element === 0x1D) {
    return new Ok(relative_image_position_code_sequence);
  } else if (element === 0x1E) {
    return new Ok(camera_angle_of_view);
  } else if (element === 0x20) {
    return new Ok(stereo_pairs_sequence);
  } else if (element === 0x21) {
    return new Ok(left_image_sequence);
  } else if (element === 0x22) {
    return new Ok(right_image_sequence);
  } else if (element === 0x28) {
    return new Ok(stereo_pairs_present);
  } else if (element === 0x30) {
    return new Ok(axial_length_of_the_eye);
  } else if (element === 0x31) {
    return new Ok(ophthalmic_frame_location_sequence);
  } else if (element === 0x32) {
    return new Ok(reference_coordinates);
  } else if (element === 0x35) {
    return new Ok(depth_spatial_resolution);
  } else if (element === 0x36) {
    return new Ok(maximum_depth_distortion);
  } else if (element === 0x37) {
    return new Ok(along_scan_spatial_resolution);
  } else if (element === 0x38) {
    return new Ok(maximum_along_scan_distortion);
  } else if (element === 0x39) {
    return new Ok(ophthalmic_image_orientation);
  } else if (element === 0x41) {
    return new Ok(depth_of_transverse_image);
  } else if (element === 0x42) {
    return new Ok(mydriatic_agent_concentration_units_sequence);
  } else if (element === 0x48) {
    return new Ok(across_scan_spatial_resolution);
  } else if (element === 0x49) {
    return new Ok(maximum_across_scan_distortion);
  } else if (element === 0x4E) {
    return new Ok(mydriatic_agent_concentration);
  } else if (element === 0x55) {
    return new Ok(illumination_wave_length);
  } else if (element === 0x56) {
    return new Ok(illumination_power);
  } else if (element === 0x57) {
    return new Ok(illumination_bandwidth);
  } else if (element === 0x58) {
    return new Ok(mydriatic_agent_sequence);
  } else if (element === 0x1007) {
    return new Ok(ophthalmic_axial_measurements_right_eye_sequence);
  } else if (element === 0x1008) {
    return new Ok(ophthalmic_axial_measurements_left_eye_sequence);
  } else if (element === 0x1009) {
    return new Ok(ophthalmic_axial_measurements_device_type);
  } else if (element === 0x1010) {
    return new Ok(ophthalmic_axial_length_measurements_type);
  } else if (element === 0x1012) {
    return new Ok(ophthalmic_axial_length_sequence);
  } else if (element === 0x1019) {
    return new Ok(ophthalmic_axial_length);
  } else if (element === 0x1024) {
    return new Ok(lens_status_code_sequence);
  } else if (element === 0x1025) {
    return new Ok(vitreous_status_code_sequence);
  } else if (element === 0x1028) {
    return new Ok(iol_formula_code_sequence);
  } else if (element === 0x1029) {
    return new Ok(iol_formula_detail);
  } else if (element === 0x1033) {
    return new Ok(keratometer_index);
  } else if (element === 0x1035) {
    return new Ok(source_of_ophthalmic_axial_length_code_sequence);
  } else if (element === 0x1036) {
    return new Ok(source_of_corneal_size_data_code_sequence);
  } else if (element === 0x1037) {
    return new Ok(target_refraction);
  } else if (element === 0x1039) {
    return new Ok(refractive_procedure_occurred);
  } else if (element === 0x1040) {
    return new Ok(refractive_surgery_type_code_sequence);
  } else if (element === 0x1044) {
    return new Ok(ophthalmic_ultrasound_method_code_sequence);
  } else if (element === 0x1045) {
    return new Ok(surgically_induced_astigmatism_sequence);
  } else if (element === 0x1046) {
    return new Ok(type_of_optical_correction);
  } else if (element === 0x1047) {
    return new Ok(toric_iol_power_sequence);
  } else if (element === 0x1048) {
    return new Ok(predicted_toric_error_sequence);
  } else if (element === 0x1049) {
    return new Ok(pre_selected_for_implantation);
  } else if (element === 0x104A) {
    return new Ok(toric_iol_power_for_exact_emmetropia_sequence);
  } else if (element === 0x104B) {
    return new Ok(toric_iol_power_for_exact_target_refraction_sequence);
  } else if (element === 0x1050) {
    return new Ok(ophthalmic_axial_length_measurements_sequence);
  } else if (element === 0x1053) {
    return new Ok(iol_power);
  } else if (element === 0x1054) {
    return new Ok(predicted_refractive_error);
  } else if (element === 0x1059) {
    return new Ok(ophthalmic_axial_length_velocity);
  } else if (element === 0x1065) {
    return new Ok(lens_status_description);
  } else if (element === 0x1066) {
    return new Ok(vitreous_status_description);
  } else if (element === 0x1090) {
    return new Ok(iol_power_sequence);
  } else if (element === 0x1092) {
    return new Ok(lens_constant_sequence);
  } else if (element === 0x1093) {
    return new Ok(iol_manufacturer);
  } else if (element === 0x1094) {
    return new Ok(lens_constant_description);
  } else if (element === 0x1095) {
    return new Ok(implant_name);
  } else if (element === 0x1096) {
    return new Ok(keratometry_measurement_type_code_sequence);
  } else if (element === 0x1097) {
    return new Ok(implant_part_number);
  } else if (element === 0x1100) {
    return new Ok(referenced_ophthalmic_axial_measurements_sequence);
  } else if (element === 0x1101) {
    return new Ok(
      ophthalmic_axial_length_measurements_segment_name_code_sequence,
    );
  } else if (element === 0x1103) {
    return new Ok(refractive_error_before_refractive_surgery_code_sequence);
  } else if (element === 0x1121) {
    return new Ok(iol_power_for_exact_emmetropia);
  } else if (element === 0x1122) {
    return new Ok(iol_power_for_exact_target_refraction);
  } else if (element === 0x1125) {
    return new Ok(anterior_chamber_depth_definition_code_sequence);
  } else if (element === 0x1127) {
    return new Ok(lens_thickness_sequence);
  } else if (element === 0x1128) {
    return new Ok(anterior_chamber_depth_sequence);
  } else if (element === 0x112A) {
    return new Ok(calculation_comment_sequence);
  } else if (element === 0x112B) {
    return new Ok(calculation_comment_type);
  } else if (element === 0x112C) {
    return new Ok(calculation_comment);
  } else if (element === 0x1130) {
    return new Ok(lens_thickness);
  } else if (element === 0x1131) {
    return new Ok(anterior_chamber_depth);
  } else if (element === 0x1132) {
    return new Ok(source_of_lens_thickness_data_code_sequence);
  } else if (element === 0x1133) {
    return new Ok(source_of_anterior_chamber_depth_data_code_sequence);
  } else if (element === 0x1134) {
    return new Ok(source_of_refractive_measurements_sequence);
  } else if (element === 0x1135) {
    return new Ok(source_of_refractive_measurements_code_sequence);
  } else if (element === 0x1140) {
    return new Ok(ophthalmic_axial_length_measurement_modified);
  } else if (element === 0x1150) {
    return new Ok(ophthalmic_axial_length_data_source_code_sequence);
  } else if (element === 0x1153) {
    return new Ok(ophthalmic_axial_length_acquisition_method_code_sequence);
  } else if (element === 0x1155) {
    return new Ok(signal_to_noise_ratio);
  } else if (element === 0x1159) {
    return new Ok(ophthalmic_axial_length_data_source_description);
  } else if (element === 0x1210) {
    return new Ok(ophthalmic_axial_length_measurements_total_length_sequence);
  } else if (element === 0x1211) {
    return new Ok(
      ophthalmic_axial_length_measurements_segmental_length_sequence,
    );
  } else if (element === 0x1212) {
    return new Ok(
      ophthalmic_axial_length_measurements_length_summation_sequence,
    );
  } else if (element === 0x1220) {
    return new Ok(ultrasound_ophthalmic_axial_length_measurements_sequence);
  } else if (element === 0x1225) {
    return new Ok(optical_ophthalmic_axial_length_measurements_sequence);
  } else if (element === 0x1230) {
    return new Ok(ultrasound_selected_ophthalmic_axial_length_sequence);
  } else if (element === 0x1250) {
    return new Ok(ophthalmic_axial_length_selection_method_code_sequence);
  } else if (element === 0x1255) {
    return new Ok(optical_selected_ophthalmic_axial_length_sequence);
  } else if (element === 0x1257) {
    return new Ok(selected_segmental_ophthalmic_axial_length_sequence);
  } else if (element === 0x1260) {
    return new Ok(selected_total_ophthalmic_axial_length_sequence);
  } else if (element === 0x1262) {
    return new Ok(ophthalmic_axial_length_quality_metric_sequence);
  } else if (element === 0x1265) {
    return new Ok(ophthalmic_axial_length_quality_metric_type_code_sequence);
  } else if (element === 0x1273) {
    return new Ok(ophthalmic_axial_length_quality_metric_type_description);
  } else if (element === 0x1300) {
    return new Ok(intraocular_lens_calculations_right_eye_sequence);
  } else if (element === 0x1310) {
    return new Ok(intraocular_lens_calculations_left_eye_sequence);
  } else if (element === 0x1330) {
    return new Ok(
      referenced_ophthalmic_axial_length_measurement_qc_image_sequence,
    );
  } else if (element === 0x1415) {
    return new Ok(ophthalmic_mapping_device_type);
  } else if (element === 0x1420) {
    return new Ok(acquisition_method_code_sequence);
  } else if (element === 0x1423) {
    return new Ok(acquisition_method_algorithm_sequence);
  } else if (element === 0x1436) {
    return new Ok(ophthalmic_thickness_map_type_code_sequence);
  } else if (element === 0x1443) {
    return new Ok(ophthalmic_thickness_mapping_normals_sequence);
  } else if (element === 0x1445) {
    return new Ok(retinal_thickness_definition_code_sequence);
  } else if (element === 0x1450) {
    return new Ok(pixel_value_mapping_to_coded_concept_sequence);
  } else if (element === 0x1452) {
    return new Ok(mapped_pixel_value);
  } else if (element === 0x1454) {
    return new Ok(pixel_value_mapping_explanation);
  } else if (element === 0x1458) {
    return new Ok(ophthalmic_thickness_map_quality_threshold_sequence);
  } else if (element === 0x1460) {
    return new Ok(ophthalmic_thickness_map_threshold_quality_rating);
  } else if (element === 0x1463) {
    return new Ok(anatomic_structure_reference_point);
  } else if (element === 0x1465) {
    return new Ok(registration_to_localizer_sequence);
  } else if (element === 0x1466) {
    return new Ok(registered_localizer_units);
  } else if (element === 0x1467) {
    return new Ok(registered_localizer_top_left_hand_corner);
  } else if (element === 0x1468) {
    return new Ok(registered_localizer_bottom_right_hand_corner);
  } else if (element === 0x1470) {
    return new Ok(ophthalmic_thickness_map_quality_rating_sequence);
  } else if (element === 0x1472) {
    return new Ok(relevant_opt_attributes_sequence);
  } else if (element === 0x1512) {
    return new Ok(transformation_method_code_sequence);
  } else if (element === 0x1513) {
    return new Ok(transformation_algorithm_sequence);
  } else if (element === 0x1515) {
    return new Ok(ophthalmic_axial_length_method);
  } else if (element === 0x1517) {
    return new Ok(ophthalmic_fov);
  } else if (element === 0x1518) {
    return new Ok(two_dimensional_to_three_dimensional_map_sequence);
  } else if (element === 0x1525) {
    return new Ok(wide_field_ophthalmic_photography_quality_rating_sequence);
  } else if (element === 0x1526) {
    return new Ok(wide_field_ophthalmic_photography_quality_threshold_sequence);
  } else if (element === 0x1527) {
    return new Ok(wide_field_ophthalmic_photography_threshold_quality_rating);
  } else if (element === 0x1528) {
    return new Ok(x_coordinates_center_pixel_view_angle);
  } else if (element === 0x1529) {
    return new Ok(y_coordinates_center_pixel_view_angle);
  } else if (element === 0x1530) {
    return new Ok(number_of_map_points);
  } else if (element === 0x1531) {
    return new Ok(two_dimensional_to_three_dimensional_map_data);
  } else if (element === 0x1612) {
    return new Ok(derivation_algorithm_sequence);
  } else if (element === 0x1615) {
    return new Ok(ophthalmic_image_type_code_sequence);
  } else if (element === 0x1616) {
    return new Ok(ophthalmic_image_type_description);
  } else if (element === 0x1618) {
    return new Ok(scan_pattern_type_code_sequence);
  } else if (element === 0x1620) {
    return new Ok(referenced_surface_mesh_identification_sequence);
  } else if (element === 0x1622) {
    return new Ok(ophthalmic_volumetric_properties_flag);
  } else if (element === 0x1624) {
    return new Ok(ophthalmic_anatomic_reference_point_x_coordinate);
  } else if (element === 0x1626) {
    return new Ok(ophthalmic_anatomic_reference_point_y_coordinate);
  } else if (element === 0x1628) {
    return new Ok(ophthalmic_en_face_image_quality_rating_sequence);
  } else if (element === 0x1630) {
    return new Ok(quality_threshold);
  } else if (element === 0x1640) {
    return new Ok(oct_bscan_analysis_acquisition_parameters_sequence);
  } else if (element === 0x1642) {
    return new Ok(number_of_bscans_per_frame);
  } else if (element === 0x1643) {
    return new Ok(bscan_slab_thickness);
  } else if (element === 0x1644) {
    return new Ok(distance_between_bscan_slabs);
  } else if (element === 0x1645) {
    return new Ok(bscan_cycle_time);
  } else if (element === 0x1646) {
    return new Ok(bscan_cycle_time_vector);
  } else if (element === 0x1649) {
    return new Ok(ascan_rate);
  } else if (element === 0x1650) {
    return new Ok(bscan_rate);
  } else if (element === 0x1658) {
    return new Ok(surface_mesh_z_pixel_offset);
  } else {
    return new Error(undefined);
  }
}

export const visual_field_horizontal_extent = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x10),
  "Visual Field Horizontal Extent",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_field_vertical_extent = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x11),
  "Visual Field Vertical Extent",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_field_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x12),
  "Visual Field Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const screening_test_mode_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x16),
  "Screening Test Mode Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const maximum_stimulus_luminance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x18),
  "Maximum Stimulus Luminance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const background_luminance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x20),
  "Background Luminance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stimulus_color_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x21),
  "Stimulus Color Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const background_illumination_color_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x24),
  "Background Illumination Color Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const stimulus_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x25),
  "Stimulus Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stimulus_presentation_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x28),
  "Stimulus Presentation Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const fixation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x32),
  "Fixation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fixation_monitoring_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x33),
  "Fixation Monitoring Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_field_catch_trial_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x34),
  "Visual Field Catch Trial Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fixation_checked_quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x35),
  "Fixation Checked Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const patient_not_properly_fixated_quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x36),
  "Patient Not Properly Fixated Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const presented_visual_stimuli_data_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x37),
  "Presented Visual Stimuli Data Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_visual_stimuli = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x38),
  "Number of Visual Stimuli",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const excessive_fixation_losses_data_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x39),
  "Excessive Fixation Losses Data Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const excessive_fixation_losses = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x40),
  "Excessive Fixation Losses",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const stimuli_retesting_quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x42),
  "Stimuli Retesting Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const comments_on_patient_performance_of_visual_field = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x44),
  "Comments on Patient's Performance of Visual Field",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const false_negatives_estimate_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x45),
  "False Negatives Estimate Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const false_negatives_estimate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x46),
  "False Negatives Estimate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const negative_catch_trials_quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x48),
  "Negative Catch Trials Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const false_negatives_quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x50),
  "False Negatives Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const excessive_false_negatives_data_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x51),
  "Excessive False Negatives Data Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const excessive_false_negatives = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x52),
  "Excessive False Negatives",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const false_positives_estimate_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x53),
  "False Positives Estimate Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const false_positives_estimate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x54),
  "False Positives Estimate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const catch_trials_data_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x55),
  "Catch Trials Data Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const positive_catch_trials_quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x56),
  "Positive Catch Trials Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const test_point_normals_data_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x57),
  "Test Point Normals Data Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const test_point_normals_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x58),
  "Test Point Normals Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const global_deviation_probability_normals_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x59),
  "Global Deviation Probability Normals Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const false_positives_quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x60),
  "False Positives Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const excessive_false_positives_data_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x61),
  "Excessive False Positives Data Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const excessive_false_positives = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x62),
  "Excessive False Positives",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const visual_field_test_normals_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x63),
  "Visual Field Test Normals Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const results_normals_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x64),
  "Results Normals Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const age_corrected_sensitivity_deviation_algorithm_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x65),
  "Age Corrected Sensitivity Deviation Algorithm Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const global_deviation_from_normal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x66),
  "Global Deviation From Normal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const generalized_defect_sensitivity_deviation_algorithm_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x67),
  "Generalized Defect Sensitivity Deviation Algorithm Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const localized_deviation_from_normal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x68),
  "Localized Deviation From Normal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const patient_reliability_indicator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x69),
  "Patient Reliability Indicator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const visual_field_mean_sensitivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x70),
  "Visual Field Mean Sensitivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const global_deviation_probability = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x71),
  "Global Deviation Probability",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const local_deviation_probability_normals_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x72),
  "Local Deviation Probability Normals Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const localized_deviation_probability = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x73),
  "Localized Deviation Probability",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const short_term_fluctuation_calculated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x74),
  "Short Term Fluctuation Calculated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const short_term_fluctuation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x75),
  "Short Term Fluctuation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const short_term_fluctuation_probability_calculated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x76),
  "Short Term Fluctuation Probability Calculated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const short_term_fluctuation_probability = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x77),
  "Short Term Fluctuation Probability",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const corrected_localized_deviation_from_normal_calculated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x78),
  "Corrected Localized Deviation From Normal Calculated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const corrected_localized_deviation_from_normal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x79),
  "Corrected Localized Deviation From Normal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const corrected_localized_deviation_from_normal_probability_calculated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x80),
  "Corrected Localized Deviation From Normal Probability Calculated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const corrected_localized_deviation_from_normal_probability = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x81),
  "Corrected Localized Deviation From Normal Probability",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const global_deviation_probability_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x83),
  "Global Deviation Probability Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const localized_deviation_probability_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x85),
  "Localized Deviation Probability Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const foveal_sensitivity_measured = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x86),
  "Foveal Sensitivity Measured",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const foveal_sensitivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x87),
  "Foveal Sensitivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_field_test_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x88),
  "Visual Field Test Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_field_test_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x89),
  "Visual Field Test Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_field_test_point_x_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x90),
  "Visual Field Test Point X-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_field_test_point_y_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x91),
  "Visual Field Test Point Y-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const age_corrected_sensitivity_deviation_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x92),
  "Age Corrected Sensitivity Deviation Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const stimulus_results = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x93),
  "Stimulus Results",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const sensitivity_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x94),
  "Sensitivity Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const retest_stimulus_seen = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x95),
  "Retest Stimulus Seen",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const retest_sensitivity_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x96),
  "Retest Sensitivity Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_field_test_point_normals_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x97),
  "Visual Field Test Point Normals Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const quantified_defect = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x98),
  "Quantified Defect",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const age_corrected_sensitivity_deviation_probability_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x100),
  "Age Corrected Sensitivity Deviation Probability Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const generalized_defect_corrected_sensitivity_deviation_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x102),
  "Generalized Defect Corrected Sensitivity Deviation Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const generalized_defect_corrected_sensitivity_deviation_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x103),
  "Generalized Defect Corrected Sensitivity Deviation Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const generalized_defect_corrected_sensitivity_deviation_probability_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x104),
  "Generalized Defect Corrected Sensitivity Deviation Probability Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const minimum_sensitivity_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x105),
  "Minimum Sensitivity Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const blind_spot_localized = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x106),
  "Blind Spot Localized",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const blind_spot_x_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x107),
  "Blind Spot X-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const blind_spot_y_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x108),
  "Blind Spot Y-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_acuity_measurement_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x110),
  "Visual Acuity Measurement Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const refractive_parameters_used_on_patient_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x112),
  "Refractive Parameters Used on Patient Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurement_laterality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x113),
  "Measurement Laterality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ophthalmic_patient_clinical_information_left_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x114),
  "Ophthalmic Patient Clinical Information Left Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ophthalmic_patient_clinical_information_right_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x115),
  "Ophthalmic Patient Clinical Information Right Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const foveal_point_normative_data_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x117),
  "Foveal Point Normative Data Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const foveal_point_probability_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x118),
  "Foveal Point Probability Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const screening_baseline_measured = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x120),
  "Screening Baseline Measured",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const screening_baseline_measured_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x122),
  "Screening Baseline Measured Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const screening_baseline_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x124),
  "Screening Baseline Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const screening_baseline_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x126),
  "Screening Baseline Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const algorithm_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x202),
  "Algorithm Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const data_set_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x306),
  "Data Set Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const data_set_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x307),
  "Data Set Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const data_set_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x308),
  "Data Set Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const data_set_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x309),
  "Data Set Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const visual_field_test_reliability_global_index_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x317),
  "Visual Field Test Reliability Global Index Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_field_global_results_index_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x320),
  "Visual Field Global Results Index Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const data_observation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x325),
  "Data Observation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const index_normals_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x338),
  "Index Normals Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const index_probability = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x341),
  "Index Probability",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const index_probability_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x24, 0x344),
  "Index Probability Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0024(element) {
  if (element === 0x10) {
    return new Ok(visual_field_horizontal_extent);
  } else if (element === 0x11) {
    return new Ok(visual_field_vertical_extent);
  } else if (element === 0x12) {
    return new Ok(visual_field_shape);
  } else if (element === 0x16) {
    return new Ok(screening_test_mode_code_sequence);
  } else if (element === 0x18) {
    return new Ok(maximum_stimulus_luminance);
  } else if (element === 0x20) {
    return new Ok(background_luminance);
  } else if (element === 0x21) {
    return new Ok(stimulus_color_code_sequence);
  } else if (element === 0x24) {
    return new Ok(background_illumination_color_code_sequence);
  } else if (element === 0x25) {
    return new Ok(stimulus_area);
  } else if (element === 0x28) {
    return new Ok(stimulus_presentation_time);
  } else if (element === 0x32) {
    return new Ok(fixation_sequence);
  } else if (element === 0x33) {
    return new Ok(fixation_monitoring_code_sequence);
  } else if (element === 0x34) {
    return new Ok(visual_field_catch_trial_sequence);
  } else if (element === 0x35) {
    return new Ok(fixation_checked_quantity);
  } else if (element === 0x36) {
    return new Ok(patient_not_properly_fixated_quantity);
  } else if (element === 0x37) {
    return new Ok(presented_visual_stimuli_data_flag);
  } else if (element === 0x38) {
    return new Ok(number_of_visual_stimuli);
  } else if (element === 0x39) {
    return new Ok(excessive_fixation_losses_data_flag);
  } else if (element === 0x40) {
    return new Ok(excessive_fixation_losses);
  } else if (element === 0x42) {
    return new Ok(stimuli_retesting_quantity);
  } else if (element === 0x44) {
    return new Ok(comments_on_patient_performance_of_visual_field);
  } else if (element === 0x45) {
    return new Ok(false_negatives_estimate_flag);
  } else if (element === 0x46) {
    return new Ok(false_negatives_estimate);
  } else if (element === 0x48) {
    return new Ok(negative_catch_trials_quantity);
  } else if (element === 0x50) {
    return new Ok(false_negatives_quantity);
  } else if (element === 0x51) {
    return new Ok(excessive_false_negatives_data_flag);
  } else if (element === 0x52) {
    return new Ok(excessive_false_negatives);
  } else if (element === 0x53) {
    return new Ok(false_positives_estimate_flag);
  } else if (element === 0x54) {
    return new Ok(false_positives_estimate);
  } else if (element === 0x55) {
    return new Ok(catch_trials_data_flag);
  } else if (element === 0x56) {
    return new Ok(positive_catch_trials_quantity);
  } else if (element === 0x57) {
    return new Ok(test_point_normals_data_flag);
  } else if (element === 0x58) {
    return new Ok(test_point_normals_sequence);
  } else if (element === 0x59) {
    return new Ok(global_deviation_probability_normals_flag);
  } else if (element === 0x60) {
    return new Ok(false_positives_quantity);
  } else if (element === 0x61) {
    return new Ok(excessive_false_positives_data_flag);
  } else if (element === 0x62) {
    return new Ok(excessive_false_positives);
  } else if (element === 0x63) {
    return new Ok(visual_field_test_normals_flag);
  } else if (element === 0x64) {
    return new Ok(results_normals_sequence);
  } else if (element === 0x65) {
    return new Ok(age_corrected_sensitivity_deviation_algorithm_sequence);
  } else if (element === 0x66) {
    return new Ok(global_deviation_from_normal);
  } else if (element === 0x67) {
    return new Ok(generalized_defect_sensitivity_deviation_algorithm_sequence);
  } else if (element === 0x68) {
    return new Ok(localized_deviation_from_normal);
  } else if (element === 0x69) {
    return new Ok(patient_reliability_indicator);
  } else if (element === 0x70) {
    return new Ok(visual_field_mean_sensitivity);
  } else if (element === 0x71) {
    return new Ok(global_deviation_probability);
  } else if (element === 0x72) {
    return new Ok(local_deviation_probability_normals_flag);
  } else if (element === 0x73) {
    return new Ok(localized_deviation_probability);
  } else if (element === 0x74) {
    return new Ok(short_term_fluctuation_calculated);
  } else if (element === 0x75) {
    return new Ok(short_term_fluctuation);
  } else if (element === 0x76) {
    return new Ok(short_term_fluctuation_probability_calculated);
  } else if (element === 0x77) {
    return new Ok(short_term_fluctuation_probability);
  } else if (element === 0x78) {
    return new Ok(corrected_localized_deviation_from_normal_calculated);
  } else if (element === 0x79) {
    return new Ok(corrected_localized_deviation_from_normal);
  } else if (element === 0x80) {
    return new Ok(
      corrected_localized_deviation_from_normal_probability_calculated,
    );
  } else if (element === 0x81) {
    return new Ok(corrected_localized_deviation_from_normal_probability);
  } else if (element === 0x83) {
    return new Ok(global_deviation_probability_sequence);
  } else if (element === 0x85) {
    return new Ok(localized_deviation_probability_sequence);
  } else if (element === 0x86) {
    return new Ok(foveal_sensitivity_measured);
  } else if (element === 0x87) {
    return new Ok(foveal_sensitivity);
  } else if (element === 0x88) {
    return new Ok(visual_field_test_duration);
  } else if (element === 0x89) {
    return new Ok(visual_field_test_point_sequence);
  } else if (element === 0x90) {
    return new Ok(visual_field_test_point_x_coordinate);
  } else if (element === 0x91) {
    return new Ok(visual_field_test_point_y_coordinate);
  } else if (element === 0x92) {
    return new Ok(age_corrected_sensitivity_deviation_value);
  } else if (element === 0x93) {
    return new Ok(stimulus_results);
  } else if (element === 0x94) {
    return new Ok(sensitivity_value);
  } else if (element === 0x95) {
    return new Ok(retest_stimulus_seen);
  } else if (element === 0x96) {
    return new Ok(retest_sensitivity_value);
  } else if (element === 0x97) {
    return new Ok(visual_field_test_point_normals_sequence);
  } else if (element === 0x98) {
    return new Ok(quantified_defect);
  } else if (element === 0x100) {
    return new Ok(age_corrected_sensitivity_deviation_probability_value);
  } else if (element === 0x102) {
    return new Ok(generalized_defect_corrected_sensitivity_deviation_flag);
  } else if (element === 0x103) {
    return new Ok(generalized_defect_corrected_sensitivity_deviation_value);
  } else if (element === 0x104) {
    return new Ok(
      generalized_defect_corrected_sensitivity_deviation_probability_value,
    );
  } else if (element === 0x105) {
    return new Ok(minimum_sensitivity_value);
  } else if (element === 0x106) {
    return new Ok(blind_spot_localized);
  } else if (element === 0x107) {
    return new Ok(blind_spot_x_coordinate);
  } else if (element === 0x108) {
    return new Ok(blind_spot_y_coordinate);
  } else if (element === 0x110) {
    return new Ok(visual_acuity_measurement_sequence);
  } else if (element === 0x112) {
    return new Ok(refractive_parameters_used_on_patient_sequence);
  } else if (element === 0x113) {
    return new Ok(measurement_laterality);
  } else if (element === 0x114) {
    return new Ok(ophthalmic_patient_clinical_information_left_eye_sequence);
  } else if (element === 0x115) {
    return new Ok(ophthalmic_patient_clinical_information_right_eye_sequence);
  } else if (element === 0x117) {
    return new Ok(foveal_point_normative_data_flag);
  } else if (element === 0x118) {
    return new Ok(foveal_point_probability_value);
  } else if (element === 0x120) {
    return new Ok(screening_baseline_measured);
  } else if (element === 0x122) {
    return new Ok(screening_baseline_measured_sequence);
  } else if (element === 0x124) {
    return new Ok(screening_baseline_type);
  } else if (element === 0x126) {
    return new Ok(screening_baseline_value);
  } else if (element === 0x202) {
    return new Ok(algorithm_source);
  } else if (element === 0x306) {
    return new Ok(data_set_name);
  } else if (element === 0x307) {
    return new Ok(data_set_version);
  } else if (element === 0x308) {
    return new Ok(data_set_source);
  } else if (element === 0x309) {
    return new Ok(data_set_description);
  } else if (element === 0x317) {
    return new Ok(visual_field_test_reliability_global_index_sequence);
  } else if (element === 0x320) {
    return new Ok(visual_field_global_results_index_sequence);
  } else if (element === 0x325) {
    return new Ok(data_observation_sequence);
  } else if (element === 0x338) {
    return new Ok(index_normals_flag);
  } else if (element === 0x341) {
    return new Ok(index_probability);
  } else if (element === 0x344) {
    return new Ok(index_probability_sequence);
  } else {
    return new Error(undefined);
  }
}

export const samples_per_pixel = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x2),
  "Samples per Pixel",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const samples_per_pixel_used = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3),
  "Samples per Pixel Used",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const photometric_interpretation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x4),
  "Photometric Interpretation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_dimensions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x5),
  "Image Dimensions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const planar_configuration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6),
  "Planar Configuration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_frames = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x8),
  "Number of Frames",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const frame_increment_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9),
  "Frame Increment Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const frame_dimension_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0xA),
  "Frame Dimension Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x10),
  "Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x11),
  "Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const planes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x12),
  "Planes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const ultrasound_color_data_present = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x14),
  "Ultrasound Color Data Present",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x30),
  "Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const zoom_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x31),
  "Zoom Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const zoom_center = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x32),
  "Zoom Center",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const pixel_aspect_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x34),
  "Pixel Aspect Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2,
);

export const image_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x40),
  "Image Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const manipulated_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x50),
  "Manipulated Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const corrected_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x51),
  "Corrected Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const compression_recognition_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x5F),
  "Compression Recognition Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const compression_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x60),
  "Compression Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const compression_originator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x61),
  "Compression Originator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const compression_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x62),
  "Compression Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const compression_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x63),
  "Compression Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const compression_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x65),
  "Compression Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const compression_step_pointers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x66),
  "Compression Step Pointers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const repeat_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x68),
  "Repeat Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const bits_grouped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x69),
  "Bits Grouped",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const perimeter_table = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x70),
  "Perimeter Table",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const perimeter_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x71),
  "Perimeter Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const predictor_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x80),
  "Predictor Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const predictor_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x81),
  "Predictor Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const predictor_constants = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x82),
  "Predictor Constants",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const blocked_pixels = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x90),
  "Blocked Pixels",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const block_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x91),
  "Block Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const block_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x92),
  "Block Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const row_overlap = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x93),
  "Row Overlap",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const column_overlap = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x94),
  "Column Overlap",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const bits_allocated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x100),
  "Bits Allocated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const bits_stored = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x101),
  "Bits Stored",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const high_bit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x102),
  "High Bit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pixel_representation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x103),
  "Pixel Representation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const smallest_valid_pixel_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x104),
  "Smallest Valid Pixel Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const largest_valid_pixel_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x105),
  "Largest Valid Pixel Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const smallest_image_pixel_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x106),
  "Smallest Image Pixel Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const largest_image_pixel_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x107),
  "Largest Image Pixel Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const smallest_pixel_value_in_series = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x108),
  "Smallest Pixel Value in Series",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const largest_pixel_value_in_series = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x109),
  "Largest Pixel Value in Series",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const smallest_image_pixel_value_in_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x110),
  "Smallest Image Pixel Value in Plane",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const largest_image_pixel_value_in_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x111),
  "Largest Image Pixel Value in Plane",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const pixel_padding_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x120),
  "Pixel Padding Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const pixel_padding_range_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x121),
  "Pixel Padding Range Limit",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const float_pixel_padding_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x122),
  "Float Pixel Padding Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const double_float_pixel_padding_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x123),
  "Double Float Pixel Padding Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const float_pixel_padding_range_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x124),
  "Float Pixel Padding Range Limit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const double_float_pixel_padding_range_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x125),
  "Double Float Pixel Padding Range Limit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const image_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x200),
  "Image Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const quality_control_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x300),
  "Quality Control Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const burned_in_annotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x301),
  "Burned In Annotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const recognizable_visual_features = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x302),
  "Recognizable Visual Features",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const longitudinal_temporal_information_modified = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x303),
  "Longitudinal Temporal Information Modified",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_color_palette_instance_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x304),
  "Referenced Color Palette Instance UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const transform_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x400),
  "Transform Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const transform_version_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x401),
  "Transform Version Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const number_of_transform_steps = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x402),
  "Number of Transform Steps",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const sequence_of_compressed_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x403),
  "Sequence of Compressed Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const details_of_coefficients = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x404),
  "Details of Coefficients",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const rows_for_nth_order_coefficients = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x400),
  "Rows For Nth Order Coefficients",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const columns_for_nth_order_coefficients = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x401),
  "Columns For Nth Order Coefficients",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const coefficient_coding = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x402),
  "Coefficient Coding",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const coefficient_coding_pointers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x403),
  "Coefficient Coding Pointers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const dct_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x700),
  "DCT Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const data_block_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x701),
  "Data Block Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const data_block = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x702),
  "Data Block",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const normalization_factor_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x710),
  "Normalization Factor Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const zonal_map_number_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x720),
  "Zonal Map Number Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const zonal_map_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x721),
  "Zonal Map Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const zonal_map_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x722),
  "Zonal Map Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const adaptive_map_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x730),
  "Adaptive Map Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const code_number_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x740),
  "Code Number Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const code_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x800),
  "Code Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const number_of_tables = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x802),
  "Number of Tables",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const code_table_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x803),
  "Code Table Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const bits_for_code_word = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x804),
  "Bits For Code Word",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_data_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x808),
  "Image Data Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const pixel_spacing_calibration_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0xA02),
  "Pixel Spacing Calibration Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pixel_spacing_calibration_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0xA04),
  "Pixel Spacing Calibration Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const pixel_intensity_relationship = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1040),
  "Pixel Intensity Relationship",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pixel_intensity_relationship_sign = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1041),
  "Pixel Intensity Relationship Sign",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const window_center = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1050),
  "Window Center",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const window_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1051),
  "Window Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const rescale_intercept = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1052),
  "Rescale Intercept",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const rescale_slope = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1053),
  "Rescale Slope",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const rescale_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1054),
  "Rescale Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const window_center_width_explanation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1055),
  "Window Center & Width Explanation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const voilut_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1056),
  "VOI LUT Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gray_scale = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1080),
  "Gray Scale",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const recommended_viewing_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1090),
  "Recommended Viewing Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gray_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1100),
  "Gray Lookup Table Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_3,
);

export const red_palette_color_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1101),
  "Red Palette Color Lookup Table Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_3,
);

export const green_palette_color_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1102),
  "Green Palette Color Lookup Table Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_3,
);

export const blue_palette_color_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1103),
  "Blue Palette Color Lookup Table Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_3,
);

export const alpha_palette_color_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1104),
  "Alpha Palette Color Lookup Table Descriptor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const large_red_palette_color_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1111),
  "Large Red Palette Color Lookup Table Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_4,
);

export const large_green_palette_color_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1112),
  "Large Green Palette Color Lookup Table Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_4,
);

export const large_blue_palette_color_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1113),
  "Large Blue Palette Color Lookup Table Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_4,
);

export const palette_color_lookup_table_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1199),
  "Palette Color Lookup Table UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const gray_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1200),
  "Gray Lookup Table Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1_to_n,
);

export const red_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1201),
  "Red Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const green_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1202),
  "Green Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const blue_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1203),
  "Blue Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const alpha_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1204),
  "Alpha Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const large_red_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1211),
  "Large Red Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const large_green_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1212),
  "Large Green Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const large_blue_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1213),
  "Large Blue Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const large_palette_color_lookup_table_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1214),
  "Large Palette Color Lookup Table UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const segmented_red_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1221),
  "Segmented Red Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const segmented_green_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1222),
  "Segmented Green Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const segmented_blue_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1223),
  "Segmented Blue Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const segmented_alpha_palette_color_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1224),
  "Segmented Alpha Palette Color Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const stored_value_color_range_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1230),
  "Stored Value Color Range Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const minimum_stored_value_mapped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1231),
  "Minimum Stored Value Mapped",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const maximum_stored_value_mapped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1232),
  "Maximum Stored Value Mapped",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const breast_implant_present = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1300),
  "Breast Implant Present",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const partial_view = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1350),
  "Partial View",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const partial_view_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1351),
  "Partial View Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const partial_view_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1352),
  "Partial View Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const spatial_locations_preserved = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x135A),
  "Spatial Locations Preserved",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const data_frame_assignment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1401),
  "Data Frame Assignment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const data_path_assignment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1402),
  "Data Path Assignment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const bits_mapped_to_color_lookup_table = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1403),
  "Bits Mapped to Color Lookup Table",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const blending_lut1_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1404),
  "Blending LUT 1 Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const blending_lut1_transfer_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1405),
  "Blending LUT 1 Transfer Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const blending_weight_constant = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1406),
  "Blending Weight Constant",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const blending_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1407),
  "Blending Lookup Table Descriptor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const blending_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1408),
  "Blending Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const enhanced_palette_color_lookup_table_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x140B),
  "Enhanced Palette Color Lookup Table Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const blending_lut2_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x140C),
  "Blending LUT 2 Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const blending_lut2_transfer_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x140D),
  "Blending LUT 2 Transfer Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const data_path_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x140E),
  "Data Path ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rgblut_transfer_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x140F),
  "RGB LUT Transfer Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const alpha_lut_transfer_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x1410),
  "Alpha LUT Transfer Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const icc_profile = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x2000),
  "ICC Profile",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const color_space = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x2002),
  "Color Space",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const lossy_image_compression = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x2110),
  "Lossy Image Compression",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const lossy_image_compression_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x2112),
  "Lossy Image Compression Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const lossy_image_compression_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x2114),
  "Lossy Image Compression Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const modality_lut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3000),
  "Modality LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const variable_modality_lut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3001),
  "Variable Modality LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lut_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3002),
  "LUT Descriptor",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_3,
);

export function is_lut_descriptor_tag(tag) {
  return (((isEqual(tag, lut_descriptor.tag)) || (isEqual(
    tag,
    red_palette_color_lookup_table_descriptor.tag
  ))) || (isEqual(tag, green_palette_color_lookup_table_descriptor.tag))) || (isEqual(
    tag,
    blue_palette_color_lookup_table_descriptor.tag
  ));
}

export const lut_explanation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3003),
  "LUT Explanation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const modality_lut_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3004),
  "Modality LUT Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const lut_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3006),
  "LUT Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1_to_n,
);

export const voilut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3010),
  "VOI LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const softcopy_voilut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x3110),
  "Softcopy VOI LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_presentation_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x4000),
  "Image Presentation Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const bi_plane_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x5000),
  "Bi-Plane Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const representative_frame_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6010),
  "Representative Frame Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const frame_numbers_of_interest = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6020),
  "Frame Numbers of Interest (FOI)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const frame_of_interest_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6022),
  "Frame of Interest Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const frame_of_interest_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6023),
  "Frame of Interest Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const mask_pointers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6030),
  "Mask Pointer(s)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const r_wave_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6040),
  "R Wave Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const mask_subtraction_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6100),
  "Mask Subtraction Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mask_operation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6101),
  "Mask Operation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const applicable_frame_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6102),
  "Applicable Frame Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2_to_n,
);

export const mask_frame_numbers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6110),
  "Mask Frame Numbers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const contrast_frame_averaging = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6112),
  "Contrast Frame Averaging",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const mask_sub_pixel_shift = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6114),
  "Mask Sub-pixel Shift",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const tid_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6120),
  "TID Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const mask_operation_explanation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x6190),
  "Mask Operation Explanation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const equipment_administrator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7000),
  "Equipment Administrator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_display_subsystems = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7001),
  "Number of Display Subsystems",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const current_configuration_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7002),
  "Current Configuration ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const display_subsystem_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7003),
  "Display Subsystem ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const display_subsystem_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7004),
  "Display Subsystem Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const display_subsystem_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7005),
  "Display Subsystem Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const system_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7006),
  "System Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const system_status_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7007),
  "System Status Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const target_luminance_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7008),
  "Target Luminance Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const luminance_characteristics_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7009),
  "Luminance Characteristics ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const display_subsystem_configuration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x700A),
  "Display Subsystem Configuration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const configuration_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x700B),
  "Configuration ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const configuration_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x700C),
  "Configuration Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const configuration_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x700D),
  "Configuration Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const referenced_target_luminance_characteristics_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x700E),
  "Referenced Target Luminance Characteristics ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const qa_results_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x700F),
  "QA Results Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const display_subsystem_qa_results_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7010),
  "Display Subsystem QA Results Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const configuration_qa_results_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7011),
  "Configuration QA Results Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurement_equipment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7012),
  "Measurement Equipment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurement_functions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7013),
  "Measurement Functions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const measurement_equipment_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7014),
  "Measurement Equipment Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const visual_evaluation_result_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7015),
  "Visual Evaluation Result Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const display_calibration_result_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7016),
  "Display Calibration Result Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ddl_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7017),
  "DDL Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const ci_exy_white_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7018),
  "CIExy White Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const display_function_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7019),
  "Display Function Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gamma_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x701A),
  "Gamma Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const number_of_luminance_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x701B),
  "Number of Luminance Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const luminance_response_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x701C),
  "Luminance Response Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const target_minimum_luminance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x701D),
  "Target Minimum Luminance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const target_maximum_luminance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x701E),
  "Target Maximum Luminance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const luminance_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x701F),
  "Luminance Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const luminance_response_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7020),
  "Luminance Response Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const white_point_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7021),
  "White Point Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const display_device_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7022),
  "Display Device Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const display_subsystem_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7023),
  "Display Subsystem Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const luminance_result_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7024),
  "Luminance Result Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ambient_light_value_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7025),
  "Ambient Light Value Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const measured_characteristics = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7026),
  "Measured Characteristics",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const luminance_uniformity_result_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7027),
  "Luminance Uniformity Result Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_evaluation_test_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7028),
  "Visual Evaluation Test Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const test_result = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7029),
  "Test Result",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const test_result_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x702A),
  "Test Result Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const test_image_validation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x702B),
  "Test Image Validation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const test_pattern_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x702C),
  "Test Pattern Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurement_pattern_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x702D),
  "Measurement Pattern Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_evaluation_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x702E),
  "Visual Evaluation Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pixel_data_provider_url = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x7FE0),
  "Pixel Data Provider URL",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const data_point_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9001),
  "Data Point Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const data_point_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9002),
  "Data Point Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const signal_domain_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9003),
  "Signal Domain Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const largest_monochrome_pixel_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9099),
  "Largest Monochrome Pixel Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const data_representation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9108),
  "Data Representation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pixel_measures_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9110),
  "Pixel Measures Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_voilut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9132),
  "Frame VOI LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pixel_value_transformation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9145),
  "Pixel Value Transformation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const signal_domain_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9235),
  "Signal Domain Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const display_filter_percentage = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9411),
  "Display Filter Percentage",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const frame_pixel_shift_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9415),
  "Frame Pixel Shift Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const subtraction_item_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9416),
  "Subtraction Item ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pixel_intensity_relationship_lut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9422),
  "Pixel Intensity Relationship LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_pixel_data_properties_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9443),
  "Frame Pixel Data Properties Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const geometrical_properties = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9444),
  "Geometrical Properties",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const geometric_maximum_distortion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9445),
  "Geometric Maximum Distortion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const image_processing_applied = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9446),
  "Image Processing Applied",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const mask_selection_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9454),
  "Mask Selection Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const lut_function = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9474),
  "LUT Function",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mask_visibility_percentage = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9478),
  "Mask Visibility Percentage",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const pixel_shift_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9501),
  "Pixel Shift Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const region_pixel_shift_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9502),
  "Region Pixel Shift Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const vertices_of_the_region = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9503),
  "Vertices of the Region",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_2_to_n,
);

export const multi_frame_presentation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9505),
  "Multi-frame Presentation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pixel_shift_frame_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9506),
  "Pixel Shift Frame Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2_to_n,
);

export const lut_frame_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9507),
  "LUT Frame Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2_to_n,
);

export const image_to_equipment_mapping_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9520),
  "Image to Equipment Mapping Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  /* @__PURE__ */ new ValueMultiplicity(16, /* @__PURE__ */ new Some(16)),
);

export const equipment_coordinate_system_identification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x28, 0x9537),
  "Equipment Coordinate System Identification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_0028(element) {
  if (element === 0x2) {
    return new Ok(samples_per_pixel);
  } else if (element === 0x3) {
    return new Ok(samples_per_pixel_used);
  } else if (element === 0x4) {
    return new Ok(photometric_interpretation);
  } else if (element === 0x5) {
    return new Ok(image_dimensions);
  } else if (element === 0x6) {
    return new Ok(planar_configuration);
  } else if (element === 0x8) {
    return new Ok(number_of_frames);
  } else if (element === 0x9) {
    return new Ok(frame_increment_pointer);
  } else if (element === 0xA) {
    return new Ok(frame_dimension_pointer);
  } else if (element === 0x10) {
    return new Ok(rows);
  } else if (element === 0x11) {
    return new Ok(columns);
  } else if (element === 0x12) {
    return new Ok(planes);
  } else if (element === 0x14) {
    return new Ok(ultrasound_color_data_present);
  } else if (element === 0x30) {
    return new Ok(pixel_spacing);
  } else if (element === 0x31) {
    return new Ok(zoom_factor);
  } else if (element === 0x32) {
    return new Ok(zoom_center);
  } else if (element === 0x34) {
    return new Ok(pixel_aspect_ratio);
  } else if (element === 0x40) {
    return new Ok(image_format);
  } else if (element === 0x50) {
    return new Ok(manipulated_image);
  } else if (element === 0x51) {
    return new Ok(corrected_image);
  } else if (element === 0x5F) {
    return new Ok(compression_recognition_code);
  } else if (element === 0x60) {
    return new Ok(compression_code);
  } else if (element === 0x61) {
    return new Ok(compression_originator);
  } else if (element === 0x62) {
    return new Ok(compression_label);
  } else if (element === 0x63) {
    return new Ok(compression_description);
  } else if (element === 0x65) {
    return new Ok(compression_sequence);
  } else if (element === 0x66) {
    return new Ok(compression_step_pointers);
  } else if (element === 0x68) {
    return new Ok(repeat_interval);
  } else if (element === 0x69) {
    return new Ok(bits_grouped);
  } else if (element === 0x70) {
    return new Ok(perimeter_table);
  } else if (element === 0x71) {
    return new Ok(perimeter_value);
  } else if (element === 0x80) {
    return new Ok(predictor_rows);
  } else if (element === 0x81) {
    return new Ok(predictor_columns);
  } else if (element === 0x82) {
    return new Ok(predictor_constants);
  } else if (element === 0x90) {
    return new Ok(blocked_pixels);
  } else if (element === 0x91) {
    return new Ok(block_rows);
  } else if (element === 0x92) {
    return new Ok(block_columns);
  } else if (element === 0x93) {
    return new Ok(row_overlap);
  } else if (element === 0x94) {
    return new Ok(column_overlap);
  } else if (element === 0x100) {
    return new Ok(bits_allocated);
  } else if (element === 0x101) {
    return new Ok(bits_stored);
  } else if (element === 0x102) {
    return new Ok(high_bit);
  } else if (element === 0x103) {
    return new Ok(pixel_representation);
  } else if (element === 0x104) {
    return new Ok(smallest_valid_pixel_value);
  } else if (element === 0x105) {
    return new Ok(largest_valid_pixel_value);
  } else if (element === 0x106) {
    return new Ok(smallest_image_pixel_value);
  } else if (element === 0x107) {
    return new Ok(largest_image_pixel_value);
  } else if (element === 0x108) {
    return new Ok(smallest_pixel_value_in_series);
  } else if (element === 0x109) {
    return new Ok(largest_pixel_value_in_series);
  } else if (element === 0x110) {
    return new Ok(smallest_image_pixel_value_in_plane);
  } else if (element === 0x111) {
    return new Ok(largest_image_pixel_value_in_plane);
  } else if (element === 0x120) {
    return new Ok(pixel_padding_value);
  } else if (element === 0x121) {
    return new Ok(pixel_padding_range_limit);
  } else if (element === 0x122) {
    return new Ok(float_pixel_padding_value);
  } else if (element === 0x123) {
    return new Ok(double_float_pixel_padding_value);
  } else if (element === 0x124) {
    return new Ok(float_pixel_padding_range_limit);
  } else if (element === 0x125) {
    return new Ok(double_float_pixel_padding_range_limit);
  } else if (element === 0x200) {
    return new Ok(image_location);
  } else if (element === 0x300) {
    return new Ok(quality_control_image);
  } else if (element === 0x301) {
    return new Ok(burned_in_annotation);
  } else if (element === 0x302) {
    return new Ok(recognizable_visual_features);
  } else if (element === 0x303) {
    return new Ok(longitudinal_temporal_information_modified);
  } else if (element === 0x304) {
    return new Ok(referenced_color_palette_instance_uid);
  } else if (element === 0x400) {
    return new Ok(transform_label);
  } else if (element === 0x401) {
    return new Ok(transform_version_number);
  } else if (element === 0x402) {
    return new Ok(number_of_transform_steps);
  } else if (element === 0x403) {
    return new Ok(sequence_of_compressed_data);
  } else if (element === 0x404) {
    return new Ok(details_of_coefficients);
  } else if (element === 0x700) {
    return new Ok(dct_label);
  } else if (element === 0x701) {
    return new Ok(data_block_description);
  } else if (element === 0x702) {
    return new Ok(data_block);
  } else if (element === 0x710) {
    return new Ok(normalization_factor_format);
  } else if (element === 0x720) {
    return new Ok(zonal_map_number_format);
  } else if (element === 0x721) {
    return new Ok(zonal_map_location);
  } else if (element === 0x722) {
    return new Ok(zonal_map_format);
  } else if (element === 0x730) {
    return new Ok(adaptive_map_format);
  } else if (element === 0x740) {
    return new Ok(code_number_format);
  } else if (element === 0xA02) {
    return new Ok(pixel_spacing_calibration_type);
  } else if (element === 0xA04) {
    return new Ok(pixel_spacing_calibration_description);
  } else if (element === 0x1040) {
    return new Ok(pixel_intensity_relationship);
  } else if (element === 0x1041) {
    return new Ok(pixel_intensity_relationship_sign);
  } else if (element === 0x1050) {
    return new Ok(window_center);
  } else if (element === 0x1051) {
    return new Ok(window_width);
  } else if (element === 0x1052) {
    return new Ok(rescale_intercept);
  } else if (element === 0x1053) {
    return new Ok(rescale_slope);
  } else if (element === 0x1054) {
    return new Ok(rescale_type);
  } else if (element === 0x1055) {
    return new Ok(window_center_width_explanation);
  } else if (element === 0x1056) {
    return new Ok(voilut_function);
  } else if (element === 0x1080) {
    return new Ok(gray_scale);
  } else if (element === 0x1090) {
    return new Ok(recommended_viewing_mode);
  } else if (element === 0x1100) {
    return new Ok(gray_lookup_table_descriptor);
  } else if (element === 0x1101) {
    return new Ok(red_palette_color_lookup_table_descriptor);
  } else if (element === 0x1102) {
    return new Ok(green_palette_color_lookup_table_descriptor);
  } else if (element === 0x1103) {
    return new Ok(blue_palette_color_lookup_table_descriptor);
  } else if (element === 0x1104) {
    return new Ok(alpha_palette_color_lookup_table_descriptor);
  } else if (element === 0x1111) {
    return new Ok(large_red_palette_color_lookup_table_descriptor);
  } else if (element === 0x1112) {
    return new Ok(large_green_palette_color_lookup_table_descriptor);
  } else if (element === 0x1113) {
    return new Ok(large_blue_palette_color_lookup_table_descriptor);
  } else if (element === 0x1199) {
    return new Ok(palette_color_lookup_table_uid);
  } else if (element === 0x1200) {
    return new Ok(gray_lookup_table_data);
  } else if (element === 0x1201) {
    return new Ok(red_palette_color_lookup_table_data);
  } else if (element === 0x1202) {
    return new Ok(green_palette_color_lookup_table_data);
  } else if (element === 0x1203) {
    return new Ok(blue_palette_color_lookup_table_data);
  } else if (element === 0x1204) {
    return new Ok(alpha_palette_color_lookup_table_data);
  } else if (element === 0x1211) {
    return new Ok(large_red_palette_color_lookup_table_data);
  } else if (element === 0x1212) {
    return new Ok(large_green_palette_color_lookup_table_data);
  } else if (element === 0x1213) {
    return new Ok(large_blue_palette_color_lookup_table_data);
  } else if (element === 0x1214) {
    return new Ok(large_palette_color_lookup_table_uid);
  } else if (element === 0x1221) {
    return new Ok(segmented_red_palette_color_lookup_table_data);
  } else if (element === 0x1222) {
    return new Ok(segmented_green_palette_color_lookup_table_data);
  } else if (element === 0x1223) {
    return new Ok(segmented_blue_palette_color_lookup_table_data);
  } else if (element === 0x1224) {
    return new Ok(segmented_alpha_palette_color_lookup_table_data);
  } else if (element === 0x1230) {
    return new Ok(stored_value_color_range_sequence);
  } else if (element === 0x1231) {
    return new Ok(minimum_stored_value_mapped);
  } else if (element === 0x1232) {
    return new Ok(maximum_stored_value_mapped);
  } else if (element === 0x1300) {
    return new Ok(breast_implant_present);
  } else if (element === 0x1350) {
    return new Ok(partial_view);
  } else if (element === 0x1351) {
    return new Ok(partial_view_description);
  } else if (element === 0x1352) {
    return new Ok(partial_view_code_sequence);
  } else if (element === 0x135A) {
    return new Ok(spatial_locations_preserved);
  } else if (element === 0x1401) {
    return new Ok(data_frame_assignment_sequence);
  } else if (element === 0x1402) {
    return new Ok(data_path_assignment);
  } else if (element === 0x1403) {
    return new Ok(bits_mapped_to_color_lookup_table);
  } else if (element === 0x1404) {
    return new Ok(blending_lut1_sequence);
  } else if (element === 0x1405) {
    return new Ok(blending_lut1_transfer_function);
  } else if (element === 0x1406) {
    return new Ok(blending_weight_constant);
  } else if (element === 0x1407) {
    return new Ok(blending_lookup_table_descriptor);
  } else if (element === 0x1408) {
    return new Ok(blending_lookup_table_data);
  } else if (element === 0x140B) {
    return new Ok(enhanced_palette_color_lookup_table_sequence);
  } else if (element === 0x140C) {
    return new Ok(blending_lut2_sequence);
  } else if (element === 0x140D) {
    return new Ok(blending_lut2_transfer_function);
  } else if (element === 0x140E) {
    return new Ok(data_path_id);
  } else if (element === 0x140F) {
    return new Ok(rgblut_transfer_function);
  } else if (element === 0x1410) {
    return new Ok(alpha_lut_transfer_function);
  } else if (element === 0x2000) {
    return new Ok(icc_profile);
  } else if (element === 0x2002) {
    return new Ok(color_space);
  } else if (element === 0x2110) {
    return new Ok(lossy_image_compression);
  } else if (element === 0x2112) {
    return new Ok(lossy_image_compression_ratio);
  } else if (element === 0x2114) {
    return new Ok(lossy_image_compression_method);
  } else if (element === 0x3000) {
    return new Ok(modality_lut_sequence);
  } else if (element === 0x3001) {
    return new Ok(variable_modality_lut_sequence);
  } else if (element === 0x3002) {
    return new Ok(lut_descriptor);
  } else if (element === 0x3003) {
    return new Ok(lut_explanation);
  } else if (element === 0x3004) {
    return new Ok(modality_lut_type);
  } else if (element === 0x3006) {
    return new Ok(lut_data);
  } else if (element === 0x3010) {
    return new Ok(voilut_sequence);
  } else if (element === 0x3110) {
    return new Ok(softcopy_voilut_sequence);
  } else if (element === 0x4000) {
    return new Ok(image_presentation_comments);
  } else if (element === 0x5000) {
    return new Ok(bi_plane_acquisition_sequence);
  } else if (element === 0x6010) {
    return new Ok(representative_frame_number);
  } else if (element === 0x6020) {
    return new Ok(frame_numbers_of_interest);
  } else if (element === 0x6022) {
    return new Ok(frame_of_interest_description);
  } else if (element === 0x6023) {
    return new Ok(frame_of_interest_type);
  } else if (element === 0x6030) {
    return new Ok(mask_pointers);
  } else if (element === 0x6040) {
    return new Ok(r_wave_pointer);
  } else if (element === 0x6100) {
    return new Ok(mask_subtraction_sequence);
  } else if (element === 0x6101) {
    return new Ok(mask_operation);
  } else if (element === 0x6102) {
    return new Ok(applicable_frame_range);
  } else if (element === 0x6110) {
    return new Ok(mask_frame_numbers);
  } else if (element === 0x6112) {
    return new Ok(contrast_frame_averaging);
  } else if (element === 0x6114) {
    return new Ok(mask_sub_pixel_shift);
  } else if (element === 0x6120) {
    return new Ok(tid_offset);
  } else if (element === 0x6190) {
    return new Ok(mask_operation_explanation);
  } else if (element === 0x7000) {
    return new Ok(equipment_administrator_sequence);
  } else if (element === 0x7001) {
    return new Ok(number_of_display_subsystems);
  } else if (element === 0x7002) {
    return new Ok(current_configuration_id);
  } else if (element === 0x7003) {
    return new Ok(display_subsystem_id);
  } else if (element === 0x7004) {
    return new Ok(display_subsystem_name);
  } else if (element === 0x7005) {
    return new Ok(display_subsystem_description);
  } else if (element === 0x7006) {
    return new Ok(system_status);
  } else if (element === 0x7007) {
    return new Ok(system_status_comment);
  } else if (element === 0x7008) {
    return new Ok(target_luminance_characteristics_sequence);
  } else if (element === 0x7009) {
    return new Ok(luminance_characteristics_id);
  } else if (element === 0x700A) {
    return new Ok(display_subsystem_configuration_sequence);
  } else if (element === 0x700B) {
    return new Ok(configuration_id);
  } else if (element === 0x700C) {
    return new Ok(configuration_name);
  } else if (element === 0x700D) {
    return new Ok(configuration_description);
  } else if (element === 0x700E) {
    return new Ok(referenced_target_luminance_characteristics_id);
  } else if (element === 0x700F) {
    return new Ok(qa_results_sequence);
  } else if (element === 0x7010) {
    return new Ok(display_subsystem_qa_results_sequence);
  } else if (element === 0x7011) {
    return new Ok(configuration_qa_results_sequence);
  } else if (element === 0x7012) {
    return new Ok(measurement_equipment_sequence);
  } else if (element === 0x7013) {
    return new Ok(measurement_functions);
  } else if (element === 0x7014) {
    return new Ok(measurement_equipment_type);
  } else if (element === 0x7015) {
    return new Ok(visual_evaluation_result_sequence);
  } else if (element === 0x7016) {
    return new Ok(display_calibration_result_sequence);
  } else if (element === 0x7017) {
    return new Ok(ddl_value);
  } else if (element === 0x7018) {
    return new Ok(ci_exy_white_point);
  } else if (element === 0x7019) {
    return new Ok(display_function_type);
  } else if (element === 0x701A) {
    return new Ok(gamma_value);
  } else if (element === 0x701B) {
    return new Ok(number_of_luminance_points);
  } else if (element === 0x701C) {
    return new Ok(luminance_response_sequence);
  } else if (element === 0x701D) {
    return new Ok(target_minimum_luminance);
  } else if (element === 0x701E) {
    return new Ok(target_maximum_luminance);
  } else if (element === 0x701F) {
    return new Ok(luminance_value);
  } else if (element === 0x7020) {
    return new Ok(luminance_response_description);
  } else if (element === 0x7021) {
    return new Ok(white_point_flag);
  } else if (element === 0x7022) {
    return new Ok(display_device_type_code_sequence);
  } else if (element === 0x7023) {
    return new Ok(display_subsystem_sequence);
  } else if (element === 0x7024) {
    return new Ok(luminance_result_sequence);
  } else if (element === 0x7025) {
    return new Ok(ambient_light_value_source);
  } else if (element === 0x7026) {
    return new Ok(measured_characteristics);
  } else if (element === 0x7027) {
    return new Ok(luminance_uniformity_result_sequence);
  } else if (element === 0x7028) {
    return new Ok(visual_evaluation_test_sequence);
  } else if (element === 0x7029) {
    return new Ok(test_result);
  } else if (element === 0x702A) {
    return new Ok(test_result_comment);
  } else if (element === 0x702B) {
    return new Ok(test_image_validation);
  } else if (element === 0x702C) {
    return new Ok(test_pattern_code_sequence);
  } else if (element === 0x702D) {
    return new Ok(measurement_pattern_code_sequence);
  } else if (element === 0x702E) {
    return new Ok(visual_evaluation_method_code_sequence);
  } else if (element === 0x7FE0) {
    return new Ok(pixel_data_provider_url);
  } else if (element === 0x9001) {
    return new Ok(data_point_rows);
  } else if (element === 0x9002) {
    return new Ok(data_point_columns);
  } else if (element === 0x9003) {
    return new Ok(signal_domain_columns);
  } else if (element === 0x9099) {
    return new Ok(largest_monochrome_pixel_value);
  } else if (element === 0x9108) {
    return new Ok(data_representation);
  } else if (element === 0x9110) {
    return new Ok(pixel_measures_sequence);
  } else if (element === 0x9132) {
    return new Ok(frame_voilut_sequence);
  } else if (element === 0x9145) {
    return new Ok(pixel_value_transformation_sequence);
  } else if (element === 0x9235) {
    return new Ok(signal_domain_rows);
  } else if (element === 0x9411) {
    return new Ok(display_filter_percentage);
  } else if (element === 0x9415) {
    return new Ok(frame_pixel_shift_sequence);
  } else if (element === 0x9416) {
    return new Ok(subtraction_item_id);
  } else if (element === 0x9422) {
    return new Ok(pixel_intensity_relationship_lut_sequence);
  } else if (element === 0x9443) {
    return new Ok(frame_pixel_data_properties_sequence);
  } else if (element === 0x9444) {
    return new Ok(geometrical_properties);
  } else if (element === 0x9445) {
    return new Ok(geometric_maximum_distortion);
  } else if (element === 0x9446) {
    return new Ok(image_processing_applied);
  } else if (element === 0x9454) {
    return new Ok(mask_selection_mode);
  } else if (element === 0x9474) {
    return new Ok(lut_function);
  } else if (element === 0x9478) {
    return new Ok(mask_visibility_percentage);
  } else if (element === 0x9501) {
    return new Ok(pixel_shift_sequence);
  } else if (element === 0x9502) {
    return new Ok(region_pixel_shift_sequence);
  } else if (element === 0x9503) {
    return new Ok(vertices_of_the_region);
  } else if (element === 0x9505) {
    return new Ok(multi_frame_presentation_sequence);
  } else if (element === 0x9506) {
    return new Ok(pixel_shift_frame_range);
  } else if (element === 0x9507) {
    return new Ok(lut_frame_range);
  } else if (element === 0x9520) {
    return new Ok(image_to_equipment_mapping_matrix);
  } else if (element === 0x9537) {
    return new Ok(equipment_coordinate_system_identification);
  } else {
    return new Error(undefined);
  }
}

export const study_status_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0xA),
  "Study Status ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const study_priority_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0xC),
  "Study Priority ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const study_id_issuer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x12),
  "Study ID Issuer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const study_verified_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x32),
  "Study Verified Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const study_verified_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x33),
  "Study Verified Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const study_read_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x34),
  "Study Read Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const study_read_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x35),
  "Study Read Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const scheduled_study_start_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1000),
  "Scheduled Study Start Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const scheduled_study_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1001),
  "Scheduled Study Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const scheduled_study_stop_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1010),
  "Scheduled Study Stop Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const scheduled_study_stop_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1011),
  "Scheduled Study Stop Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const scheduled_study_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1020),
  "Scheduled Study Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const scheduled_study_location_ae_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1021),
  "Scheduled Study Location AE Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1_to_n,
);

export const reason_for_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1030),
  "Reason for Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const requesting_physician_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1031),
  "Requesting Physician Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requesting_physician = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1032),
  "Requesting Physician",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const requesting_service = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1033),
  "Requesting Service",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const requesting_service_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1034),
  "Requesting Service Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const study_arrival_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1040),
  "Study Arrival Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const study_arrival_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1041),
  "Study Arrival Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const study_completion_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1050),
  "Study Completion Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const study_completion_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1051),
  "Study Completion Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const study_component_status_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1055),
  "Study Component Status ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const requested_procedure_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1060),
  "Requested Procedure Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const requested_procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1064),
  "Requested Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requested_laterality_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1065),
  "Requested Laterality Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reason_for_visit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1066),
  "Reason for Visit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const reason_for_visit_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1067),
  "Reason for Visit Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requested_contrast_agent = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x1070),
  "Requested Contrast Agent",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const study_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x32, 0x4000),
  "Study Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

function find_element_in_group_0032(element) {
  if (element === 0xA) {
    return new Ok(study_status_id);
  } else if (element === 0xC) {
    return new Ok(study_priority_id);
  } else if (element === 0x12) {
    return new Ok(study_id_issuer);
  } else if (element === 0x32) {
    return new Ok(study_verified_date);
  } else if (element === 0x33) {
    return new Ok(study_verified_time);
  } else if (element === 0x34) {
    return new Ok(study_read_date);
  } else if (element === 0x35) {
    return new Ok(study_read_time);
  } else if (element === 0x1000) {
    return new Ok(scheduled_study_start_date);
  } else if (element === 0x1001) {
    return new Ok(scheduled_study_start_time);
  } else if (element === 0x1010) {
    return new Ok(scheduled_study_stop_date);
  } else if (element === 0x1011) {
    return new Ok(scheduled_study_stop_time);
  } else if (element === 0x1020) {
    return new Ok(scheduled_study_location);
  } else if (element === 0x1021) {
    return new Ok(scheduled_study_location_ae_title);
  } else if (element === 0x1030) {
    return new Ok(reason_for_study);
  } else if (element === 0x1031) {
    return new Ok(requesting_physician_identification_sequence);
  } else if (element === 0x1032) {
    return new Ok(requesting_physician);
  } else if (element === 0x1033) {
    return new Ok(requesting_service);
  } else if (element === 0x1034) {
    return new Ok(requesting_service_code_sequence);
  } else if (element === 0x1040) {
    return new Ok(study_arrival_date);
  } else if (element === 0x1041) {
    return new Ok(study_arrival_time);
  } else if (element === 0x1050) {
    return new Ok(study_completion_date);
  } else if (element === 0x1051) {
    return new Ok(study_completion_time);
  } else if (element === 0x1055) {
    return new Ok(study_component_status_id);
  } else if (element === 0x1060) {
    return new Ok(requested_procedure_description);
  } else if (element === 0x1064) {
    return new Ok(requested_procedure_code_sequence);
  } else if (element === 0x1065) {
    return new Ok(requested_laterality_code_sequence);
  } else if (element === 0x1066) {
    return new Ok(reason_for_visit);
  } else if (element === 0x1067) {
    return new Ok(reason_for_visit_code_sequence);
  } else if (element === 0x1070) {
    return new Ok(requested_contrast_agent);
  } else if (element === 0x4000) {
    return new Ok(study_comments);
  } else {
    return new Error(undefined);
  }
}

export const flow_identifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x1),
  "Flow Identifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const flow_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x2),
  "Flow Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const flow_transfer_syntax_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x3),
  "Flow Transfer Syntax UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const flow_rtp_sampling_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x4),
  "Flow RTP Sampling Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const source_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x5),
  "Source Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const frame_origin_timestamp = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x7),
  "Frame Origin Timestamp",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const includes_imaging_subject = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x8),
  "Includes Imaging Subject",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const frame_usefulness_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0x9),
  "Frame Usefulness Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const real_time_bulk_data_flow_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0xA),
  "Real-Time Bulk Data Flow Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const camera_position_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0xB),
  "Camera Position Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const includes_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0xC),
  "Includes Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const time_of_frame_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x34, 0xD),
  "Time of Frame Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0034(element) {
  if (element === 0x1) {
    return new Ok(flow_identifier_sequence);
  } else if (element === 0x2) {
    return new Ok(flow_identifier);
  } else if (element === 0x3) {
    return new Ok(flow_transfer_syntax_uid);
  } else if (element === 0x4) {
    return new Ok(flow_rtp_sampling_rate);
  } else if (element === 0x5) {
    return new Ok(source_identifier);
  } else if (element === 0x7) {
    return new Ok(frame_origin_timestamp);
  } else if (element === 0x8) {
    return new Ok(includes_imaging_subject);
  } else if (element === 0x9) {
    return new Ok(frame_usefulness_group_sequence);
  } else if (element === 0xA) {
    return new Ok(real_time_bulk_data_flow_sequence);
  } else if (element === 0xB) {
    return new Ok(camera_position_group_sequence);
  } else if (element === 0xC) {
    return new Ok(includes_information);
  } else if (element === 0xD) {
    return new Ok(time_of_frame_group_sequence);
  } else {
    return new Error(undefined);
  }
}

export const referenced_patient_alias_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x4),
  "Referenced Patient Alias Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visit_status_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x8),
  "Visit Status ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const admission_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x10),
  "Admission ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_admission_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x11),
  "Issuer of Admission ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_admission_id_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x14),
  "Issuer of Admission ID Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const route_of_admissions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x16),
  "Route of Admissions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const scheduled_admission_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x1A),
  "Scheduled Admission Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const scheduled_admission_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x1B),
  "Scheduled Admission Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const scheduled_discharge_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x1C),
  "Scheduled Discharge Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const scheduled_discharge_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x1D),
  "Scheduled Discharge Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const scheduled_patient_institution_residence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x1E),
  "Scheduled Patient Institution Residence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const admitting_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x20),
  "Admitting Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const admitting_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x21),
  "Admitting Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const discharge_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x30),
  "Discharge Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const discharge_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x32),
  "Discharge Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const discharge_diagnosis_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x40),
  "Discharge Diagnosis Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const discharge_diagnosis_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x44),
  "Discharge Diagnosis Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const special_needs = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x50),
  "Special Needs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const service_episode_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x60),
  "Service Episode ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_service_episode_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x61),
  "Issuer of Service Episode ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const service_episode_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x62),
  "Service Episode Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_service_episode_id_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x64),
  "Issuer of Service Episode ID Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pertinent_documents_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x100),
  "Pertinent Documents Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pertinent_resources_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x101),
  "Pertinent Resources Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const resource_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x102),
  "Resource Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const current_patient_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x300),
  "Current Patient Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_institution_residence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x400),
  "Patient's Institution Residence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_state = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x500),
  "Patient State",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_clinical_trial_participation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x502),
  "Patient Clinical Trial Participation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visit_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x38, 0x4000),
  "Visit Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

function find_element_in_group_0038(element) {
  if (element === 0x4) {
    return new Ok(referenced_patient_alias_sequence);
  } else if (element === 0x8) {
    return new Ok(visit_status_id);
  } else if (element === 0x10) {
    return new Ok(admission_id);
  } else if (element === 0x11) {
    return new Ok(issuer_of_admission_id);
  } else if (element === 0x14) {
    return new Ok(issuer_of_admission_id_sequence);
  } else if (element === 0x16) {
    return new Ok(route_of_admissions);
  } else if (element === 0x1A) {
    return new Ok(scheduled_admission_date);
  } else if (element === 0x1B) {
    return new Ok(scheduled_admission_time);
  } else if (element === 0x1C) {
    return new Ok(scheduled_discharge_date);
  } else if (element === 0x1D) {
    return new Ok(scheduled_discharge_time);
  } else if (element === 0x1E) {
    return new Ok(scheduled_patient_institution_residence);
  } else if (element === 0x20) {
    return new Ok(admitting_date);
  } else if (element === 0x21) {
    return new Ok(admitting_time);
  } else if (element === 0x30) {
    return new Ok(discharge_date);
  } else if (element === 0x32) {
    return new Ok(discharge_time);
  } else if (element === 0x40) {
    return new Ok(discharge_diagnosis_description);
  } else if (element === 0x44) {
    return new Ok(discharge_diagnosis_code_sequence);
  } else if (element === 0x50) {
    return new Ok(special_needs);
  } else if (element === 0x60) {
    return new Ok(service_episode_id);
  } else if (element === 0x61) {
    return new Ok(issuer_of_service_episode_id);
  } else if (element === 0x62) {
    return new Ok(service_episode_description);
  } else if (element === 0x64) {
    return new Ok(issuer_of_service_episode_id_sequence);
  } else if (element === 0x100) {
    return new Ok(pertinent_documents_sequence);
  } else if (element === 0x101) {
    return new Ok(pertinent_resources_sequence);
  } else if (element === 0x102) {
    return new Ok(resource_description);
  } else if (element === 0x300) {
    return new Ok(current_patient_location);
  } else if (element === 0x400) {
    return new Ok(patient_institution_residence);
  } else if (element === 0x500) {
    return new Ok(patient_state);
  } else if (element === 0x502) {
    return new Ok(patient_clinical_trial_participation_sequence);
  } else if (element === 0x4000) {
    return new Ok(visit_comments);
  } else {
    return new Error(undefined);
  }
}

export const waveform_originality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x4),
  "Waveform Originality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_waveform_channels = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x5),
  "Number of Waveform Channels",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_waveform_samples = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x10),
  "Number of Waveform Samples",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const sampling_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x1A),
  "Sampling Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const multiplex_group_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x20),
  "Multiplex Group Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const channel_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x200),
  "Channel Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const waveform_channel_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x202),
  "Waveform Channel Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const channel_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x203),
  "Channel Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const channel_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x205),
  "Channel Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const channel_source_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x208),
  "Channel Source Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_source_modifiers_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x209),
  "Channel Source Modifiers Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_waveform_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x20A),
  "Source Waveform Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_derivation_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x20C),
  "Channel Derivation Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const channel_sensitivity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x210),
  "Channel Sensitivity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_sensitivity_units_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x211),
  "Channel Sensitivity Units Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_sensitivity_correction_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x212),
  "Channel Sensitivity Correction Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_baseline = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x213),
  "Channel Baseline",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_time_skew = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x214),
  "Channel Time Skew",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_sample_skew = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x215),
  "Channel Sample Skew",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x218),
  "Channel Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const waveform_bits_stored = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x21A),
  "Waveform Bits Stored",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const filter_low_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x220),
  "Filter Low Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const filter_high_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x221),
  "Filter High Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const notch_filter_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x222),
  "Notch Filter Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const notch_filter_bandwidth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x223),
  "Notch Filter Bandwidth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const waveform_data_display_scale = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x230),
  "Waveform Data Display Scale",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const waveform_display_background_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x231),
  "Waveform Display Background CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const waveform_presentation_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x240),
  "Waveform Presentation Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const presentation_group_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x241),
  "Presentation Group Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const channel_display_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x242),
  "Channel Display Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_recommended_display_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x244),
  "Channel Recommended Display CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const channel_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x245),
  "Channel Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const display_shading_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x246),
  "Display Shading Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fractional_channel_display_scale = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x247),
  "Fractional Channel Display Scale",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const absolute_channel_display_scale = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x248),
  "Absolute Channel Display Scale",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const multiplexed_audio_channels_description_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x300),
  "Multiplexed Audio Channels Description Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_identification_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x301),
  "Channel Identification Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const channel_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x302),
  "Channel Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const multiplex_group_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x310),
  "Multiplex Group UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const powerline_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x311),
  "Powerline Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_impedance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x312),
  "Channel Impedance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const impedance_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x313),
  "Impedance Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const impedance_measurement_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x314),
  "Impedance Measurement DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const impedance_measurement_frequency = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x315),
  "Impedance Measurement Frequency",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const impedance_measurement_current_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x316),
  "Impedance Measurement Current Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const waveform_amplifier_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x317),
  "Waveform Amplifier Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const filter_low_frequency_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x318),
  "Filter Low Frequency Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const filter_high_frequency_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x319),
  "Filter High Frequency Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const summarized_filter_lookup_table = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x320),
  "Summarized Filter Lookup Table Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const notch_filter_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x321),
  "Notch Filter Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const waveform_filter_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x322),
  "Waveform Filter Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const analog_filter_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x323),
  "Analog Filter Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const analog_filter_roll_off = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x324),
  "Analog Filter Roll Off",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const analog_filter_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x325),
  "Analog Filter Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const digital_filter_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x326),
  "Digital Filter Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const digital_filter_order = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x327),
  "Digital Filter Order",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const digital_filter_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x328),
  "Digital Filter Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const waveform_filter_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x329),
  "Waveform Filter Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const filter_lookup_table_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x32A),
  "Filter Lookup Table Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const filter_lookup_table_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x32B),
  "Filter Lookup Table Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const frequency_encoding_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x32C),
  "Frequency Encoding Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const magnitude_encoding_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x32D),
  "Magnitude Encoding Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const filter_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3A, 0x32E),
  "Filter Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherDoubleString()]),
  vm_1,
);

function find_element_in_group_003a(element) {
  if (element === 0x4) {
    return new Ok(waveform_originality);
  } else if (element === 0x5) {
    return new Ok(number_of_waveform_channels);
  } else if (element === 0x10) {
    return new Ok(number_of_waveform_samples);
  } else if (element === 0x1A) {
    return new Ok(sampling_frequency);
  } else if (element === 0x20) {
    return new Ok(multiplex_group_label);
  } else if (element === 0x200) {
    return new Ok(channel_definition_sequence);
  } else if (element === 0x202) {
    return new Ok(waveform_channel_number);
  } else if (element === 0x203) {
    return new Ok(channel_label);
  } else if (element === 0x205) {
    return new Ok(channel_status);
  } else if (element === 0x208) {
    return new Ok(channel_source_sequence);
  } else if (element === 0x209) {
    return new Ok(channel_source_modifiers_sequence);
  } else if (element === 0x20A) {
    return new Ok(source_waveform_sequence);
  } else if (element === 0x20C) {
    return new Ok(channel_derivation_description);
  } else if (element === 0x210) {
    return new Ok(channel_sensitivity);
  } else if (element === 0x211) {
    return new Ok(channel_sensitivity_units_sequence);
  } else if (element === 0x212) {
    return new Ok(channel_sensitivity_correction_factor);
  } else if (element === 0x213) {
    return new Ok(channel_baseline);
  } else if (element === 0x214) {
    return new Ok(channel_time_skew);
  } else if (element === 0x215) {
    return new Ok(channel_sample_skew);
  } else if (element === 0x218) {
    return new Ok(channel_offset);
  } else if (element === 0x21A) {
    return new Ok(waveform_bits_stored);
  } else if (element === 0x220) {
    return new Ok(filter_low_frequency);
  } else if (element === 0x221) {
    return new Ok(filter_high_frequency);
  } else if (element === 0x222) {
    return new Ok(notch_filter_frequency);
  } else if (element === 0x223) {
    return new Ok(notch_filter_bandwidth);
  } else if (element === 0x230) {
    return new Ok(waveform_data_display_scale);
  } else if (element === 0x231) {
    return new Ok(waveform_display_background_cie_lab_value);
  } else if (element === 0x240) {
    return new Ok(waveform_presentation_group_sequence);
  } else if (element === 0x241) {
    return new Ok(presentation_group_number);
  } else if (element === 0x242) {
    return new Ok(channel_display_sequence);
  } else if (element === 0x244) {
    return new Ok(channel_recommended_display_cie_lab_value);
  } else if (element === 0x245) {
    return new Ok(channel_position);
  } else if (element === 0x246) {
    return new Ok(display_shading_flag);
  } else if (element === 0x247) {
    return new Ok(fractional_channel_display_scale);
  } else if (element === 0x248) {
    return new Ok(absolute_channel_display_scale);
  } else if (element === 0x300) {
    return new Ok(multiplexed_audio_channels_description_code_sequence);
  } else if (element === 0x301) {
    return new Ok(channel_identification_code);
  } else if (element === 0x302) {
    return new Ok(channel_mode);
  } else if (element === 0x310) {
    return new Ok(multiplex_group_uid);
  } else if (element === 0x311) {
    return new Ok(powerline_frequency);
  } else if (element === 0x312) {
    return new Ok(channel_impedance_sequence);
  } else if (element === 0x313) {
    return new Ok(impedance_value);
  } else if (element === 0x314) {
    return new Ok(impedance_measurement_date_time);
  } else if (element === 0x315) {
    return new Ok(impedance_measurement_frequency);
  } else if (element === 0x316) {
    return new Ok(impedance_measurement_current_type);
  } else if (element === 0x317) {
    return new Ok(waveform_amplifier_type);
  } else if (element === 0x318) {
    return new Ok(filter_low_frequency_characteristics_sequence);
  } else if (element === 0x319) {
    return new Ok(filter_high_frequency_characteristics_sequence);
  } else if (element === 0x320) {
    return new Ok(summarized_filter_lookup_table);
  } else if (element === 0x321) {
    return new Ok(notch_filter_characteristics_sequence);
  } else if (element === 0x322) {
    return new Ok(waveform_filter_type);
  } else if (element === 0x323) {
    return new Ok(analog_filter_characteristics_sequence);
  } else if (element === 0x324) {
    return new Ok(analog_filter_roll_off);
  } else if (element === 0x325) {
    return new Ok(analog_filter_type);
  } else if (element === 0x326) {
    return new Ok(digital_filter_characteristics_sequence);
  } else if (element === 0x327) {
    return new Ok(digital_filter_order);
  } else if (element === 0x328) {
    return new Ok(digital_filter_type_code_sequence);
  } else if (element === 0x329) {
    return new Ok(waveform_filter_description);
  } else if (element === 0x32A) {
    return new Ok(filter_lookup_table_sequence);
  } else if (element === 0x32B) {
    return new Ok(filter_lookup_table_description);
  } else if (element === 0x32C) {
    return new Ok(frequency_encoding_code_sequence);
  } else if (element === 0x32D) {
    return new Ok(magnitude_encoding_code_sequence);
  } else if (element === 0x32E) {
    return new Ok(filter_lookup_table_data);
  } else {
    return new Error(undefined);
  }
}

export const scheduled_station_ae_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1),
  "Scheduled Station AE Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1_to_n,
);

export const scheduled_procedure_step_start_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2),
  "Scheduled Procedure Step Start Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const scheduled_procedure_step_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x3),
  "Scheduled Procedure Step Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const scheduled_procedure_step_end_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4),
  "Scheduled Procedure Step End Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const scheduled_procedure_step_end_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x5),
  "Scheduled Procedure Step End Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const scheduled_performing_physician_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x6),
  "Scheduled Performing Physician's Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const scheduled_procedure_step_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x7),
  "Scheduled Procedure Step Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const scheduled_protocol_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x8),
  "Scheduled Protocol Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_procedure_step_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9),
  "Scheduled Procedure Step ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const stage_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA),
  "Stage Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_performing_physician_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xB),
  "Scheduled Performing Physician Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_station_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x10),
  "Scheduled Station Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const scheduled_procedure_step_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x11),
  "Scheduled Procedure Step Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const pre_medication = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x12),
  "Pre-Medication",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const scheduled_procedure_step_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x20),
  "Scheduled Procedure Step Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const order_placer_identifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x26),
  "Order Placer Identifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const order_filler_identifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x27),
  "Order Filler Identifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const local_namespace_entity_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x31),
  "Local Namespace Entity ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const universal_entity_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x32),
  "Universal Entity ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const universal_entity_id_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x33),
  "Universal Entity ID Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const identifier_type_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x35),
  "Identifier Type Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const assigning_facility_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x36),
  "Assigning Facility Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assigning_jurisdiction_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x39),
  "Assigning Jurisdiction Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assigning_agency_or_department_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x3A),
  "Assigning Agency or Department Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x100),
  "Scheduled Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_non_image_composite_sop_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x220),
  "Referenced Non-Image Composite SOP Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_station_ae_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x241),
  "Performed Station AE Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const performed_station_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x242),
  "Performed Station Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const performed_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x243),
  "Performed Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const performed_procedure_step_start_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x244),
  "Performed Procedure Step Start Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const performed_procedure_step_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x245),
  "Performed Procedure Step Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const performed_procedure_step_end_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x250),
  "Performed Procedure Step End Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const performed_procedure_step_end_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x251),
  "Performed Procedure Step End Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const performed_procedure_step_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x252),
  "Performed Procedure Step Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const performed_procedure_step_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x253),
  "Performed Procedure Step ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const performed_procedure_step_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x254),
  "Performed Procedure Step Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const performed_procedure_type_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x255),
  "Performed Procedure Type Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const performed_protocol_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x260),
  "Performed Protocol Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_protocol_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x261),
  "Performed Protocol Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scheduled_step_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x270),
  "Scheduled Step Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const request_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x275),
  "Request Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const comments_on_the_performed_procedure_step = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x280),
  "Comments on the Performed Procedure Step",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const performed_procedure_step_discontinuation_reason_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x281),
  "Performed Procedure Step Discontinuation Reason Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const quantity_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x293),
  "Quantity Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const quantity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x294),
  "Quantity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const measuring_units_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x295),
  "Measuring Units Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const billing_item_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x296),
  "Billing Item Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const total_time_of_fluoroscopy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x300),
  "Total Time of Fluoroscopy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const total_number_of_exposures = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x301),
  "Total Number of Exposures",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const entrance_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x302),
  "Entrance Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const exposed_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x303),
  "Exposed Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_2,
);

export const distance_source_to_entrance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x306),
  "Distance Source to Entrance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const distance_source_to_support = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x307),
  "Distance Source to Support",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const exposure_dose_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x30E),
  "Exposure Dose Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const comments_on_radiation_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x310),
  "Comments on Radiation Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const x_ray_output = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x312),
  "X-Ray Output",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const half_value_layer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x314),
  "Half Value Layer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const organ_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x316),
  "Organ Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const organ_exposed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x318),
  "Organ Exposed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const billing_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x320),
  "Billing Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const film_consumption_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x321),
  "Film Consumption Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const billing_supplies_and_devices_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x324),
  "Billing Supplies and Devices Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x330),
  "Referenced Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_series_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x340),
  "Performed Series Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const comments_on_the_scheduled_procedure_step = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x400),
  "Comments on the Scheduled Procedure Step",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const protocol_context_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x440),
  "Protocol Context Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const content_item_modifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x441),
  "Content Item Modifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_specimen_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x500),
  "Scheduled Specimen Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_accession_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x50A),
  "Specimen Accession Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const container_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x512),
  "Container Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issuer_of_the_container_identifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x513),
  "Issuer of the Container Identifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const alternate_container_identifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x515),
  "Alternate Container Identifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const container_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x518),
  "Container Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const container_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x51A),
  "Container Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const container_component_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x520),
  "Container Component Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x550),
  "Specimen Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x551),
  "Specimen Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const specimen_description_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x552),
  "Specimen Description Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_description_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x553),
  "Specimen Description (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const specimen_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x554),
  "Specimen UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const acquisition_context_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x555),
  "Acquisition Context Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_context_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x556),
  "Acquisition Context Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const specimen_description_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x560),
  "Specimen Description Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const issuer_of_the_specimen_identifier_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x562),
  "Issuer of the Specimen Identifier Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x59A),
  "Specimen Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_short_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x600),
  "Specimen Short Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const specimen_detailed_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x602),
  "Specimen Detailed Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const specimen_preparation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x610),
  "Specimen Preparation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_preparation_step_content_item_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x612),
  "Specimen Preparation Step Content Item Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_localization_content_item_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x620),
  "Specimen Localization Content Item Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const slide_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x6FA),
  "Slide Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const whole_slide_microscopy_image_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x710),
  "Whole Slide Microscopy Image Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_center_point_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x71A),
  "Image Center Point Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const x_offset_in_slide_coordinate_system = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x72A),
  "X Offset in Slide Coordinate System",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const y_offset_in_slide_coordinate_system = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x73A),
  "Y Offset in Slide Coordinate System",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const z_offset_in_slide_coordinate_system = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x74A),
  "Z Offset in Slide Coordinate System",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const pixel_spacing_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x8D8),
  "Pixel Spacing Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const coordinate_system_axis_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x8DA),
  "Coordinate System Axis Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurement_units_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x8EA),
  "Measurement Units Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const vital_stain_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9F8),
  "Vital Stain Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requested_procedure_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1001),
  "Requested Procedure ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const reason_for_the_requested_procedure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1002),
  "Reason for the Requested Procedure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const requested_procedure_priority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1003),
  "Requested Procedure Priority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const patient_transport_arrangements = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1004),
  "Patient Transport Arrangements",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const requested_procedure_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1005),
  "Requested Procedure Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const placer_order_number_procedure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1006),
  "Placer Order Number / Procedure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const filler_order_number_procedure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1007),
  "Filler Order Number / Procedure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const confidentiality_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1008),
  "Confidentiality Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const reporting_priority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1009),
  "Reporting Priority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const reason_for_requested_procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x100A),
  "Reason for Requested Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const names_of_intended_recipients_of_results = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1010),
  "Names of Intended Recipients of Results",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const intended_recipients_of_results_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1011),
  "Intended Recipients of Results Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reason_for_performed_procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1012),
  "Reason For Performed Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requested_procedure_description_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1060),
  "Requested Procedure Description (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const person_identification_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1101),
  "Person Identification Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const person_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1102),
  "Person's Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const person_telephone_numbers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1103),
  "Person's Telephone Numbers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const person_telecom_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1104),
  "Person's Telecom Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const requested_procedure_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x1400),
  "Requested Procedure Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const reason_for_the_imaging_service_request = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2001),
  "Reason for the Imaging Service Request",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const issue_date_of_imaging_service_request = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2004),
  "Issue Date of Imaging Service Request",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const issue_time_of_imaging_service_request = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2005),
  "Issue Time of Imaging Service Request",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const placer_order_number_imaging_service_request_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2006),
  "Placer Order Number / Imaging Service Request (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const filler_order_number_imaging_service_request_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2007),
  "Filler Order Number / Imaging Service Request (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const order_entered_by = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2008),
  "Order Entered By",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const order_enterer_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2009),
  "Order Enterer's Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const order_callback_phone_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2010),
  "Order Callback Phone Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const order_callback_telecom_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2011),
  "Order Callback Telecom Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const placer_order_number_imaging_service_request = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2016),
  "Placer Order Number / Imaging Service Request",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const filler_order_number_imaging_service_request = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2017),
  "Filler Order Number / Imaging Service Request",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const imaging_service_request_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x2400),
  "Imaging Service Request Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const confidentiality_constraint_on_patient_data_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x3001),
  "Confidentiality Constraint on Patient Data Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const general_purpose_scheduled_procedure_step_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4001),
  "General Purpose Scheduled Procedure Step Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const general_purpose_performed_procedure_step_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4002),
  "General Purpose Performed Procedure Step Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const general_purpose_scheduled_procedure_step_priority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4003),
  "General Purpose Scheduled Procedure Step Priority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scheduled_processing_applications_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4004),
  "Scheduled Processing Applications Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_procedure_step_start_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4005),
  "Scheduled Procedure Step Start DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const multiple_copies_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4006),
  "Multiple Copies Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const performed_processing_applications_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4007),
  "Performed Processing Applications Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_procedure_step_expiration_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4008),
  "Scheduled Procedure Step Expiration DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const human_performer_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4009),
  "Human Performer Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_procedure_step_modification_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4010),
  "Scheduled Procedure Step Modification DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const expected_completion_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4011),
  "Expected Completion DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const resulting_general_purpose_performed_procedure_steps_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4015),
  "Resulting General Purpose Performed Procedure Steps Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_general_purpose_scheduled_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4016),
  "Referenced General Purpose Scheduled Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_workitem_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4018),
  "Scheduled Workitem Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_workitem_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4019),
  "Performed Workitem Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const input_availability_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4020),
  "Input Availability Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const input_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4021),
  "Input Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const relevant_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4022),
  "Relevant Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_general_purpose_scheduled_procedure_step_transaction_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4023),
  "Referenced General Purpose Scheduled Procedure Step Transaction UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const scheduled_station_name_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4025),
  "Scheduled Station Name Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_station_class_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4026),
  "Scheduled Station Class Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_station_geographic_location_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4027),
  "Scheduled Station Geographic Location Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_station_name_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4028),
  "Performed Station Name Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_station_class_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4029),
  "Performed Station Class Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_station_geographic_location_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4030),
  "Performed Station Geographic Location Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const requested_subsequent_workitem_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4031),
  "Requested Subsequent Workitem Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const non_dicom_output_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4032),
  "Non-DICOM Output Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const output_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4033),
  "Output Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scheduled_human_performers_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4034),
  "Scheduled Human Performers Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const actual_human_performers_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4035),
  "Actual Human Performers Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const human_performer_organization = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4036),
  "Human Performer's Organization",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const human_performer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4037),
  "Human Performer's Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const raw_data_handling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4040),
  "Raw Data Handling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const input_readiness_state = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4041),
  "Input Readiness State",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const performed_procedure_step_start_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4050),
  "Performed Procedure Step Start DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const performed_procedure_step_end_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4051),
  "Performed Procedure Step End DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const procedure_step_cancellation_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4052),
  "Procedure Step Cancellation DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const output_destination_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4070),
  "Output Destination Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dicom_storage_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4071),
  "DICOM Storage Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const stowrs_storage_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4072),
  "STOW-RS Storage Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const storage_url = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4073),
  "Storage URL",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const xds_storage_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x4074),
  "XDS Storage Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const entrance_dose_inm_gy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x8302),
  "Entrance Dose in mGy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const entrance_dose_derivation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x8303),
  "Entrance Dose Derivation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const parametric_map_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9092),
  "Parametric Map Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_image_real_world_value_mapping_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9094),
  "Referenced Image Real World Value Mapping Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const real_world_value_mapping_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9096),
  "Real World Value Mapping Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pixel_value_mapping_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9098),
  "Pixel Value Mapping Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lut_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9210),
  "LUT Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const real_world_value_last_value_mapped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9211),
  "Real World Value Last Value Mapped",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const real_world_value_lut_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9212),
  "Real World Value LUT Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const double_float_real_world_value_last_value_mapped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9213),
  "Double Float Real World Value Last Value Mapped",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const double_float_real_world_value_first_value_mapped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9214),
  "Double Float Real World Value First Value Mapped",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const real_world_value_first_value_mapped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9216),
  "Real World Value First Value Mapped",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const quantity_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9220),
  "Quantity Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const real_world_value_intercept = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9224),
  "Real World Value Intercept",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const real_world_value_slope = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0x9225),
  "Real World Value Slope",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const findings_flag_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA007),
  "Findings Flag (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const relationship_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA010),
  "Relationship Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const findings_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA020),
  "Findings Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const findings_group_uid_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA021),
  "Findings Group UID (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_findings_group_uid_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA022),
  "Referenced Findings Group UID (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const findings_group_recording_date_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA023),
  "Findings Group Recording Date (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const findings_group_recording_time_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA024),
  "Findings Group Recording Time (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const findings_source_category_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA026),
  "Findings Source Category Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const verifying_organization = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA027),
  "Verifying Organization",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const documenting_organization_identifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA028),
  "Documenting Organization Identifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const verification_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA030),
  "Verification DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const observation_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA032),
  "Observation DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const observation_start_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA033),
  "Observation Start DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const value_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA040),
  "Value Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const concept_name_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA043),
  "Concept Name Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurement_precision_description_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA047),
  "Measurement Precision Description (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const continuity_of_content = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA050),
  "Continuity Of Content",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const urgency_or_priority_alerts_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA057),
  "Urgency or Priority Alerts (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const sequencing_indicator_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA060),
  "Sequencing Indicator (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const document_identifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA066),
  "Document Identifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const document_author_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA067),
  "Document Author (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const document_author_identifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA068),
  "Document Author Identifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const identifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA070),
  "Identifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const verifying_observer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA073),
  "Verifying Observer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const object_binary_identifier_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA074),
  "Object Binary Identifier (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const verifying_observer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA075),
  "Verifying Observer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const documenting_observer_identifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA076),
  "Documenting Observer Identifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const author_observer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA078),
  "Author Observer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const participant_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA07A),
  "Participant Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const custodial_organization_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA07C),
  "Custodial Organization Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const participation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA080),
  "Participation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const participation_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA082),
  "Participation DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const observer_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA084),
  "Observer Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const procedure_identifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA085),
  "Procedure Identifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const verifying_observer_identification_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA088),
  "Verifying Observer Identification Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const object_directory_binary_identifier_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA089),
  "Object Directory Binary Identifier (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const equivalent_cda_document_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA090),
  "Equivalent CDA Document Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_waveform_channels = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA0B0),
  "Referenced Waveform Channels",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2_to_n,
);

export const date_of_document_or_verbal_transaction_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA110),
  "Date of Document or Verbal Transaction (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const time_of_document_creation_or_verbal_transaction_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA112),
  "Time of Document Creation or Verbal Transaction (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA120),
  "DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA121),
  "Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA122),
  "Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const person_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA123),
  "Person Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA124),
  "UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const report_status_id_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA125),
  "Report Status ID (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_2,
);

export const temporal_range_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA130),
  "Temporal Range Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_sample_positions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA132),
  "Referenced Sample Positions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const referenced_frame_numbers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA136),
  "Referenced Frame Numbers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const referenced_time_offsets = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA138),
  "Referenced Time Offsets",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const referenced_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA13A),
  "Referenced DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1_to_n,
);

export const text_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA160),
  "Text Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const floating_point_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA161),
  "Floating Point Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const rational_numerator_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA162),
  "Rational Numerator Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1_to_n,
);

export const rational_denominator_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA163),
  "Rational Denominator Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const observation_category_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA167),
  "Observation Category Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const concept_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA168),
  "Concept Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const bibliographic_citation_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA16A),
  "Bibliographic Citation (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const purpose_of_reference_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA170),
  "Purpose of Reference Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const observation_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA171),
  "Observation UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_observation_uid_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA172),
  "Referenced Observation UID (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_observation_class_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA173),
  "Referenced Observation Class (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_object_observation_class_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA174),
  "Referenced Object Observation Class (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const annotation_group_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA180),
  "Annotation Group Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const observation_date_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA192),
  "Observation Date (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const observation_time_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA193),
  "Observation Time (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const measurement_automation_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA194),
  "Measurement Automation (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA195),
  "Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const identification_description_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA224),
  "Identification Description (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const coordinates_set_geometric_type_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA290),
  "Coordinates Set Geometric Type (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const algorithm_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA296),
  "Algorithm Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const algorithm_description_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA297),
  "Algorithm Description (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const pixel_coordinates_set_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA29A),
  "Pixel Coordinates Set (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_2_to_n,
);

export const measured_value_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA300),
  "Measured Value Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const numeric_value_qualifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA301),
  "Numeric Value Qualifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const current_observer_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA307),
  "Current Observer (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const numeric_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA30A),
  "Numeric Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const referenced_accession_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA313),
  "Referenced Accession Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const report_status_comment_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA33A),
  "Report Status Comment (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const procedure_context_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA340),
  "Procedure Context Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const verbal_source_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA352),
  "Verbal Source (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const address_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA353),
  "Address (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const telephone_number_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA354),
  "Telephone Number (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const verbal_source_identifier_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA358),
  "Verbal Source Identifier Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const predecessor_documents_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA360),
  "Predecessor Documents Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_request_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA370),
  "Referenced Request Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA372),
  "Performed Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const current_requested_procedure_evidence_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA375),
  "Current Requested Procedure Evidence Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const report_detail_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA380),
  "Report Detail Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pertinent_other_evidence_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA385),
  "Pertinent Other Evidence Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const hl7_structured_document_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA390),
  "HL7 Structured Document Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const observation_subject_uid_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA402),
  "Observation Subject UID (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const observation_subject_class_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA403),
  "Observation Subject Class (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const observation_subject_type_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA404),
  "Observation Subject Type Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const completion_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA491),
  "Completion Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const completion_flag_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA492),
  "Completion Flag Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const verification_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA493),
  "Verification Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const archive_requested = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA494),
  "Archive Requested",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const preliminary_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA496),
  "Preliminary Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const content_template_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA504),
  "Content Template Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const identical_documents_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA525),
  "Identical Documents Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const observation_subject_context_flag_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA600),
  "Observation Subject Context Flag (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const observer_context_flag_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA601),
  "Observer Context Flag (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const procedure_context_flag_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA603),
  "Procedure Context Flag (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA730),
  "Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const relationship_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA731),
  "Relationship Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const relationship_type_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA732),
  "Relationship Type Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const language_code_sequence_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA744),
  "Language Code Sequence (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const tabulated_values_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA801),
  "Tabulated Values Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_table_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA802),
  "Number of Table Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const number_of_table_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA803),
  "Number of Table Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const table_row_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA804),
  "Table Row Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const table_column_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA805),
  "Table Column Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const table_row_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA806),
  "Table Row Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const table_column_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA807),
  "Table Column Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const cell_values_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA808),
  "Cell Values Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const uniform_resource_locator_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xA992),
  "Uniform Resource Locator (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const waveform_annotation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xB020),
  "Waveform Annotation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const template_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xDB00),
  "Template Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const template_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xDB06),
  "Template Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const template_local_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xDB07),
  "Template Local Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const template_extension_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xDB0B),
  "Template Extension Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const template_extension_organization_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xDB0C),
  "Template Extension Organization UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const template_extension_creator_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xDB0D),
  "Template Extension Creator UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_content_item_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xDB73),
  "Referenced Content Item Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const hl7_instance_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE001),
  "HL7 Instance Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const hl7_document_effective_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE004),
  "HL7 Document Effective Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const hl7_document_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE006),
  "HL7 Document Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const document_class_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE008),
  "Document Class Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const retrieve_uri = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE010),
  "Retrieve URI",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const retrieve_location_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE011),
  "Retrieve Location UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const type_of_instances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE020),
  "Type of Instances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dicom_retrieval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE021),
  "DICOM Retrieval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dicom_media_retrieval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE022),
  "DICOM Media Retrieval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const wado_retrieval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE023),
  "WADO Retrieval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const xds_retrieval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE024),
  "XDS Retrieval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const wadors_retrieval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE025),
  "WADO-RS Retrieval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const repository_unique_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE030),
  "Repository Unique ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const home_community_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x40, 0xE031),
  "Home Community ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

function find_element_in_group_0040(element) {
  if (element === 0x1) {
    return new Ok(scheduled_station_ae_title);
  } else if (element === 0x2) {
    return new Ok(scheduled_procedure_step_start_date);
  } else if (element === 0x3) {
    return new Ok(scheduled_procedure_step_start_time);
  } else if (element === 0x4) {
    return new Ok(scheduled_procedure_step_end_date);
  } else if (element === 0x5) {
    return new Ok(scheduled_procedure_step_end_time);
  } else if (element === 0x6) {
    return new Ok(scheduled_performing_physician_name);
  } else if (element === 0x7) {
    return new Ok(scheduled_procedure_step_description);
  } else if (element === 0x8) {
    return new Ok(scheduled_protocol_code_sequence);
  } else if (element === 0x9) {
    return new Ok(scheduled_procedure_step_id);
  } else if (element === 0xA) {
    return new Ok(stage_code_sequence);
  } else if (element === 0xB) {
    return new Ok(scheduled_performing_physician_identification_sequence);
  } else if (element === 0x10) {
    return new Ok(scheduled_station_name);
  } else if (element === 0x11) {
    return new Ok(scheduled_procedure_step_location);
  } else if (element === 0x12) {
    return new Ok(pre_medication);
  } else if (element === 0x20) {
    return new Ok(scheduled_procedure_step_status);
  } else if (element === 0x26) {
    return new Ok(order_placer_identifier_sequence);
  } else if (element === 0x27) {
    return new Ok(order_filler_identifier_sequence);
  } else if (element === 0x31) {
    return new Ok(local_namespace_entity_id);
  } else if (element === 0x32) {
    return new Ok(universal_entity_id);
  } else if (element === 0x33) {
    return new Ok(universal_entity_id_type);
  } else if (element === 0x35) {
    return new Ok(identifier_type_code);
  } else if (element === 0x36) {
    return new Ok(assigning_facility_sequence);
  } else if (element === 0x39) {
    return new Ok(assigning_jurisdiction_code_sequence);
  } else if (element === 0x3A) {
    return new Ok(assigning_agency_or_department_code_sequence);
  } else if (element === 0x100) {
    return new Ok(scheduled_procedure_step_sequence);
  } else if (element === 0x220) {
    return new Ok(referenced_non_image_composite_sop_instance_sequence);
  } else if (element === 0x241) {
    return new Ok(performed_station_ae_title);
  } else if (element === 0x242) {
    return new Ok(performed_station_name);
  } else if (element === 0x243) {
    return new Ok(performed_location);
  } else if (element === 0x244) {
    return new Ok(performed_procedure_step_start_date);
  } else if (element === 0x245) {
    return new Ok(performed_procedure_step_start_time);
  } else if (element === 0x250) {
    return new Ok(performed_procedure_step_end_date);
  } else if (element === 0x251) {
    return new Ok(performed_procedure_step_end_time);
  } else if (element === 0x252) {
    return new Ok(performed_procedure_step_status);
  } else if (element === 0x253) {
    return new Ok(performed_procedure_step_id);
  } else if (element === 0x254) {
    return new Ok(performed_procedure_step_description);
  } else if (element === 0x255) {
    return new Ok(performed_procedure_type_description);
  } else if (element === 0x260) {
    return new Ok(performed_protocol_code_sequence);
  } else if (element === 0x261) {
    return new Ok(performed_protocol_type);
  } else if (element === 0x270) {
    return new Ok(scheduled_step_attributes_sequence);
  } else if (element === 0x275) {
    return new Ok(request_attributes_sequence);
  } else if (element === 0x280) {
    return new Ok(comments_on_the_performed_procedure_step);
  } else if (element === 0x281) {
    return new Ok(performed_procedure_step_discontinuation_reason_code_sequence);
  } else if (element === 0x293) {
    return new Ok(quantity_sequence);
  } else if (element === 0x294) {
    return new Ok(quantity);
  } else if (element === 0x295) {
    return new Ok(measuring_units_sequence);
  } else if (element === 0x296) {
    return new Ok(billing_item_sequence);
  } else if (element === 0x300) {
    return new Ok(total_time_of_fluoroscopy);
  } else if (element === 0x301) {
    return new Ok(total_number_of_exposures);
  } else if (element === 0x302) {
    return new Ok(entrance_dose);
  } else if (element === 0x303) {
    return new Ok(exposed_area);
  } else if (element === 0x306) {
    return new Ok(distance_source_to_entrance);
  } else if (element === 0x307) {
    return new Ok(distance_source_to_support);
  } else if (element === 0x30E) {
    return new Ok(exposure_dose_sequence);
  } else if (element === 0x310) {
    return new Ok(comments_on_radiation_dose);
  } else if (element === 0x312) {
    return new Ok(x_ray_output);
  } else if (element === 0x314) {
    return new Ok(half_value_layer);
  } else if (element === 0x316) {
    return new Ok(organ_dose);
  } else if (element === 0x318) {
    return new Ok(organ_exposed);
  } else if (element === 0x320) {
    return new Ok(billing_procedure_step_sequence);
  } else if (element === 0x321) {
    return new Ok(film_consumption_sequence);
  } else if (element === 0x324) {
    return new Ok(billing_supplies_and_devices_sequence);
  } else if (element === 0x330) {
    return new Ok(referenced_procedure_step_sequence);
  } else if (element === 0x340) {
    return new Ok(performed_series_sequence);
  } else if (element === 0x400) {
    return new Ok(comments_on_the_scheduled_procedure_step);
  } else if (element === 0x440) {
    return new Ok(protocol_context_sequence);
  } else if (element === 0x441) {
    return new Ok(content_item_modifier_sequence);
  } else if (element === 0x500) {
    return new Ok(scheduled_specimen_sequence);
  } else if (element === 0x50A) {
    return new Ok(specimen_accession_number);
  } else if (element === 0x512) {
    return new Ok(container_identifier);
  } else if (element === 0x513) {
    return new Ok(issuer_of_the_container_identifier_sequence);
  } else if (element === 0x515) {
    return new Ok(alternate_container_identifier_sequence);
  } else if (element === 0x518) {
    return new Ok(container_type_code_sequence);
  } else if (element === 0x51A) {
    return new Ok(container_description);
  } else if (element === 0x520) {
    return new Ok(container_component_sequence);
  } else if (element === 0x550) {
    return new Ok(specimen_sequence);
  } else if (element === 0x551) {
    return new Ok(specimen_identifier);
  } else if (element === 0x552) {
    return new Ok(specimen_description_sequence_trial);
  } else if (element === 0x553) {
    return new Ok(specimen_description_trial);
  } else if (element === 0x554) {
    return new Ok(specimen_uid);
  } else if (element === 0x555) {
    return new Ok(acquisition_context_sequence);
  } else if (element === 0x556) {
    return new Ok(acquisition_context_description);
  } else if (element === 0x560) {
    return new Ok(specimen_description_sequence);
  } else if (element === 0x562) {
    return new Ok(issuer_of_the_specimen_identifier_sequence);
  } else if (element === 0x59A) {
    return new Ok(specimen_type_code_sequence);
  } else if (element === 0x600) {
    return new Ok(specimen_short_description);
  } else if (element === 0x602) {
    return new Ok(specimen_detailed_description);
  } else if (element === 0x610) {
    return new Ok(specimen_preparation_sequence);
  } else if (element === 0x612) {
    return new Ok(specimen_preparation_step_content_item_sequence);
  } else if (element === 0x620) {
    return new Ok(specimen_localization_content_item_sequence);
  } else if (element === 0x6FA) {
    return new Ok(slide_identifier);
  } else if (element === 0x710) {
    return new Ok(whole_slide_microscopy_image_frame_type_sequence);
  } else if (element === 0x71A) {
    return new Ok(image_center_point_coordinates_sequence);
  } else if (element === 0x72A) {
    return new Ok(x_offset_in_slide_coordinate_system);
  } else if (element === 0x73A) {
    return new Ok(y_offset_in_slide_coordinate_system);
  } else if (element === 0x74A) {
    return new Ok(z_offset_in_slide_coordinate_system);
  } else if (element === 0x8D8) {
    return new Ok(pixel_spacing_sequence);
  } else if (element === 0x8DA) {
    return new Ok(coordinate_system_axis_code_sequence);
  } else if (element === 0x8EA) {
    return new Ok(measurement_units_code_sequence);
  } else if (element === 0x9F8) {
    return new Ok(vital_stain_code_sequence_trial);
  } else if (element === 0x1001) {
    return new Ok(requested_procedure_id);
  } else if (element === 0x1002) {
    return new Ok(reason_for_the_requested_procedure);
  } else if (element === 0x1003) {
    return new Ok(requested_procedure_priority);
  } else if (element === 0x1004) {
    return new Ok(patient_transport_arrangements);
  } else if (element === 0x1005) {
    return new Ok(requested_procedure_location);
  } else if (element === 0x1006) {
    return new Ok(placer_order_number_procedure);
  } else if (element === 0x1007) {
    return new Ok(filler_order_number_procedure);
  } else if (element === 0x1008) {
    return new Ok(confidentiality_code);
  } else if (element === 0x1009) {
    return new Ok(reporting_priority);
  } else if (element === 0x100A) {
    return new Ok(reason_for_requested_procedure_code_sequence);
  } else if (element === 0x1010) {
    return new Ok(names_of_intended_recipients_of_results);
  } else if (element === 0x1011) {
    return new Ok(intended_recipients_of_results_identification_sequence);
  } else if (element === 0x1012) {
    return new Ok(reason_for_performed_procedure_code_sequence);
  } else if (element === 0x1060) {
    return new Ok(requested_procedure_description_trial);
  } else if (element === 0x1101) {
    return new Ok(person_identification_code_sequence);
  } else if (element === 0x1102) {
    return new Ok(person_address);
  } else if (element === 0x1103) {
    return new Ok(person_telephone_numbers);
  } else if (element === 0x1104) {
    return new Ok(person_telecom_information);
  } else if (element === 0x1400) {
    return new Ok(requested_procedure_comments);
  } else if (element === 0x2001) {
    return new Ok(reason_for_the_imaging_service_request);
  } else if (element === 0x2004) {
    return new Ok(issue_date_of_imaging_service_request);
  } else if (element === 0x2005) {
    return new Ok(issue_time_of_imaging_service_request);
  } else if (element === 0x2006) {
    return new Ok(placer_order_number_imaging_service_request_retired);
  } else if (element === 0x2007) {
    return new Ok(filler_order_number_imaging_service_request_retired);
  } else if (element === 0x2008) {
    return new Ok(order_entered_by);
  } else if (element === 0x2009) {
    return new Ok(order_enterer_location);
  } else if (element === 0x2010) {
    return new Ok(order_callback_phone_number);
  } else if (element === 0x2011) {
    return new Ok(order_callback_telecom_information);
  } else if (element === 0x2016) {
    return new Ok(placer_order_number_imaging_service_request);
  } else if (element === 0x2017) {
    return new Ok(filler_order_number_imaging_service_request);
  } else if (element === 0x2400) {
    return new Ok(imaging_service_request_comments);
  } else if (element === 0x3001) {
    return new Ok(confidentiality_constraint_on_patient_data_description);
  } else if (element === 0x4001) {
    return new Ok(general_purpose_scheduled_procedure_step_status);
  } else if (element === 0x4002) {
    return new Ok(general_purpose_performed_procedure_step_status);
  } else if (element === 0x4003) {
    return new Ok(general_purpose_scheduled_procedure_step_priority);
  } else if (element === 0x4004) {
    return new Ok(scheduled_processing_applications_code_sequence);
  } else if (element === 0x4005) {
    return new Ok(scheduled_procedure_step_start_date_time);
  } else if (element === 0x4006) {
    return new Ok(multiple_copies_flag);
  } else if (element === 0x4007) {
    return new Ok(performed_processing_applications_code_sequence);
  } else if (element === 0x4008) {
    return new Ok(scheduled_procedure_step_expiration_date_time);
  } else if (element === 0x4009) {
    return new Ok(human_performer_code_sequence);
  } else if (element === 0x4010) {
    return new Ok(scheduled_procedure_step_modification_date_time);
  } else if (element === 0x4011) {
    return new Ok(expected_completion_date_time);
  } else if (element === 0x4015) {
    return new Ok(resulting_general_purpose_performed_procedure_steps_sequence);
  } else if (element === 0x4016) {
    return new Ok(referenced_general_purpose_scheduled_procedure_step_sequence);
  } else if (element === 0x4018) {
    return new Ok(scheduled_workitem_code_sequence);
  } else if (element === 0x4019) {
    return new Ok(performed_workitem_code_sequence);
  } else if (element === 0x4020) {
    return new Ok(input_availability_flag);
  } else if (element === 0x4021) {
    return new Ok(input_information_sequence);
  } else if (element === 0x4022) {
    return new Ok(relevant_information_sequence);
  } else if (element === 0x4023) {
    return new Ok(
      referenced_general_purpose_scheduled_procedure_step_transaction_uid,
    );
  } else if (element === 0x4025) {
    return new Ok(scheduled_station_name_code_sequence);
  } else if (element === 0x4026) {
    return new Ok(scheduled_station_class_code_sequence);
  } else if (element === 0x4027) {
    return new Ok(scheduled_station_geographic_location_code_sequence);
  } else if (element === 0x4028) {
    return new Ok(performed_station_name_code_sequence);
  } else if (element === 0x4029) {
    return new Ok(performed_station_class_code_sequence);
  } else if (element === 0x4030) {
    return new Ok(performed_station_geographic_location_code_sequence);
  } else if (element === 0x4031) {
    return new Ok(requested_subsequent_workitem_code_sequence);
  } else if (element === 0x4032) {
    return new Ok(non_dicom_output_code_sequence);
  } else if (element === 0x4033) {
    return new Ok(output_information_sequence);
  } else if (element === 0x4034) {
    return new Ok(scheduled_human_performers_sequence);
  } else if (element === 0x4035) {
    return new Ok(actual_human_performers_sequence);
  } else if (element === 0x4036) {
    return new Ok(human_performer_organization);
  } else if (element === 0x4037) {
    return new Ok(human_performer_name);
  } else if (element === 0x4040) {
    return new Ok(raw_data_handling);
  } else if (element === 0x4041) {
    return new Ok(input_readiness_state);
  } else if (element === 0x4050) {
    return new Ok(performed_procedure_step_start_date_time);
  } else if (element === 0x4051) {
    return new Ok(performed_procedure_step_end_date_time);
  } else if (element === 0x4052) {
    return new Ok(procedure_step_cancellation_date_time);
  } else if (element === 0x4070) {
    return new Ok(output_destination_sequence);
  } else if (element === 0x4071) {
    return new Ok(dicom_storage_sequence);
  } else if (element === 0x4072) {
    return new Ok(stowrs_storage_sequence);
  } else if (element === 0x4073) {
    return new Ok(storage_url);
  } else if (element === 0x4074) {
    return new Ok(xds_storage_sequence);
  } else if (element === 0x8302) {
    return new Ok(entrance_dose_inm_gy);
  } else if (element === 0x8303) {
    return new Ok(entrance_dose_derivation);
  } else if (element === 0x9092) {
    return new Ok(parametric_map_frame_type_sequence);
  } else if (element === 0x9094) {
    return new Ok(referenced_image_real_world_value_mapping_sequence);
  } else if (element === 0x9096) {
    return new Ok(real_world_value_mapping_sequence);
  } else if (element === 0x9098) {
    return new Ok(pixel_value_mapping_code_sequence);
  } else if (element === 0x9210) {
    return new Ok(lut_label);
  } else if (element === 0x9211) {
    return new Ok(real_world_value_last_value_mapped);
  } else if (element === 0x9212) {
    return new Ok(real_world_value_lut_data);
  } else if (element === 0x9213) {
    return new Ok(double_float_real_world_value_last_value_mapped);
  } else if (element === 0x9214) {
    return new Ok(double_float_real_world_value_first_value_mapped);
  } else if (element === 0x9216) {
    return new Ok(real_world_value_first_value_mapped);
  } else if (element === 0x9220) {
    return new Ok(quantity_definition_sequence);
  } else if (element === 0x9224) {
    return new Ok(real_world_value_intercept);
  } else if (element === 0x9225) {
    return new Ok(real_world_value_slope);
  } else if (element === 0xA007) {
    return new Ok(findings_flag_trial);
  } else if (element === 0xA010) {
    return new Ok(relationship_type);
  } else if (element === 0xA020) {
    return new Ok(findings_sequence_trial);
  } else if (element === 0xA021) {
    return new Ok(findings_group_uid_trial);
  } else if (element === 0xA022) {
    return new Ok(referenced_findings_group_uid_trial);
  } else if (element === 0xA023) {
    return new Ok(findings_group_recording_date_trial);
  } else if (element === 0xA024) {
    return new Ok(findings_group_recording_time_trial);
  } else if (element === 0xA026) {
    return new Ok(findings_source_category_code_sequence_trial);
  } else if (element === 0xA027) {
    return new Ok(verifying_organization);
  } else if (element === 0xA028) {
    return new Ok(documenting_organization_identifier_code_sequence_trial);
  } else if (element === 0xA030) {
    return new Ok(verification_date_time);
  } else if (element === 0xA032) {
    return new Ok(observation_date_time);
  } else if (element === 0xA033) {
    return new Ok(observation_start_date_time);
  } else if (element === 0xA040) {
    return new Ok(value_type);
  } else if (element === 0xA043) {
    return new Ok(concept_name_code_sequence);
  } else if (element === 0xA047) {
    return new Ok(measurement_precision_description_trial);
  } else if (element === 0xA050) {
    return new Ok(continuity_of_content);
  } else if (element === 0xA057) {
    return new Ok(urgency_or_priority_alerts_trial);
  } else if (element === 0xA060) {
    return new Ok(sequencing_indicator_trial);
  } else if (element === 0xA066) {
    return new Ok(document_identifier_code_sequence_trial);
  } else if (element === 0xA067) {
    return new Ok(document_author_trial);
  } else if (element === 0xA068) {
    return new Ok(document_author_identifier_code_sequence_trial);
  } else if (element === 0xA070) {
    return new Ok(identifier_code_sequence_trial);
  } else if (element === 0xA073) {
    return new Ok(verifying_observer_sequence);
  } else if (element === 0xA074) {
    return new Ok(object_binary_identifier_trial);
  } else if (element === 0xA075) {
    return new Ok(verifying_observer_name);
  } else if (element === 0xA076) {
    return new Ok(documenting_observer_identifier_code_sequence_trial);
  } else if (element === 0xA078) {
    return new Ok(author_observer_sequence);
  } else if (element === 0xA07A) {
    return new Ok(participant_sequence);
  } else if (element === 0xA07C) {
    return new Ok(custodial_organization_sequence);
  } else if (element === 0xA080) {
    return new Ok(participation_type);
  } else if (element === 0xA082) {
    return new Ok(participation_date_time);
  } else if (element === 0xA084) {
    return new Ok(observer_type);
  } else if (element === 0xA085) {
    return new Ok(procedure_identifier_code_sequence_trial);
  } else if (element === 0xA088) {
    return new Ok(verifying_observer_identification_code_sequence);
  } else if (element === 0xA089) {
    return new Ok(object_directory_binary_identifier_trial);
  } else if (element === 0xA090) {
    return new Ok(equivalent_cda_document_sequence);
  } else if (element === 0xA0B0) {
    return new Ok(referenced_waveform_channels);
  } else if (element === 0xA110) {
    return new Ok(date_of_document_or_verbal_transaction_trial);
  } else if (element === 0xA112) {
    return new Ok(time_of_document_creation_or_verbal_transaction_trial);
  } else if (element === 0xA120) {
    return new Ok(date_time);
  } else if (element === 0xA121) {
    return new Ok(date);
  } else if (element === 0xA122) {
    return new Ok(time);
  } else if (element === 0xA123) {
    return new Ok(person_name);
  } else if (element === 0xA124) {
    return new Ok(uid);
  } else if (element === 0xA125) {
    return new Ok(report_status_id_trial);
  } else if (element === 0xA130) {
    return new Ok(temporal_range_type);
  } else if (element === 0xA132) {
    return new Ok(referenced_sample_positions);
  } else if (element === 0xA136) {
    return new Ok(referenced_frame_numbers);
  } else if (element === 0xA138) {
    return new Ok(referenced_time_offsets);
  } else if (element === 0xA13A) {
    return new Ok(referenced_date_time);
  } else if (element === 0xA160) {
    return new Ok(text_value);
  } else if (element === 0xA161) {
    return new Ok(floating_point_value);
  } else if (element === 0xA162) {
    return new Ok(rational_numerator_value);
  } else if (element === 0xA163) {
    return new Ok(rational_denominator_value);
  } else if (element === 0xA167) {
    return new Ok(observation_category_code_sequence_trial);
  } else if (element === 0xA168) {
    return new Ok(concept_code_sequence);
  } else if (element === 0xA16A) {
    return new Ok(bibliographic_citation_trial);
  } else if (element === 0xA170) {
    return new Ok(purpose_of_reference_code_sequence);
  } else if (element === 0xA171) {
    return new Ok(observation_uid);
  } else if (element === 0xA172) {
    return new Ok(referenced_observation_uid_trial);
  } else if (element === 0xA173) {
    return new Ok(referenced_observation_class_trial);
  } else if (element === 0xA174) {
    return new Ok(referenced_object_observation_class_trial);
  } else if (element === 0xA180) {
    return new Ok(annotation_group_number);
  } else if (element === 0xA192) {
    return new Ok(observation_date_trial);
  } else if (element === 0xA193) {
    return new Ok(observation_time_trial);
  } else if (element === 0xA194) {
    return new Ok(measurement_automation_trial);
  } else if (element === 0xA195) {
    return new Ok(modifier_code_sequence);
  } else if (element === 0xA224) {
    return new Ok(identification_description_trial);
  } else if (element === 0xA290) {
    return new Ok(coordinates_set_geometric_type_trial);
  } else if (element === 0xA296) {
    return new Ok(algorithm_code_sequence_trial);
  } else if (element === 0xA297) {
    return new Ok(algorithm_description_trial);
  } else if (element === 0xA29A) {
    return new Ok(pixel_coordinates_set_trial);
  } else if (element === 0xA300) {
    return new Ok(measured_value_sequence);
  } else if (element === 0xA301) {
    return new Ok(numeric_value_qualifier_code_sequence);
  } else if (element === 0xA307) {
    return new Ok(current_observer_trial);
  } else if (element === 0xA30A) {
    return new Ok(numeric_value);
  } else if (element === 0xA313) {
    return new Ok(referenced_accession_sequence_trial);
  } else if (element === 0xA33A) {
    return new Ok(report_status_comment_trial);
  } else if (element === 0xA340) {
    return new Ok(procedure_context_sequence_trial);
  } else if (element === 0xA352) {
    return new Ok(verbal_source_trial);
  } else if (element === 0xA353) {
    return new Ok(address_trial);
  } else if (element === 0xA354) {
    return new Ok(telephone_number_trial);
  } else if (element === 0xA358) {
    return new Ok(verbal_source_identifier_code_sequence_trial);
  } else if (element === 0xA360) {
    return new Ok(predecessor_documents_sequence);
  } else if (element === 0xA370) {
    return new Ok(referenced_request_sequence);
  } else if (element === 0xA372) {
    return new Ok(performed_procedure_code_sequence);
  } else if (element === 0xA375) {
    return new Ok(current_requested_procedure_evidence_sequence);
  } else if (element === 0xA380) {
    return new Ok(report_detail_sequence_trial);
  } else if (element === 0xA385) {
    return new Ok(pertinent_other_evidence_sequence);
  } else if (element === 0xA390) {
    return new Ok(hl7_structured_document_reference_sequence);
  } else if (element === 0xA402) {
    return new Ok(observation_subject_uid_trial);
  } else if (element === 0xA403) {
    return new Ok(observation_subject_class_trial);
  } else if (element === 0xA404) {
    return new Ok(observation_subject_type_code_sequence_trial);
  } else if (element === 0xA491) {
    return new Ok(completion_flag);
  } else if (element === 0xA492) {
    return new Ok(completion_flag_description);
  } else if (element === 0xA493) {
    return new Ok(verification_flag);
  } else if (element === 0xA494) {
    return new Ok(archive_requested);
  } else if (element === 0xA496) {
    return new Ok(preliminary_flag);
  } else if (element === 0xA504) {
    return new Ok(content_template_sequence);
  } else if (element === 0xA525) {
    return new Ok(identical_documents_sequence);
  } else if (element === 0xA600) {
    return new Ok(observation_subject_context_flag_trial);
  } else if (element === 0xA601) {
    return new Ok(observer_context_flag_trial);
  } else if (element === 0xA603) {
    return new Ok(procedure_context_flag_trial);
  } else if (element === 0xA730) {
    return new Ok(content_sequence);
  } else if (element === 0xA731) {
    return new Ok(relationship_sequence_trial);
  } else if (element === 0xA732) {
    return new Ok(relationship_type_code_sequence_trial);
  } else if (element === 0xA744) {
    return new Ok(language_code_sequence_trial);
  } else if (element === 0xA801) {
    return new Ok(tabulated_values_sequence);
  } else if (element === 0xA802) {
    return new Ok(number_of_table_rows);
  } else if (element === 0xA803) {
    return new Ok(number_of_table_columns);
  } else if (element === 0xA804) {
    return new Ok(table_row_number);
  } else if (element === 0xA805) {
    return new Ok(table_column_number);
  } else if (element === 0xA806) {
    return new Ok(table_row_definition_sequence);
  } else if (element === 0xA807) {
    return new Ok(table_column_definition_sequence);
  } else if (element === 0xA808) {
    return new Ok(cell_values_sequence);
  } else if (element === 0xA992) {
    return new Ok(uniform_resource_locator_trial);
  } else if (element === 0xB020) {
    return new Ok(waveform_annotation_sequence);
  } else if (element === 0xDB00) {
    return new Ok(template_identifier);
  } else if (element === 0xDB06) {
    return new Ok(template_version);
  } else if (element === 0xDB07) {
    return new Ok(template_local_version);
  } else if (element === 0xDB0B) {
    return new Ok(template_extension_flag);
  } else if (element === 0xDB0C) {
    return new Ok(template_extension_organization_uid);
  } else if (element === 0xDB0D) {
    return new Ok(template_extension_creator_uid);
  } else if (element === 0xDB73) {
    return new Ok(referenced_content_item_identifier);
  } else if (element === 0xE001) {
    return new Ok(hl7_instance_identifier);
  } else if (element === 0xE004) {
    return new Ok(hl7_document_effective_time);
  } else if (element === 0xE006) {
    return new Ok(hl7_document_type_code_sequence);
  } else if (element === 0xE008) {
    return new Ok(document_class_code_sequence);
  } else if (element === 0xE010) {
    return new Ok(retrieve_uri);
  } else if (element === 0xE011) {
    return new Ok(retrieve_location_uid);
  } else if (element === 0xE020) {
    return new Ok(type_of_instances);
  } else if (element === 0xE021) {
    return new Ok(dicom_retrieval_sequence);
  } else if (element === 0xE022) {
    return new Ok(dicom_media_retrieval_sequence);
  } else if (element === 0xE023) {
    return new Ok(wado_retrieval_sequence);
  } else if (element === 0xE024) {
    return new Ok(xds_retrieval_sequence);
  } else if (element === 0xE025) {
    return new Ok(wadors_retrieval_sequence);
  } else if (element === 0xE030) {
    return new Ok(repository_unique_id);
  } else if (element === 0xE031) {
    return new Ok(home_community_id);
  } else {
    return new Error(undefined);
  }
}

export const document_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x42, 0x10),
  "Document Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const encapsulated_document = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x42, 0x11),
  "Encapsulated Document",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const mime_type_of_encapsulated_document = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x42, 0x12),
  "MIME Type of Encapsulated Document",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x42, 0x13),
  "Source Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const list_of_mime_types = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x42, 0x14),
  "List of MIME Types",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const encapsulated_document_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x42, 0x15),
  "Encapsulated Document Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

function find_element_in_group_0042(element) {
  if (element === 0x10) {
    return new Ok(document_title);
  } else if (element === 0x11) {
    return new Ok(encapsulated_document);
  } else if (element === 0x12) {
    return new Ok(mime_type_of_encapsulated_document);
  } else if (element === 0x13) {
    return new Ok(source_instance_sequence);
  } else if (element === 0x14) {
    return new Ok(list_of_mime_types);
  } else if (element === 0x15) {
    return new Ok(encapsulated_document_length);
  } else {
    return new Error(undefined);
  }
}

export const product_package_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x1),
  "Product Package Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const substance_administration_approval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x2),
  "Substance Administration Approval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const approval_status_further_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x3),
  "Approval Status Further Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const approval_status_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x4),
  "Approval Status DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const product_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x7),
  "Product Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const product_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x8),
  "Product Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const product_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x9),
  "Product Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const product_lot_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0xA),
  "Product Lot Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const product_expiration_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0xB),
  "Product Expiration DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const substance_administration_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x10),
  "Substance Administration DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const substance_administration_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x11),
  "Substance Administration Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const substance_administration_device_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x12),
  "Substance Administration Device ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const product_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x13),
  "Product Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const substance_administration_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x19),
  "Substance Administration Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const approval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x100),
  "Approval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assertion_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x101),
  "Assertion Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assertion_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x102),
  "Assertion UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const asserter_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x103),
  "Asserter Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assertion_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x104),
  "Assertion DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const assertion_expiration_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x105),
  "Assertion Expiration DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const assertion_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x106),
  "Assertion Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const related_assertion_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x107),
  "Related Assertion Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_assertion_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x108),
  "Referenced Assertion UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const approval_subject_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x109),
  "Approval Subject Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const organizational_role_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x44, 0x10A),
  "Organizational Role Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0044(element) {
  if (element === 0x1) {
    return new Ok(product_package_identifier);
  } else if (element === 0x2) {
    return new Ok(substance_administration_approval);
  } else if (element === 0x3) {
    return new Ok(approval_status_further_description);
  } else if (element === 0x4) {
    return new Ok(approval_status_date_time);
  } else if (element === 0x7) {
    return new Ok(product_type_code_sequence);
  } else if (element === 0x8) {
    return new Ok(product_name);
  } else if (element === 0x9) {
    return new Ok(product_description);
  } else if (element === 0xA) {
    return new Ok(product_lot_identifier);
  } else if (element === 0xB) {
    return new Ok(product_expiration_date_time);
  } else if (element === 0x10) {
    return new Ok(substance_administration_date_time);
  } else if (element === 0x11) {
    return new Ok(substance_administration_notes);
  } else if (element === 0x12) {
    return new Ok(substance_administration_device_id);
  } else if (element === 0x13) {
    return new Ok(product_parameter_sequence);
  } else if (element === 0x19) {
    return new Ok(substance_administration_parameter_sequence);
  } else if (element === 0x100) {
    return new Ok(approval_sequence);
  } else if (element === 0x101) {
    return new Ok(assertion_code_sequence);
  } else if (element === 0x102) {
    return new Ok(assertion_uid);
  } else if (element === 0x103) {
    return new Ok(asserter_identification_sequence);
  } else if (element === 0x104) {
    return new Ok(assertion_date_time);
  } else if (element === 0x105) {
    return new Ok(assertion_expiration_date_time);
  } else if (element === 0x106) {
    return new Ok(assertion_comments);
  } else if (element === 0x107) {
    return new Ok(related_assertion_sequence);
  } else if (element === 0x108) {
    return new Ok(referenced_assertion_uid);
  } else if (element === 0x109) {
    return new Ok(approval_subject_sequence);
  } else if (element === 0x10A) {
    return new Ok(organizational_role_code_sequence);
  } else {
    return new Error(undefined);
  }
}

export const lens_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x12),
  "Lens Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const right_lens_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x14),
  "Right Lens Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const left_lens_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x15),
  "Left Lens Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const unspecified_laterality_lens_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x16),
  "Unspecified Laterality Lens Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const cylinder_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x18),
  "Cylinder Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const prism_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x28),
  "Prism Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const horizontal_prism_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x30),
  "Horizontal Prism Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const horizontal_prism_base = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x32),
  "Horizontal Prism Base",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const vertical_prism_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x34),
  "Vertical Prism Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const vertical_prism_base = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x36),
  "Vertical Prism Base",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const lens_segment_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x38),
  "Lens Segment Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const optical_transmittance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x40),
  "Optical Transmittance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const channel_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x42),
  "Channel Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const pupil_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x44),
  "Pupil Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const corneal_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x46),
  "Corneal Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const corneal_size_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x47),
  "Corneal Size Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const autorefraction_right_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x50),
  "Autorefraction Right Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const autorefraction_left_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x52),
  "Autorefraction Left Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const distance_pupillary_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x60),
  "Distance Pupillary Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const near_pupillary_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x62),
  "Near Pupillary Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const intermediate_pupillary_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x63),
  "Intermediate Pupillary Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const other_pupillary_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x64),
  "Other Pupillary Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const keratometry_right_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x70),
  "Keratometry Right Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const keratometry_left_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x71),
  "Keratometry Left Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const steep_keratometric_axis_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x74),
  "Steep Keratometric Axis Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radius_of_curvature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x75),
  "Radius of Curvature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const keratometric_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x76),
  "Keratometric Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const keratometric_axis = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x77),
  "Keratometric Axis",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const flat_keratometric_axis_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x80),
  "Flat Keratometric Axis Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const background_color = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x92),
  "Background Color",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const optotype = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x94),
  "Optotype",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const optotype_presentation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x95),
  "Optotype Presentation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const subjective_refraction_right_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x97),
  "Subjective Refraction Right Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const subjective_refraction_left_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x98),
  "Subjective Refraction Left Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const add_near_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x100),
  "Add Near Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const add_intermediate_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x101),
  "Add Intermediate Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const add_other_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x102),
  "Add Other Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const add_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x104),
  "Add Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const viewing_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x106),
  "Viewing Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const cornea_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x110),
  "Cornea Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_of_cornea_measurement_data_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x111),
  "Source of Cornea Measurement Data Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const steep_corneal_axis_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x112),
  "Steep Corneal Axis Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const flat_corneal_axis_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x113),
  "Flat Corneal Axis Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const corneal_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x114),
  "Corneal Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const corneal_axis = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x115),
  "Corneal Axis",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const cornea_measurement_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x116),
  "Cornea Measurement Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const refractive_index_of_cornea = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x117),
  "Refractive Index of Cornea",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const refractive_index_of_aqueous_humor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x118),
  "Refractive Index of Aqueous Humor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const visual_acuity_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x121),
  "Visual Acuity Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_acuity_right_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x122),
  "Visual Acuity Right Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_acuity_left_eye_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x123),
  "Visual Acuity Left Eye Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const visual_acuity_both_eyes_open_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x124),
  "Visual Acuity Both Eyes Open Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const viewing_distance_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x125),
  "Viewing Distance Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const visual_acuity_modifiers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x135),
  "Visual Acuity Modifiers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_2,
);

export const decimal_visual_acuity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x137),
  "Decimal Visual Acuity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const optotype_detailed_definition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x139),
  "Optotype Detailed Definition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const referenced_refractive_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x145),
  "Referenced Refractive Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const sphere_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x146),
  "Sphere Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const cylinder_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x147),
  "Cylinder Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const corneal_topography_surface = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x201),
  "Corneal Topography Surface",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const corneal_vertex_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x202),
  "Corneal Vertex Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const pupil_centroid_x_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x203),
  "Pupil Centroid X-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const pupil_centroid_y_coordinate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x204),
  "Pupil Centroid Y-Coordinate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const equivalent_pupil_radius = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x205),
  "Equivalent Pupil Radius",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const corneal_topography_map_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x207),
  "Corneal Topography Map Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const vertices_of_the_outline_of_pupil = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x208),
  "Vertices of the Outline of Pupil",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2_to_n,
);

export const corneal_topography_mapping_normals_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x210),
  "Corneal Topography Mapping Normals Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const maximum_corneal_curvature_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x211),
  "Maximum Corneal Curvature Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const maximum_corneal_curvature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x212),
  "Maximum Corneal Curvature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const maximum_corneal_curvature_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x213),
  "Maximum Corneal Curvature Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const minimum_keratometric_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x215),
  "Minimum Keratometric Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const simulated_keratometric_cylinder_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x218),
  "Simulated Keratometric Cylinder Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const average_corneal_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x220),
  "Average Corneal Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const corneal_is_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x224),
  "Corneal I-S Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const analyzed_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x227),
  "Analyzed Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const surface_regularity_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x230),
  "Surface Regularity Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const surface_asymmetry_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x232),
  "Surface Asymmetry Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const corneal_eccentricity_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x234),
  "Corneal Eccentricity Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const keratoconus_prediction_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x236),
  "Keratoconus Prediction Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const decimal_potential_visual_acuity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x238),
  "Decimal Potential Visual Acuity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const corneal_topography_map_quality_evaluation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x242),
  "Corneal Topography Map Quality Evaluation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_image_corneal_processed_data_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x244),
  "Source Image Corneal Processed Data Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const corneal_point_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x247),
  "Corneal Point Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const corneal_point_estimated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x248),
  "Corneal Point Estimated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const axial_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x249),
  "Axial Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const tangential_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x250),
  "Tangential Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const refractive_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x251),
  "Refractive Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const relative_elevation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x252),
  "Relative Elevation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const corneal_wavefront = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x46, 0x253),
  "Corneal Wavefront",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

function find_element_in_group_0046(element) {
  if (element === 0x12) {
    return new Ok(lens_description);
  } else if (element === 0x14) {
    return new Ok(right_lens_sequence);
  } else if (element === 0x15) {
    return new Ok(left_lens_sequence);
  } else if (element === 0x16) {
    return new Ok(unspecified_laterality_lens_sequence);
  } else if (element === 0x18) {
    return new Ok(cylinder_sequence);
  } else if (element === 0x28) {
    return new Ok(prism_sequence);
  } else if (element === 0x30) {
    return new Ok(horizontal_prism_power);
  } else if (element === 0x32) {
    return new Ok(horizontal_prism_base);
  } else if (element === 0x34) {
    return new Ok(vertical_prism_power);
  } else if (element === 0x36) {
    return new Ok(vertical_prism_base);
  } else if (element === 0x38) {
    return new Ok(lens_segment_type);
  } else if (element === 0x40) {
    return new Ok(optical_transmittance);
  } else if (element === 0x42) {
    return new Ok(channel_width);
  } else if (element === 0x44) {
    return new Ok(pupil_size);
  } else if (element === 0x46) {
    return new Ok(corneal_size);
  } else if (element === 0x47) {
    return new Ok(corneal_size_sequence);
  } else if (element === 0x50) {
    return new Ok(autorefraction_right_eye_sequence);
  } else if (element === 0x52) {
    return new Ok(autorefraction_left_eye_sequence);
  } else if (element === 0x60) {
    return new Ok(distance_pupillary_distance);
  } else if (element === 0x62) {
    return new Ok(near_pupillary_distance);
  } else if (element === 0x63) {
    return new Ok(intermediate_pupillary_distance);
  } else if (element === 0x64) {
    return new Ok(other_pupillary_distance);
  } else if (element === 0x70) {
    return new Ok(keratometry_right_eye_sequence);
  } else if (element === 0x71) {
    return new Ok(keratometry_left_eye_sequence);
  } else if (element === 0x74) {
    return new Ok(steep_keratometric_axis_sequence);
  } else if (element === 0x75) {
    return new Ok(radius_of_curvature);
  } else if (element === 0x76) {
    return new Ok(keratometric_power);
  } else if (element === 0x77) {
    return new Ok(keratometric_axis);
  } else if (element === 0x80) {
    return new Ok(flat_keratometric_axis_sequence);
  } else if (element === 0x92) {
    return new Ok(background_color);
  } else if (element === 0x94) {
    return new Ok(optotype);
  } else if (element === 0x95) {
    return new Ok(optotype_presentation);
  } else if (element === 0x97) {
    return new Ok(subjective_refraction_right_eye_sequence);
  } else if (element === 0x98) {
    return new Ok(subjective_refraction_left_eye_sequence);
  } else if (element === 0x100) {
    return new Ok(add_near_sequence);
  } else if (element === 0x101) {
    return new Ok(add_intermediate_sequence);
  } else if (element === 0x102) {
    return new Ok(add_other_sequence);
  } else if (element === 0x104) {
    return new Ok(add_power);
  } else if (element === 0x106) {
    return new Ok(viewing_distance);
  } else if (element === 0x110) {
    return new Ok(cornea_measurements_sequence);
  } else if (element === 0x111) {
    return new Ok(source_of_cornea_measurement_data_code_sequence);
  } else if (element === 0x112) {
    return new Ok(steep_corneal_axis_sequence);
  } else if (element === 0x113) {
    return new Ok(flat_corneal_axis_sequence);
  } else if (element === 0x114) {
    return new Ok(corneal_power);
  } else if (element === 0x115) {
    return new Ok(corneal_axis);
  } else if (element === 0x116) {
    return new Ok(cornea_measurement_method_code_sequence);
  } else if (element === 0x117) {
    return new Ok(refractive_index_of_cornea);
  } else if (element === 0x118) {
    return new Ok(refractive_index_of_aqueous_humor);
  } else if (element === 0x121) {
    return new Ok(visual_acuity_type_code_sequence);
  } else if (element === 0x122) {
    return new Ok(visual_acuity_right_eye_sequence);
  } else if (element === 0x123) {
    return new Ok(visual_acuity_left_eye_sequence);
  } else if (element === 0x124) {
    return new Ok(visual_acuity_both_eyes_open_sequence);
  } else if (element === 0x125) {
    return new Ok(viewing_distance_type);
  } else if (element === 0x135) {
    return new Ok(visual_acuity_modifiers);
  } else if (element === 0x137) {
    return new Ok(decimal_visual_acuity);
  } else if (element === 0x139) {
    return new Ok(optotype_detailed_definition);
  } else if (element === 0x145) {
    return new Ok(referenced_refractive_measurements_sequence);
  } else if (element === 0x146) {
    return new Ok(sphere_power);
  } else if (element === 0x147) {
    return new Ok(cylinder_power);
  } else if (element === 0x201) {
    return new Ok(corneal_topography_surface);
  } else if (element === 0x202) {
    return new Ok(corneal_vertex_location);
  } else if (element === 0x203) {
    return new Ok(pupil_centroid_x_coordinate);
  } else if (element === 0x204) {
    return new Ok(pupil_centroid_y_coordinate);
  } else if (element === 0x205) {
    return new Ok(equivalent_pupil_radius);
  } else if (element === 0x207) {
    return new Ok(corneal_topography_map_type_code_sequence);
  } else if (element === 0x208) {
    return new Ok(vertices_of_the_outline_of_pupil);
  } else if (element === 0x210) {
    return new Ok(corneal_topography_mapping_normals_sequence);
  } else if (element === 0x211) {
    return new Ok(maximum_corneal_curvature_sequence);
  } else if (element === 0x212) {
    return new Ok(maximum_corneal_curvature);
  } else if (element === 0x213) {
    return new Ok(maximum_corneal_curvature_location);
  } else if (element === 0x215) {
    return new Ok(minimum_keratometric_sequence);
  } else if (element === 0x218) {
    return new Ok(simulated_keratometric_cylinder_sequence);
  } else if (element === 0x220) {
    return new Ok(average_corneal_power);
  } else if (element === 0x224) {
    return new Ok(corneal_is_value);
  } else if (element === 0x227) {
    return new Ok(analyzed_area);
  } else if (element === 0x230) {
    return new Ok(surface_regularity_index);
  } else if (element === 0x232) {
    return new Ok(surface_asymmetry_index);
  } else if (element === 0x234) {
    return new Ok(corneal_eccentricity_index);
  } else if (element === 0x236) {
    return new Ok(keratoconus_prediction_index);
  } else if (element === 0x238) {
    return new Ok(decimal_potential_visual_acuity);
  } else if (element === 0x242) {
    return new Ok(corneal_topography_map_quality_evaluation);
  } else if (element === 0x244) {
    return new Ok(source_image_corneal_processed_data_sequence);
  } else if (element === 0x247) {
    return new Ok(corneal_point_location);
  } else if (element === 0x248) {
    return new Ok(corneal_point_estimated);
  } else if (element === 0x249) {
    return new Ok(axial_power);
  } else if (element === 0x250) {
    return new Ok(tangential_power);
  } else if (element === 0x251) {
    return new Ok(refractive_power);
  } else if (element === 0x252) {
    return new Ok(relative_elevation);
  } else if (element === 0x253) {
    return new Ok(corneal_wavefront);
  } else {
    return new Error(undefined);
  }
}

export const imaged_volume_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x1),
  "Imaged Volume Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const imaged_volume_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x2),
  "Imaged Volume Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const imaged_volume_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x3),
  "Imaged Volume Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const total_pixel_matrix_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x6),
  "Total Pixel Matrix Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const total_pixel_matrix_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x7),
  "Total Pixel Matrix Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const total_pixel_matrix_origin_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x8),
  "Total Pixel Matrix Origin Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_label_in_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x10),
  "Specimen Label in Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const focus_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x11),
  "Focus Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const extended_depth_of_field = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x12),
  "Extended Depth of Field",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_focal_planes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x13),
  "Number of Focal Planes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const distance_between_focal_planes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x14),
  "Distance Between Focal Planes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const recommended_absent_pixel_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x15),
  "Recommended Absent Pixel CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const illuminator_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x100),
  "Illuminator Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_orientation_slide = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x102),
  "Image Orientation (Slide)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_6,
);

export const optical_path_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x105),
  "Optical Path Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const optical_path_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x106),
  "Optical Path Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const optical_path_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x107),
  "Optical Path Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const illumination_color_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x108),
  "Illumination Color Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specimen_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x110),
  "Specimen Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const condenser_lens_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x111),
  "Condenser Lens Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const objective_lens_power = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x112),
  "Objective Lens Power",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const objective_lens_numerical_aperture = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x113),
  "Objective Lens Numerical Aperture",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const confocal_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x114),
  "Confocal Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tissue_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x115),
  "Tissue Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const confocal_microscopy_image_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x116),
  "Confocal Microscopy Image Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_acquisition_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x117),
  "Image Acquisition Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const palette_color_lookup_table_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x120),
  "Palette Color Lookup Table Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_image_navigation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x200),
  "Referenced Image Navigation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const top_left_hand_corner_of_localizer_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x201),
  "Top Left Hand Corner of Localizer Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const bottom_right_hand_corner_of_localizer_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x202),
  "Bottom Right Hand Corner of Localizer Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const optical_path_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x207),
  "Optical Path Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const plane_position_slide_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x21A),
  "Plane Position (Slide) Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const column_position_in_total_image_pixel_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x21E),
  "Column Position In Total Image Pixel Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const row_position_in_total_image_pixel_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x21F),
  "Row Position In Total Image Pixel Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1,
);

export const pixel_origin_interpretation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x301),
  "Pixel Origin Interpretation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_optical_paths = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x302),
  "Number of Optical Paths",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const total_pixel_matrix_focal_planes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x48, 0x303),
  "Total Pixel Matrix Focal Planes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

function find_element_in_group_0048(element) {
  if (element === 0x1) {
    return new Ok(imaged_volume_width);
  } else if (element === 0x2) {
    return new Ok(imaged_volume_height);
  } else if (element === 0x3) {
    return new Ok(imaged_volume_depth);
  } else if (element === 0x6) {
    return new Ok(total_pixel_matrix_columns);
  } else if (element === 0x7) {
    return new Ok(total_pixel_matrix_rows);
  } else if (element === 0x8) {
    return new Ok(total_pixel_matrix_origin_sequence);
  } else if (element === 0x10) {
    return new Ok(specimen_label_in_image);
  } else if (element === 0x11) {
    return new Ok(focus_method);
  } else if (element === 0x12) {
    return new Ok(extended_depth_of_field);
  } else if (element === 0x13) {
    return new Ok(number_of_focal_planes);
  } else if (element === 0x14) {
    return new Ok(distance_between_focal_planes);
  } else if (element === 0x15) {
    return new Ok(recommended_absent_pixel_cie_lab_value);
  } else if (element === 0x100) {
    return new Ok(illuminator_type_code_sequence);
  } else if (element === 0x102) {
    return new Ok(image_orientation_slide);
  } else if (element === 0x105) {
    return new Ok(optical_path_sequence);
  } else if (element === 0x106) {
    return new Ok(optical_path_identifier);
  } else if (element === 0x107) {
    return new Ok(optical_path_description);
  } else if (element === 0x108) {
    return new Ok(illumination_color_code_sequence);
  } else if (element === 0x110) {
    return new Ok(specimen_reference_sequence);
  } else if (element === 0x111) {
    return new Ok(condenser_lens_power);
  } else if (element === 0x112) {
    return new Ok(objective_lens_power);
  } else if (element === 0x113) {
    return new Ok(objective_lens_numerical_aperture);
  } else if (element === 0x114) {
    return new Ok(confocal_mode);
  } else if (element === 0x115) {
    return new Ok(tissue_location);
  } else if (element === 0x116) {
    return new Ok(confocal_microscopy_image_frame_type_sequence);
  } else if (element === 0x117) {
    return new Ok(image_acquisition_depth);
  } else if (element === 0x120) {
    return new Ok(palette_color_lookup_table_sequence);
  } else if (element === 0x200) {
    return new Ok(referenced_image_navigation_sequence);
  } else if (element === 0x201) {
    return new Ok(top_left_hand_corner_of_localizer_area);
  } else if (element === 0x202) {
    return new Ok(bottom_right_hand_corner_of_localizer_area);
  } else if (element === 0x207) {
    return new Ok(optical_path_identification_sequence);
  } else if (element === 0x21A) {
    return new Ok(plane_position_slide_sequence);
  } else if (element === 0x21E) {
    return new Ok(column_position_in_total_image_pixel_matrix);
  } else if (element === 0x21F) {
    return new Ok(row_position_in_total_image_pixel_matrix);
  } else if (element === 0x301) {
    return new Ok(pixel_origin_interpretation);
  } else if (element === 0x302) {
    return new Ok(number_of_optical_paths);
  } else if (element === 0x303) {
    return new Ok(total_pixel_matrix_focal_planes);
  } else {
    return new Error(undefined);
  }
}

export const calibration_image = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x4),
  "Calibration Image",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x10),
  "Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const container_component_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x12),
  "Container Component Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const container_component_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x13),
  "Container Component Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const device_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x14),
  "Device Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const container_component_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x15),
  "Container Component Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const device_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x16),
  "Device Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const device_diameter_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x17),
  "Device Diameter Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const device_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x18),
  "Device Volume",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const inter_marker_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x19),
  "Inter-Marker Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const container_component_material = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x1A),
  "Container Component Material",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const container_component_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x1B),
  "Container Component ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const container_component_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x1C),
  "Container Component Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const container_component_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x1D),
  "Container Component Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const container_component_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x1E),
  "Container Component Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const device_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x20),
  "Device Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const long_device_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x50, 0x21),
  "Long Device Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

function find_element_in_group_0050(element) {
  if (element === 0x4) {
    return new Ok(calibration_image);
  } else if (element === 0x10) {
    return new Ok(device_sequence);
  } else if (element === 0x12) {
    return new Ok(container_component_type_code_sequence);
  } else if (element === 0x13) {
    return new Ok(container_component_thickness);
  } else if (element === 0x14) {
    return new Ok(device_length);
  } else if (element === 0x15) {
    return new Ok(container_component_width);
  } else if (element === 0x16) {
    return new Ok(device_diameter);
  } else if (element === 0x17) {
    return new Ok(device_diameter_units);
  } else if (element === 0x18) {
    return new Ok(device_volume);
  } else if (element === 0x19) {
    return new Ok(inter_marker_distance);
  } else if (element === 0x1A) {
    return new Ok(container_component_material);
  } else if (element === 0x1B) {
    return new Ok(container_component_id);
  } else if (element === 0x1C) {
    return new Ok(container_component_length);
  } else if (element === 0x1D) {
    return new Ok(container_component_diameter);
  } else if (element === 0x1E) {
    return new Ok(container_component_description);
  } else if (element === 0x20) {
    return new Ok(device_description);
  } else if (element === 0x21) {
    return new Ok(long_device_description);
  } else {
    return new Error(undefined);
  }
}

export const contrast_bolus_ingredient_percent_by_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x1),
  "Contrast/Bolus Ingredient Percent by Volume",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const oct_focal_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x2),
  "OCT Focal Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const beam_spot_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x3),
  "Beam Spot Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const effective_refractive_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x4),
  "Effective Refractive Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const oct_acquisition_domain = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x6),
  "OCT Acquisition Domain",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const oct_optical_center_wavelength = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x7),
  "OCT Optical Center Wavelength",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const axial_resolution = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x8),
  "Axial Resolution",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const ranging_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x9),
  "Ranging Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const a_line_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x11),
  "A-line Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const a_lines_per_frame = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x12),
  "A-lines Per Frame",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const catheter_rotational_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x13),
  "Catheter Rotational Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const a_line_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x14),
  "A-line Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const mode_of_percutaneous_access_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x16),
  "Mode of Percutaneous Access Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const intravascular_oct_frame_type_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x25),
  "Intravascular OCT Frame Type Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const octz_offset_applied = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x26),
  "OCT Z Offset Applied",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const intravascular_frame_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x27),
  "Intravascular Frame Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const intravascular_longitudinal_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x28),
  "Intravascular Longitudinal Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const intravascular_oct_frame_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x29),
  "Intravascular OCT Frame Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const octz_offset_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x30),
  "OCT Z Offset Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const catheter_direction_of_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x31),
  "Catheter Direction of Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const seam_line_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x33),
  "Seam Line Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const first_a_line_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x34),
  "First A-line Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const seam_line_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x36),
  "Seam Line Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_padded_a_lines = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x38),
  "Number of Padded A-lines",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const interpolation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x39),
  "Interpolation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const refractive_index_applied = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x52, 0x3A),
  "Refractive Index Applied",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_0052(element) {
  if (element === 0x1) {
    return new Ok(contrast_bolus_ingredient_percent_by_volume);
  } else if (element === 0x2) {
    return new Ok(oct_focal_distance);
  } else if (element === 0x3) {
    return new Ok(beam_spot_size);
  } else if (element === 0x4) {
    return new Ok(effective_refractive_index);
  } else if (element === 0x6) {
    return new Ok(oct_acquisition_domain);
  } else if (element === 0x7) {
    return new Ok(oct_optical_center_wavelength);
  } else if (element === 0x8) {
    return new Ok(axial_resolution);
  } else if (element === 0x9) {
    return new Ok(ranging_depth);
  } else if (element === 0x11) {
    return new Ok(a_line_rate);
  } else if (element === 0x12) {
    return new Ok(a_lines_per_frame);
  } else if (element === 0x13) {
    return new Ok(catheter_rotational_rate);
  } else if (element === 0x14) {
    return new Ok(a_line_pixel_spacing);
  } else if (element === 0x16) {
    return new Ok(mode_of_percutaneous_access_sequence);
  } else if (element === 0x25) {
    return new Ok(intravascular_oct_frame_type_sequence);
  } else if (element === 0x26) {
    return new Ok(octz_offset_applied);
  } else if (element === 0x27) {
    return new Ok(intravascular_frame_content_sequence);
  } else if (element === 0x28) {
    return new Ok(intravascular_longitudinal_distance);
  } else if (element === 0x29) {
    return new Ok(intravascular_oct_frame_content_sequence);
  } else if (element === 0x30) {
    return new Ok(octz_offset_correction);
  } else if (element === 0x31) {
    return new Ok(catheter_direction_of_rotation);
  } else if (element === 0x33) {
    return new Ok(seam_line_location);
  } else if (element === 0x34) {
    return new Ok(first_a_line_location);
  } else if (element === 0x36) {
    return new Ok(seam_line_index);
  } else if (element === 0x38) {
    return new Ok(number_of_padded_a_lines);
  } else if (element === 0x39) {
    return new Ok(interpolation_type);
  } else if (element === 0x3A) {
    return new Ok(refractive_index_applied);
  } else {
    return new Error(undefined);
  }
}

export const energy_window_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x10),
  "Energy Window Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_energy_windows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x11),
  "Number of Energy Windows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const energy_window_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x12),
  "Energy Window Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const energy_window_range_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x13),
  "Energy Window Range Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const energy_window_lower_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x14),
  "Energy Window Lower Limit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const energy_window_upper_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x15),
  "Energy Window Upper Limit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radiopharmaceutical_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x16),
  "Radiopharmaceutical Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const residual_syringe_counts = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x17),
  "Residual Syringe Counts",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const energy_window_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x18),
  "Energy Window Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const detector_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x20),
  "Detector Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_detectors = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x21),
  "Number of Detectors",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const detector_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x22),
  "Detector Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const phase_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x30),
  "Phase Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_phases = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x31),
  "Number of Phases",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const phase_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x32),
  "Phase Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_frames_in_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x33),
  "Number of Frames in Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const phase_delay = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x36),
  "Phase Delay",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const pause_between_frames = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x38),
  "Pause Between Frames",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const phase_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x39),
  "Phase Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rotation_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x50),
  "Rotation Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_rotations = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x51),
  "Number of Rotations",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rotation_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x52),
  "Rotation Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_frames_in_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x53),
  "Number of Frames in Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rr_interval_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x60),
  "R-R Interval Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_rr_intervals = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x61),
  "Number of R-R Intervals",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const gated_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x62),
  "Gated Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const data_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x63),
  "Data Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const time_slot_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x70),
  "Time Slot Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_time_slots = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x71),
  "Number of Time Slots",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const time_slot_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x72),
  "Time Slot Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const time_slot_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x73),
  "Time Slot Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const slice_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x80),
  "Slice Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_slices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x81),
  "Number of Slices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const angular_view_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x90),
  "Angular View Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const time_slice_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x100),
  "Time Slice Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_time_slices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x101),
  "Number of Time Slices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const start_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x200),
  "Start Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const type_of_detector_motion = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x202),
  "Type of Detector Motion",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const trigger_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x210),
  "Trigger Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const number_of_triggers_in_phase = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x211),
  "Number of Triggers in Phase",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const view_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x220),
  "View Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const view_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x222),
  "View Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radionuclide_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x300),
  "Radionuclide Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const administration_route_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x302),
  "Administration Route Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiopharmaceutical_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x304),
  "Radiopharmaceutical Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const calibration_data_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x306),
  "Calibration Data Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const energy_window_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x308),
  "Energy Window Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x400),
  "Image ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const patient_orientation_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x410),
  "Patient Orientation Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_orientation_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x412),
  "Patient Orientation Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_gantry_relationship_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x414),
  "Patient Gantry Relationship Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const slice_progression_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x500),
  "Slice Progression Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scan_progression_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x501),
  "Scan Progression Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const series_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1000),
  "Series Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_2,
);

export const units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1001),
  "Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const counts_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1002),
  "Counts Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reprojection_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1004),
  "Reprojection Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const suv_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1006),
  "SUV Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const randoms_correction_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1100),
  "Randoms Correction Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const attenuation_correction_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1101),
  "Attenuation Correction Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const decay_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1102),
  "Decay Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reconstruction_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1103),
  "Reconstruction Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const detector_lines_of_response_used = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1104),
  "Detector Lines of Response Used",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const scatter_correction_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1105),
  "Scatter Correction Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const axial_acceptance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1200),
  "Axial Acceptance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const axial_mash = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1201),
  "Axial Mash",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2,
);

export const transverse_mash = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1202),
  "Transverse Mash",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const detector_element_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1203),
  "Detector Element Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const coincidence_window_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1210),
  "Coincidence Window Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const secondary_counts_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1220),
  "Secondary Counts Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const frame_reference_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1300),
  "Frame Reference Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const primary_prompts_counts_accumulated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1310),
  "Primary (Prompts) Counts Accumulated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const secondary_counts_accumulated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1311),
  "Secondary Counts Accumulated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const slice_sensitivity_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1320),
  "Slice Sensitivity Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const decay_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1321),
  "Decay Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dose_calibration_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1322),
  "Dose Calibration Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const scatter_fraction_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1323),
  "Scatter Fraction Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dead_time_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1324),
  "Dead Time Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const image_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1330),
  "Image Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const counts_included = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1400),
  "Counts Included",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const dead_time_correction_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x54, 0x1401),
  "Dead Time Correction Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_0054(element) {
  if (element === 0x10) {
    return new Ok(energy_window_vector);
  } else if (element === 0x11) {
    return new Ok(number_of_energy_windows);
  } else if (element === 0x12) {
    return new Ok(energy_window_information_sequence);
  } else if (element === 0x13) {
    return new Ok(energy_window_range_sequence);
  } else if (element === 0x14) {
    return new Ok(energy_window_lower_limit);
  } else if (element === 0x15) {
    return new Ok(energy_window_upper_limit);
  } else if (element === 0x16) {
    return new Ok(radiopharmaceutical_information_sequence);
  } else if (element === 0x17) {
    return new Ok(residual_syringe_counts);
  } else if (element === 0x18) {
    return new Ok(energy_window_name);
  } else if (element === 0x20) {
    return new Ok(detector_vector);
  } else if (element === 0x21) {
    return new Ok(number_of_detectors);
  } else if (element === 0x22) {
    return new Ok(detector_information_sequence);
  } else if (element === 0x30) {
    return new Ok(phase_vector);
  } else if (element === 0x31) {
    return new Ok(number_of_phases);
  } else if (element === 0x32) {
    return new Ok(phase_information_sequence);
  } else if (element === 0x33) {
    return new Ok(number_of_frames_in_phase);
  } else if (element === 0x36) {
    return new Ok(phase_delay);
  } else if (element === 0x38) {
    return new Ok(pause_between_frames);
  } else if (element === 0x39) {
    return new Ok(phase_description);
  } else if (element === 0x50) {
    return new Ok(rotation_vector);
  } else if (element === 0x51) {
    return new Ok(number_of_rotations);
  } else if (element === 0x52) {
    return new Ok(rotation_information_sequence);
  } else if (element === 0x53) {
    return new Ok(number_of_frames_in_rotation);
  } else if (element === 0x60) {
    return new Ok(rr_interval_vector);
  } else if (element === 0x61) {
    return new Ok(number_of_rr_intervals);
  } else if (element === 0x62) {
    return new Ok(gated_information_sequence);
  } else if (element === 0x63) {
    return new Ok(data_information_sequence);
  } else if (element === 0x70) {
    return new Ok(time_slot_vector);
  } else if (element === 0x71) {
    return new Ok(number_of_time_slots);
  } else if (element === 0x72) {
    return new Ok(time_slot_information_sequence);
  } else if (element === 0x73) {
    return new Ok(time_slot_time);
  } else if (element === 0x80) {
    return new Ok(slice_vector);
  } else if (element === 0x81) {
    return new Ok(number_of_slices);
  } else if (element === 0x90) {
    return new Ok(angular_view_vector);
  } else if (element === 0x100) {
    return new Ok(time_slice_vector);
  } else if (element === 0x101) {
    return new Ok(number_of_time_slices);
  } else if (element === 0x200) {
    return new Ok(start_angle);
  } else if (element === 0x202) {
    return new Ok(type_of_detector_motion);
  } else if (element === 0x210) {
    return new Ok(trigger_vector);
  } else if (element === 0x211) {
    return new Ok(number_of_triggers_in_phase);
  } else if (element === 0x220) {
    return new Ok(view_code_sequence);
  } else if (element === 0x222) {
    return new Ok(view_modifier_code_sequence);
  } else if (element === 0x300) {
    return new Ok(radionuclide_code_sequence);
  } else if (element === 0x302) {
    return new Ok(administration_route_code_sequence);
  } else if (element === 0x304) {
    return new Ok(radiopharmaceutical_code_sequence);
  } else if (element === 0x306) {
    return new Ok(calibration_data_sequence);
  } else if (element === 0x308) {
    return new Ok(energy_window_number);
  } else if (element === 0x400) {
    return new Ok(image_id);
  } else if (element === 0x410) {
    return new Ok(patient_orientation_code_sequence);
  } else if (element === 0x412) {
    return new Ok(patient_orientation_modifier_code_sequence);
  } else if (element === 0x414) {
    return new Ok(patient_gantry_relationship_code_sequence);
  } else if (element === 0x500) {
    return new Ok(slice_progression_direction);
  } else if (element === 0x501) {
    return new Ok(scan_progression_direction);
  } else if (element === 0x1000) {
    return new Ok(series_type);
  } else if (element === 0x1001) {
    return new Ok(units);
  } else if (element === 0x1002) {
    return new Ok(counts_source);
  } else if (element === 0x1004) {
    return new Ok(reprojection_method);
  } else if (element === 0x1006) {
    return new Ok(suv_type);
  } else if (element === 0x1100) {
    return new Ok(randoms_correction_method);
  } else if (element === 0x1101) {
    return new Ok(attenuation_correction_method);
  } else if (element === 0x1102) {
    return new Ok(decay_correction);
  } else if (element === 0x1103) {
    return new Ok(reconstruction_method);
  } else if (element === 0x1104) {
    return new Ok(detector_lines_of_response_used);
  } else if (element === 0x1105) {
    return new Ok(scatter_correction_method);
  } else if (element === 0x1200) {
    return new Ok(axial_acceptance);
  } else if (element === 0x1201) {
    return new Ok(axial_mash);
  } else if (element === 0x1202) {
    return new Ok(transverse_mash);
  } else if (element === 0x1203) {
    return new Ok(detector_element_size);
  } else if (element === 0x1210) {
    return new Ok(coincidence_window_width);
  } else if (element === 0x1220) {
    return new Ok(secondary_counts_type);
  } else if (element === 0x1300) {
    return new Ok(frame_reference_time);
  } else if (element === 0x1310) {
    return new Ok(primary_prompts_counts_accumulated);
  } else if (element === 0x1311) {
    return new Ok(secondary_counts_accumulated);
  } else if (element === 0x1320) {
    return new Ok(slice_sensitivity_factor);
  } else if (element === 0x1321) {
    return new Ok(decay_factor);
  } else if (element === 0x1322) {
    return new Ok(dose_calibration_factor);
  } else if (element === 0x1323) {
    return new Ok(scatter_fraction_factor);
  } else if (element === 0x1324) {
    return new Ok(dead_time_factor);
  } else if (element === 0x1330) {
    return new Ok(image_index);
  } else if (element === 0x1400) {
    return new Ok(counts_included);
  } else if (element === 0x1401) {
    return new Ok(dead_time_correction_flag);
  } else {
    return new Error(undefined);
  }
}

export const histogram_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x60, 0x3000),
  "Histogram Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const histogram_number_of_bins = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x60, 0x3002),
  "Histogram Number of Bins",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const histogram_first_bin_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x60, 0x3004),
  "Histogram First Bin Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const histogram_last_bin_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x60, 0x3006),
  "Histogram Last Bin Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new UnsignedShort(),
    /* @__PURE__ */ new SignedShort(),
  ]),
  vm_1,
);

export const histogram_bin_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x60, 0x3008),
  "Histogram Bin Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const histogram_explanation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x60, 0x3010),
  "Histogram Explanation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const histogram_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x60, 0x3020),
  "Histogram Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

function find_element_in_group_0060(element) {
  if (element === 0x3000) {
    return new Ok(histogram_sequence);
  } else if (element === 0x3002) {
    return new Ok(histogram_number_of_bins);
  } else if (element === 0x3004) {
    return new Ok(histogram_first_bin_value);
  } else if (element === 0x3006) {
    return new Ok(histogram_last_bin_value);
  } else if (element === 0x3008) {
    return new Ok(histogram_bin_width);
  } else if (element === 0x3010) {
    return new Ok(histogram_explanation);
  } else if (element === 0x3020) {
    return new Ok(histogram_data);
  } else {
    return new Error(undefined);
  }
}

export const segmentation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x1),
  "Segmentation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const segment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x2),
  "Segment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segmented_property_category_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x3),
  "Segmented Property Category Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x4),
  "Segment Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const segment_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x5),
  "Segment Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const segment_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x6),
  "Segment Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const segmentation_algorithm_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x7),
  "Segmentation Algorithm Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_algorithm_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x8),
  "Segment Algorithm Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const segment_algorithm_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x9),
  "Segment Algorithm Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const segment_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0xA),
  "Segment Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_segment_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0xB),
  "Referenced Segment Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const recommended_display_grayscale_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0xC),
  "Recommended Display Grayscale Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const recommended_display_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0xD),
  "Recommended Display CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const maximum_fractional_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0xE),
  "Maximum Fractional Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const segmented_property_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0xF),
  "Segmented Property Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segmentation_fractional_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x10),
  "Segmentation Fractional Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const segmented_property_type_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x11),
  "Segmented Property Type Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const used_segments_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x12),
  "Used Segments Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segments_overlap = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x13),
  "Segments Overlap",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tracking_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x20),
  "Tracking ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const tracking_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x62, 0x21),
  "Tracking UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

function find_element_in_group_0062(element) {
  if (element === 0x1) {
    return new Ok(segmentation_type);
  } else if (element === 0x2) {
    return new Ok(segment_sequence);
  } else if (element === 0x3) {
    return new Ok(segmented_property_category_code_sequence);
  } else if (element === 0x4) {
    return new Ok(segment_number);
  } else if (element === 0x5) {
    return new Ok(segment_label);
  } else if (element === 0x6) {
    return new Ok(segment_description);
  } else if (element === 0x7) {
    return new Ok(segmentation_algorithm_identification_sequence);
  } else if (element === 0x8) {
    return new Ok(segment_algorithm_type);
  } else if (element === 0x9) {
    return new Ok(segment_algorithm_name);
  } else if (element === 0xA) {
    return new Ok(segment_identification_sequence);
  } else if (element === 0xB) {
    return new Ok(referenced_segment_number);
  } else if (element === 0xC) {
    return new Ok(recommended_display_grayscale_value);
  } else if (element === 0xD) {
    return new Ok(recommended_display_cie_lab_value);
  } else if (element === 0xE) {
    return new Ok(maximum_fractional_value);
  } else if (element === 0xF) {
    return new Ok(segmented_property_type_code_sequence);
  } else if (element === 0x10) {
    return new Ok(segmentation_fractional_type);
  } else if (element === 0x11) {
    return new Ok(segmented_property_type_modifier_code_sequence);
  } else if (element === 0x12) {
    return new Ok(used_segments_sequence);
  } else if (element === 0x13) {
    return new Ok(segments_overlap);
  } else if (element === 0x20) {
    return new Ok(tracking_id);
  } else if (element === 0x21) {
    return new Ok(tracking_uid);
  } else {
    return new Error(undefined);
  }
}

export const deformable_registration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0x2),
  "Deformable Registration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0x3),
  "Source Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const deformable_registration_grid_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0x5),
  "Deformable Registration Grid Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const grid_dimensions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0x7),
  "Grid Dimensions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_3,
);

export const grid_resolution = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0x8),
  "Grid Resolution",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const vector_grid_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0x9),
  "Vector Grid Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const pre_deformation_matrix_registration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0xF),
  "Pre Deformation Matrix Registration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const post_deformation_matrix_registration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x64, 0x10),
  "Post Deformation Matrix Registration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0064(element) {
  if (element === 0x2) {
    return new Ok(deformable_registration_sequence);
  } else if (element === 0x3) {
    return new Ok(source_frame_of_reference_uid);
  } else if (element === 0x5) {
    return new Ok(deformable_registration_grid_sequence);
  } else if (element === 0x7) {
    return new Ok(grid_dimensions);
  } else if (element === 0x8) {
    return new Ok(grid_resolution);
  } else if (element === 0x9) {
    return new Ok(vector_grid_data);
  } else if (element === 0xF) {
    return new Ok(pre_deformation_matrix_registration_sequence);
  } else if (element === 0x10) {
    return new Ok(post_deformation_matrix_registration_sequence);
  } else {
    return new Error(undefined);
  }
}

export const number_of_surfaces = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x1),
  "Number of Surfaces",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const surface_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x2),
  "Surface Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surface_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x3),
  "Surface Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const surface_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x4),
  "Surface Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const surface_processing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x9),
  "Surface Processing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const surface_processing_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0xA),
  "Surface Processing Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const surface_processing_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0xB),
  "Surface Processing Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const recommended_presentation_opacity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0xC),
  "Recommended Presentation Opacity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const recommended_presentation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0xD),
  "Recommended Presentation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const finite_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0xE),
  "Finite Volume",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const manifold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x10),
  "Manifold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const surface_points_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x11),
  "Surface Points Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surface_points_normals_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x12),
  "Surface Points Normals Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surface_mesh_primitives_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x13),
  "Surface Mesh Primitives Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_surface_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x15),
  "Number of Surface Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const point_coordinates_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x16),
  "Point Coordinates Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const point_position_accuracy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x17),
  "Point Position Accuracy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const mean_point_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x18),
  "Mean Point Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const maximum_point_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x19),
  "Maximum Point Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const points_bounding_box_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x1A),
  "Points Bounding Box Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_6,
);

export const axis_of_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x1B),
  "Axis of Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const center_of_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x1C),
  "Center of Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const number_of_vectors = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x1E),
  "Number of Vectors",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const vector_dimensionality = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x1F),
  "Vector Dimensionality",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const vector_accuracy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x20),
  "Vector Accuracy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const vector_coordinate_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x21),
  "Vector Coordinate Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const double_point_coordinates_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x22),
  "Double Point Coordinates Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherDoubleString()]),
  vm_1,
);

export const triangle_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x23),
  "Triangle Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const edge_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x24),
  "Edge Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const vertex_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x25),
  "Vertex Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const triangle_strip_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x26),
  "Triangle Strip Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const triangle_fan_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x27),
  "Triangle Fan Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const line_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x28),
  "Line Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const primitive_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x29),
  "Primitive Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const surface_count = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x2A),
  "Surface Count",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const referenced_surface_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x2B),
  "Referenced Surface Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_surface_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x2C),
  "Referenced Surface Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const segment_surface_generation_algorithm_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x2D),
  "Segment Surface Generation Algorithm Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_surface_source_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x2E),
  "Segment Surface Source Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const algorithm_family_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x2F),
  "Algorithm Family Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const algorithm_name_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x30),
  "Algorithm Name Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const algorithm_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x31),
  "Algorithm Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const algorithm_parameters = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x32),
  "Algorithm Parameters",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const facet_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x34),
  "Facet Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surface_processing_algorithm_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x35),
  "Surface Processing Algorithm Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const algorithm_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x36),
  "Algorithm Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const recommended_point_radius = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x37),
  "Recommended Point Radius",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const recommended_line_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x38),
  "Recommended Line Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const long_primitive_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x40),
  "Long Primitive Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherLongString()]),
  vm_1,
);

export const long_triangle_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x41),
  "Long Triangle Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherLongString()]),
  vm_1,
);

export const long_edge_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x42),
  "Long Edge Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherLongString()]),
  vm_1,
);

export const long_vertex_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x43),
  "Long Vertex Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherLongString()]),
  vm_1,
);

export const track_set_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x101),
  "Track Set Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const track_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x102),
  "Track Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recommended_display_cie_lab_value_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x103),
  "Recommended Display CIELab Value List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const tracking_algorithm_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x104),
  "Tracking Algorithm Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const track_set_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x105),
  "Track Set Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const track_set_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x106),
  "Track Set Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const track_set_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x107),
  "Track Set Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const track_set_anatomical_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x108),
  "Track Set Anatomical Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x121),
  "Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const track_set_statistics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x124),
  "Track Set Statistics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const floating_point_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x125),
  "Floating Point Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const track_point_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x129),
  "Track Point Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherLongString()]),
  vm_1,
);

export const track_statistics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x130),
  "Track Statistics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measurement_values_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x132),
  "Measurement Values Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const diffusion_acquisition_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x133),
  "Diffusion Acquisition Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const diffusion_model_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x66, 0x134),
  "Diffusion Model Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0066(element) {
  if (element === 0x1) {
    return new Ok(number_of_surfaces);
  } else if (element === 0x2) {
    return new Ok(surface_sequence);
  } else if (element === 0x3) {
    return new Ok(surface_number);
  } else if (element === 0x4) {
    return new Ok(surface_comments);
  } else if (element === 0x9) {
    return new Ok(surface_processing);
  } else if (element === 0xA) {
    return new Ok(surface_processing_ratio);
  } else if (element === 0xB) {
    return new Ok(surface_processing_description);
  } else if (element === 0xC) {
    return new Ok(recommended_presentation_opacity);
  } else if (element === 0xD) {
    return new Ok(recommended_presentation_type);
  } else if (element === 0xE) {
    return new Ok(finite_volume);
  } else if (element === 0x10) {
    return new Ok(manifold);
  } else if (element === 0x11) {
    return new Ok(surface_points_sequence);
  } else if (element === 0x12) {
    return new Ok(surface_points_normals_sequence);
  } else if (element === 0x13) {
    return new Ok(surface_mesh_primitives_sequence);
  } else if (element === 0x15) {
    return new Ok(number_of_surface_points);
  } else if (element === 0x16) {
    return new Ok(point_coordinates_data);
  } else if (element === 0x17) {
    return new Ok(point_position_accuracy);
  } else if (element === 0x18) {
    return new Ok(mean_point_distance);
  } else if (element === 0x19) {
    return new Ok(maximum_point_distance);
  } else if (element === 0x1A) {
    return new Ok(points_bounding_box_coordinates);
  } else if (element === 0x1B) {
    return new Ok(axis_of_rotation);
  } else if (element === 0x1C) {
    return new Ok(center_of_rotation);
  } else if (element === 0x1E) {
    return new Ok(number_of_vectors);
  } else if (element === 0x1F) {
    return new Ok(vector_dimensionality);
  } else if (element === 0x20) {
    return new Ok(vector_accuracy);
  } else if (element === 0x21) {
    return new Ok(vector_coordinate_data);
  } else if (element === 0x22) {
    return new Ok(double_point_coordinates_data);
  } else if (element === 0x23) {
    return new Ok(triangle_point_index_list);
  } else if (element === 0x24) {
    return new Ok(edge_point_index_list);
  } else if (element === 0x25) {
    return new Ok(vertex_point_index_list);
  } else if (element === 0x26) {
    return new Ok(triangle_strip_sequence);
  } else if (element === 0x27) {
    return new Ok(triangle_fan_sequence);
  } else if (element === 0x28) {
    return new Ok(line_sequence);
  } else if (element === 0x29) {
    return new Ok(primitive_point_index_list);
  } else if (element === 0x2A) {
    return new Ok(surface_count);
  } else if (element === 0x2B) {
    return new Ok(referenced_surface_sequence);
  } else if (element === 0x2C) {
    return new Ok(referenced_surface_number);
  } else if (element === 0x2D) {
    return new Ok(segment_surface_generation_algorithm_identification_sequence);
  } else if (element === 0x2E) {
    return new Ok(segment_surface_source_instance_sequence);
  } else if (element === 0x2F) {
    return new Ok(algorithm_family_code_sequence);
  } else if (element === 0x30) {
    return new Ok(algorithm_name_code_sequence);
  } else if (element === 0x31) {
    return new Ok(algorithm_version);
  } else if (element === 0x32) {
    return new Ok(algorithm_parameters);
  } else if (element === 0x34) {
    return new Ok(facet_sequence);
  } else if (element === 0x35) {
    return new Ok(surface_processing_algorithm_identification_sequence);
  } else if (element === 0x36) {
    return new Ok(algorithm_name);
  } else if (element === 0x37) {
    return new Ok(recommended_point_radius);
  } else if (element === 0x38) {
    return new Ok(recommended_line_thickness);
  } else if (element === 0x40) {
    return new Ok(long_primitive_point_index_list);
  } else if (element === 0x41) {
    return new Ok(long_triangle_point_index_list);
  } else if (element === 0x42) {
    return new Ok(long_edge_point_index_list);
  } else if (element === 0x43) {
    return new Ok(long_vertex_point_index_list);
  } else if (element === 0x101) {
    return new Ok(track_set_sequence);
  } else if (element === 0x102) {
    return new Ok(track_sequence);
  } else if (element === 0x103) {
    return new Ok(recommended_display_cie_lab_value_list);
  } else if (element === 0x104) {
    return new Ok(tracking_algorithm_identification_sequence);
  } else if (element === 0x105) {
    return new Ok(track_set_number);
  } else if (element === 0x106) {
    return new Ok(track_set_label);
  } else if (element === 0x107) {
    return new Ok(track_set_description);
  } else if (element === 0x108) {
    return new Ok(track_set_anatomical_type_code_sequence);
  } else if (element === 0x121) {
    return new Ok(measurements_sequence);
  } else if (element === 0x124) {
    return new Ok(track_set_statistics_sequence);
  } else if (element === 0x125) {
    return new Ok(floating_point_values);
  } else if (element === 0x129) {
    return new Ok(track_point_index_list);
  } else if (element === 0x130) {
    return new Ok(track_statistics_sequence);
  } else if (element === 0x132) {
    return new Ok(measurement_values_sequence);
  } else if (element === 0x133) {
    return new Ok(diffusion_acquisition_code_sequence);
  } else if (element === 0x134) {
    return new Ok(diffusion_model_code_sequence);
  } else {
    return new Error(undefined);
  }
}

export const implant_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6210),
  "Implant Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const implant_template_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6221),
  "Implant Template Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const replaced_implant_template_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6222),
  "Replaced Implant Template Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6223),
  "Implant Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const derivation_implant_template_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6224),
  "Derivation Implant Template Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const original_implant_template_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6225),
  "Original Implant Template Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const effective_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6226),
  "Effective DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const implant_target_anatomy_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6230),
  "Implant Target Anatomy Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const information_from_manufacturer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6260),
  "Information From Manufacturer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const notification_from_manufacturer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6265),
  "Notification From Manufacturer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const information_issue_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6270),
  "Information Issue DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const information_summary = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6280),
  "Information Summary",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const implant_regulatory_disapproval_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62A0),
  "Implant Regulatory Disapproval Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const overall_template_spatial_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62A5),
  "Overall Template Spatial Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const hpgl_document_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62C0),
  "HPGL Document Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const hpgl_document_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62D0),
  "HPGL Document ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const hpgl_document_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62D5),
  "HPGL Document Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const view_orientation_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62E0),
  "View Orientation Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const view_orientation_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62F0),
  "View Orientation Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const hpgl_document_scaling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x62F2),
  "HPGL Document Scaling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const hpgl_document = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6300),
  "HPGL Document",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const hpgl_contour_pen_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6310),
  "HPGL Contour Pen Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const hpgl_pen_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6320),
  "HPGL Pen Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const hpgl_pen_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6330),
  "HPGL Pen Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const hpgl_pen_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6340),
  "HPGL Pen Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const hpgl_pen_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6345),
  "HPGL Pen Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const recommended_rotation_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6346),
  "Recommended Rotation Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const bounding_rectangle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6347),
  "Bounding Rectangle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const implant_template_3d_model_surface_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6350),
  "Implant Template 3D Model Surface Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const surface_model_description_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6360),
  "Surface Model Description Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surface_model_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6380),
  "Surface Model Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const surface_model_scaling_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6390),
  "Surface Model Scaling Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const materials_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63A0),
  "Materials Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const coating_materials_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63A4),
  "Coating Materials Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63A8),
  "Implant Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fixation_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63AC),
  "Fixation Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mating_feature_sets_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63B0),
  "Mating Feature Sets Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mating_feature_set_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63C0),
  "Mating Feature Set ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const mating_feature_set_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63D0),
  "Mating Feature Set Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const mating_feature_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63E0),
  "Mating Feature Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mating_feature_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x63F0),
  "Mating Feature ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const mating_feature_degree_of_freedom_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6400),
  "Mating Feature Degree of Freedom Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const degree_of_freedom_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6410),
  "Degree of Freedom ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const degree_of_freedom_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6420),
  "Degree of Freedom Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const two_d_mating_feature_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6430),
  "2D Mating Feature Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_hpgl_document_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6440),
  "Referenced HPGL Document ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const two_d_mating_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6450),
  "2D Mating Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const two_d_mating_axes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6460),
  "2D Mating Axes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const two_d_degree_of_freedom_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6470),
  "2D Degree of Freedom Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const three_d_degree_of_freedom_axis = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6490),
  "3D Degree of Freedom Axis",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const range_of_freedom = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x64A0),
  "Range of Freedom",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const three_d_mating_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x64C0),
  "3D Mating Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const three_d_mating_axes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x64D0),
  "3D Mating Axes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  /* @__PURE__ */ new ValueMultiplicity(9, /* @__PURE__ */ new Some(9)),
);

export const two_d_degree_of_freedom_axis = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x64F0),
  "2D Degree of Freedom Axis",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const planning_landmark_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6500),
  "Planning Landmark Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const planning_landmark_line_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6510),
  "Planning Landmark Line Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const planning_landmark_plane_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6520),
  "Planning Landmark Plane Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const planning_landmark_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6530),
  "Planning Landmark ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const planning_landmark_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6540),
  "Planning Landmark Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const planning_landmark_identification_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6545),
  "Planning Landmark Identification Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const two_d_point_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6550),
  "2D Point Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const two_d_point_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6560),
  "2D Point Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const three_d_point_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6590),
  "3D Point Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const two_d_line_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x65A0),
  "2D Line Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const two_d_line_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x65B0),
  "2D Line Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const three_d_line_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x65D0),
  "3D Line Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_6,
);

export const two_d_plane_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x65E0),
  "2D Plane Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const two_d_plane_intersection = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x65F0),
  "2D Plane Intersection",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const three_d_plane_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6610),
  "3D Plane Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const three_d_plane_normal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x6620),
  "3D Plane Normal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const model_modification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x7001),
  "Model Modification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const model_mirroring = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x7002),
  "Model Mirroring",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const model_usage_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x7003),
  "Model Usage Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const model_group_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x7004),
  "Model Group UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const relative_uri_reference_within_encapsulated_document = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x68, 0x7005),
  "Relative URI Reference Within Encapsulated Document",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

function find_element_in_group_0068(element) {
  if (element === 0x6210) {
    return new Ok(implant_size);
  } else if (element === 0x6221) {
    return new Ok(implant_template_version);
  } else if (element === 0x6222) {
    return new Ok(replaced_implant_template_sequence);
  } else if (element === 0x6223) {
    return new Ok(implant_type);
  } else if (element === 0x6224) {
    return new Ok(derivation_implant_template_sequence);
  } else if (element === 0x6225) {
    return new Ok(original_implant_template_sequence);
  } else if (element === 0x6226) {
    return new Ok(effective_date_time);
  } else if (element === 0x6230) {
    return new Ok(implant_target_anatomy_sequence);
  } else if (element === 0x6260) {
    return new Ok(information_from_manufacturer_sequence);
  } else if (element === 0x6265) {
    return new Ok(notification_from_manufacturer_sequence);
  } else if (element === 0x6270) {
    return new Ok(information_issue_date_time);
  } else if (element === 0x6280) {
    return new Ok(information_summary);
  } else if (element === 0x62A0) {
    return new Ok(implant_regulatory_disapproval_code_sequence);
  } else if (element === 0x62A5) {
    return new Ok(overall_template_spatial_tolerance);
  } else if (element === 0x62C0) {
    return new Ok(hpgl_document_sequence);
  } else if (element === 0x62D0) {
    return new Ok(hpgl_document_id);
  } else if (element === 0x62D5) {
    return new Ok(hpgl_document_label);
  } else if (element === 0x62E0) {
    return new Ok(view_orientation_code_sequence);
  } else if (element === 0x62F0) {
    return new Ok(view_orientation_modifier_code_sequence);
  } else if (element === 0x62F2) {
    return new Ok(hpgl_document_scaling);
  } else if (element === 0x6300) {
    return new Ok(hpgl_document);
  } else if (element === 0x6310) {
    return new Ok(hpgl_contour_pen_number);
  } else if (element === 0x6320) {
    return new Ok(hpgl_pen_sequence);
  } else if (element === 0x6330) {
    return new Ok(hpgl_pen_number);
  } else if (element === 0x6340) {
    return new Ok(hpgl_pen_label);
  } else if (element === 0x6345) {
    return new Ok(hpgl_pen_description);
  } else if (element === 0x6346) {
    return new Ok(recommended_rotation_point);
  } else if (element === 0x6347) {
    return new Ok(bounding_rectangle);
  } else if (element === 0x6350) {
    return new Ok(implant_template_3d_model_surface_number);
  } else if (element === 0x6360) {
    return new Ok(surface_model_description_sequence);
  } else if (element === 0x6380) {
    return new Ok(surface_model_label);
  } else if (element === 0x6390) {
    return new Ok(surface_model_scaling_factor);
  } else if (element === 0x63A0) {
    return new Ok(materials_code_sequence);
  } else if (element === 0x63A4) {
    return new Ok(coating_materials_code_sequence);
  } else if (element === 0x63A8) {
    return new Ok(implant_type_code_sequence);
  } else if (element === 0x63AC) {
    return new Ok(fixation_method_code_sequence);
  } else if (element === 0x63B0) {
    return new Ok(mating_feature_sets_sequence);
  } else if (element === 0x63C0) {
    return new Ok(mating_feature_set_id);
  } else if (element === 0x63D0) {
    return new Ok(mating_feature_set_label);
  } else if (element === 0x63E0) {
    return new Ok(mating_feature_sequence);
  } else if (element === 0x63F0) {
    return new Ok(mating_feature_id);
  } else if (element === 0x6400) {
    return new Ok(mating_feature_degree_of_freedom_sequence);
  } else if (element === 0x6410) {
    return new Ok(degree_of_freedom_id);
  } else if (element === 0x6420) {
    return new Ok(degree_of_freedom_type);
  } else if (element === 0x6430) {
    return new Ok(two_d_mating_feature_coordinates_sequence);
  } else if (element === 0x6440) {
    return new Ok(referenced_hpgl_document_id);
  } else if (element === 0x6450) {
    return new Ok(two_d_mating_point);
  } else if (element === 0x6460) {
    return new Ok(two_d_mating_axes);
  } else if (element === 0x6470) {
    return new Ok(two_d_degree_of_freedom_sequence);
  } else if (element === 0x6490) {
    return new Ok(three_d_degree_of_freedom_axis);
  } else if (element === 0x64A0) {
    return new Ok(range_of_freedom);
  } else if (element === 0x64C0) {
    return new Ok(three_d_mating_point);
  } else if (element === 0x64D0) {
    return new Ok(three_d_mating_axes);
  } else if (element === 0x64F0) {
    return new Ok(two_d_degree_of_freedom_axis);
  } else if (element === 0x6500) {
    return new Ok(planning_landmark_point_sequence);
  } else if (element === 0x6510) {
    return new Ok(planning_landmark_line_sequence);
  } else if (element === 0x6520) {
    return new Ok(planning_landmark_plane_sequence);
  } else if (element === 0x6530) {
    return new Ok(planning_landmark_id);
  } else if (element === 0x6540) {
    return new Ok(planning_landmark_description);
  } else if (element === 0x6545) {
    return new Ok(planning_landmark_identification_code_sequence);
  } else if (element === 0x6550) {
    return new Ok(two_d_point_coordinates_sequence);
  } else if (element === 0x6560) {
    return new Ok(two_d_point_coordinates);
  } else if (element === 0x6590) {
    return new Ok(three_d_point_coordinates);
  } else if (element === 0x65A0) {
    return new Ok(two_d_line_coordinates_sequence);
  } else if (element === 0x65B0) {
    return new Ok(two_d_line_coordinates);
  } else if (element === 0x65D0) {
    return new Ok(three_d_line_coordinates);
  } else if (element === 0x65E0) {
    return new Ok(two_d_plane_coordinates_sequence);
  } else if (element === 0x65F0) {
    return new Ok(two_d_plane_intersection);
  } else if (element === 0x6610) {
    return new Ok(three_d_plane_origin);
  } else if (element === 0x6620) {
    return new Ok(three_d_plane_normal);
  } else if (element === 0x7001) {
    return new Ok(model_modification);
  } else if (element === 0x7002) {
    return new Ok(model_mirroring);
  } else if (element === 0x7003) {
    return new Ok(model_usage_code_sequence);
  } else if (element === 0x7004) {
    return new Ok(model_group_uid);
  } else if (element === 0x7005) {
    return new Ok(relative_uri_reference_within_encapsulated_document);
  } else {
    return new Error(undefined);
  }
}

export const annotation_coordinate_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x1),
  "Annotation Coordinate Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const annotation_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x2),
  "Annotation Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const annotation_group_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x3),
  "Annotation Group UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const annotation_group_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x5),
  "Annotation Group Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const annotation_group_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x6),
  "Annotation Group Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const annotation_group_generation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x7),
  "Annotation Group Generation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const annotation_group_algorithm_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x8),
  "Annotation Group Algorithm Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const annotation_property_category_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x9),
  "Annotation Property Category Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const annotation_property_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0xA),
  "Annotation Property Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const annotation_property_type_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0xB),
  "Annotation Property Type Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_annotations = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0xC),
  "Number of Annotations",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const annotation_applies_to_all_optical_paths = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0xD),
  "Annotation Applies to All Optical Paths",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_optical_path_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0xE),
  "Referenced Optical Path Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const annotation_applies_to_all_z_planes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0xF),
  "Annotation Applies to All Z Planes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const common_z_coordinate_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x10),
  "Common Z Coordinate Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const annotation_index_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6A, 0x11),
  "Annotation Index List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherLongString()]),
  vm_1,
);

function find_element_in_group_006a(element) {
  if (element === 0x1) {
    return new Ok(annotation_coordinate_type);
  } else if (element === 0x2) {
    return new Ok(annotation_group_sequence);
  } else if (element === 0x3) {
    return new Ok(annotation_group_uid);
  } else if (element === 0x5) {
    return new Ok(annotation_group_label);
  } else if (element === 0x6) {
    return new Ok(annotation_group_description);
  } else if (element === 0x7) {
    return new Ok(annotation_group_generation_type);
  } else if (element === 0x8) {
    return new Ok(annotation_group_algorithm_identification_sequence);
  } else if (element === 0x9) {
    return new Ok(annotation_property_category_code_sequence);
  } else if (element === 0xA) {
    return new Ok(annotation_property_type_code_sequence);
  } else if (element === 0xB) {
    return new Ok(annotation_property_type_modifier_code_sequence);
  } else if (element === 0xC) {
    return new Ok(number_of_annotations);
  } else if (element === 0xD) {
    return new Ok(annotation_applies_to_all_optical_paths);
  } else if (element === 0xE) {
    return new Ok(referenced_optical_path_identifier);
  } else if (element === 0xF) {
    return new Ok(annotation_applies_to_all_z_planes);
  } else if (element === 0x10) {
    return new Ok(common_z_coordinate_value);
  } else if (element === 0x11) {
    return new Ok(annotation_index_list);
  } else {
    return new Error(undefined);
  }
}

export const graphic_annotation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1),
  "Graphic Annotation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const graphic_layer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x2),
  "Graphic Layer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const bounding_box_annotation_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x3),
  "Bounding Box Annotation Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const anchor_point_annotation_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x4),
  "Anchor Point Annotation Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const graphic_annotation_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x5),
  "Graphic Annotation Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const unformatted_text_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x6),
  "Unformatted Text Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const text_object_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x8),
  "Text Object Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const graphic_object_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x9),
  "Graphic Object Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const bounding_box_top_left_hand_corner = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x10),
  "Bounding Box Top Left Hand Corner",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const bounding_box_bottom_right_hand_corner = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x11),
  "Bounding Box Bottom Right Hand Corner",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const bounding_box_text_horizontal_justification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x12),
  "Bounding Box Text Horizontal Justification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const anchor_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x14),
  "Anchor Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const anchor_point_visibility = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x15),
  "Anchor Point Visibility",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const graphic_dimensions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x20),
  "Graphic Dimensions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_graphic_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x21),
  "Number of Graphic Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const graphic_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x22),
  "Graphic Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2_to_n,
);

export const graphic_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x23),
  "Graphic Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const graphic_filled = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x24),
  "Graphic Filled",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_rotation_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x40),
  "Image Rotation (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const image_horizontal_flip = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x41),
  "Image Horizontal Flip",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_rotation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x42),
  "Image Rotation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const displayed_area_top_left_hand_corner_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x50),
  "Displayed Area Top Left Hand Corner (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const displayed_area_bottom_right_hand_corner_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x51),
  "Displayed Area Bottom Right Hand Corner (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const displayed_area_top_left_hand_corner = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x52),
  "Displayed Area Top Left Hand Corner",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_2,
);

export const displayed_area_bottom_right_hand_corner = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x53),
  "Displayed Area Bottom Right Hand Corner",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_2,
);

export const displayed_area_selection_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x5A),
  "Displayed Area Selection Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const graphic_layer_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x60),
  "Graphic Layer Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const graphic_layer_order = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x62),
  "Graphic Layer Order",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const graphic_layer_recommended_display_grayscale_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x66),
  "Graphic Layer Recommended Display Grayscale Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const graphic_layer_recommended_display_rgb_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x67),
  "Graphic Layer Recommended Display RGB Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const graphic_layer_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x68),
  "Graphic Layer Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const content_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x80),
  "Content Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const content_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x81),
  "Content Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const presentation_creation_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x82),
  "Presentation Creation Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const presentation_creation_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x83),
  "Presentation Creation Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const content_creator_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x84),
  "Content Creator's Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const content_creator_identification_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x86),
  "Content Creator's Identification Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const alternate_content_description_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x87),
  "Alternate Content Description Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const presentation_size_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x100),
  "Presentation Size Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const presentation_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x101),
  "Presentation Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const presentation_pixel_aspect_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x102),
  "Presentation Pixel Aspect Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_2,
);

export const presentation_pixel_magnification_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x103),
  "Presentation Pixel Magnification Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const graphic_group_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x207),
  "Graphic Group Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const graphic_group_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x208),
  "Graphic Group Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const compound_graphic_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x209),
  "Compound Graphic Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const compound_graphic_instance_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x226),
  "Compound Graphic Instance ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const font_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x227),
  "Font Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const font_name_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x228),
  "Font Name Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const css_font_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x229),
  "CSS Font Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const rotation_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x230),
  "Rotation Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const text_style_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x231),
  "Text Style Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const line_style_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x232),
  "Line Style Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fill_style_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x233),
  "Fill Style Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const graphic_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x234),
  "Graphic Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const text_color_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x241),
  "Text Color CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const horizontal_alignment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x242),
  "Horizontal Alignment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const vertical_alignment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x243),
  "Vertical Alignment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const shadow_style = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x244),
  "Shadow Style",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const shadow_offset_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x245),
  "Shadow Offset X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const shadow_offset_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x246),
  "Shadow Offset Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const shadow_color_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x247),
  "Shadow Color CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const underlined = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x248),
  "Underlined",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const bold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x249),
  "Bold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const italic = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x250),
  "Italic",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pattern_on_color_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x251),
  "Pattern On Color CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const pattern_off_color_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x252),
  "Pattern Off Color CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const line_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x253),
  "Line Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const line_dashing_style = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x254),
  "Line Dashing Style",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const line_pattern = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x255),
  "Line Pattern",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const fill_pattern = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x256),
  "Fill Pattern",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const fill_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x257),
  "Fill Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const shadow_opacity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x258),
  "Shadow Opacity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const gap_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x261),
  "Gap Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const diameter_of_visibility = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x262),
  "Diameter of Visibility",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const rotation_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x273),
  "Rotation Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const tick_alignment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x274),
  "Tick Alignment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const show_tick_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x278),
  "Show Tick Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const tick_label_alignment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x279),
  "Tick Label Alignment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const compound_graphic_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x282),
  "Compound Graphic Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pattern_on_opacity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x284),
  "Pattern On Opacity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const pattern_off_opacity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x285),
  "Pattern Off Opacity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const major_ticks_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x287),
  "Major Ticks Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const tick_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x288),
  "Tick Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const tick_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x289),
  "Tick Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const compound_graphic_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x294),
  "Compound Graphic Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const graphic_group_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x295),
  "Graphic Group ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const shape_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x306),
  "Shape Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const registration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x308),
  "Registration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const matrix_registration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x309),
  "Matrix Registration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const matrix_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x30A),
  "Matrix Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_of_reference_to_displayed_coordinate_system_transformation_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x30B),
  "Frame of Reference to Displayed Coordinate System Transformation Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  /* @__PURE__ */ new ValueMultiplicity(16, /* @__PURE__ */ new Some(16)),
);

export const frame_of_reference_transformation_matrix_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x30C),
  "Frame of Reference Transformation Matrix Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const registration_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x30D),
  "Registration Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fiducial_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x30F),
  "Fiducial Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const fiducial_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x310),
  "Fiducial Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const fiducial_identifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x311),
  "Fiducial Identifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contour_uncertainty_radius = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x312),
  "Contour Uncertainty Radius",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const used_fiducials_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x314),
  "Used Fiducials Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const used_rt_structure_set_roi_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x315),
  "Used RT Structure Set ROI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const graphic_coordinates_data_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x318),
  "Graphic Coordinates Data Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fiducial_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x31A),
  "Fiducial UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_fiducial_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x31B),
  "Referenced Fiducial UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const fiducial_set_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x31C),
  "Fiducial Set Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fiducial_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x31E),
  "Fiducial Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fiducials_property_category_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x31F),
  "Fiducials Property Category Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const graphic_layer_recommended_display_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x401),
  "Graphic Layer Recommended Display CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const blending_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x402),
  "Blending Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const relative_opacity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x403),
  "Relative Opacity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const referenced_spatial_registration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x404),
  "Referenced Spatial Registration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const blending_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x405),
  "Blending Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const presentation_display_collection_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1101),
  "Presentation Display Collection UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const presentation_sequence_collection_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1102),
  "Presentation Sequence Collection UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const presentation_sequence_position_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1103),
  "Presentation Sequence Position Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rendered_image_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1104),
  "Rendered Image Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const volumetric_presentation_state_input_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1201),
  "Volumetric Presentation State Input Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const presentation_input_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1202),
  "Presentation Input Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const input_sequence_position_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1203),
  "Input Sequence Position Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const crop = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1204),
  "Crop",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const cropping_specification_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1205),
  "Cropping Specification Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const compositing_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1206),
  "Compositing Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const volumetric_presentation_input_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1207),
  "Volumetric Presentation Input Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_volume_geometry = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1208),
  "Image Volume Geometry",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const volumetric_presentation_input_set_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1209),
  "Volumetric Presentation Input Set UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const volumetric_presentation_input_set_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x120A),
  "Volumetric Presentation Input Set Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const global_crop = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x120B),
  "Global Crop",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const global_cropping_specification_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x120C),
  "Global Cropping Specification Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const rendering_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x120D),
  "Rendering Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const volume_cropping_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1301),
  "Volume Cropping Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const volume_cropping_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1302),
  "Volume Cropping Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const bounding_box_crop = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1303),
  "Bounding Box Crop",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_6,
);

export const oblique_cropping_plane_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1304),
  "Oblique Cropping Plane Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1305),
  "Plane",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const plane_normal = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1306),
  "Plane Normal",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const cropping_specification_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1309),
  "Cropping Specification Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const multi_planar_reconstruction_style = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1501),
  "Multi-Planar Reconstruction Style",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mpr_thickness_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1502),
  "MPR Thickness Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mpr_slab_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1503),
  "MPR Slab Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const mpr_top_left_hand_corner = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1505),
  "MPR Top Left Hand Corner",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const mpr_view_width_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1507),
  "MPR View Width Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const mpr_view_width = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1508),
  "MPR View Width",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const number_of_volumetric_curve_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x150C),
  "Number of Volumetric Curve Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const volumetric_curve_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x150D),
  "Volumetric Curve Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherDoubleString()]),
  vm_1,
);

export const mpr_view_height_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1511),
  "MPR View Height Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const mpr_view_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1512),
  "MPR View Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const render_projection = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1602),
  "Render Projection",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const viewpoint_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1603),
  "Viewpoint Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const viewpoint_look_at_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1604),
  "Viewpoint LookAt Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const viewpoint_up_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1605),
  "Viewpoint Up Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const render_field_of_view = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1606),
  "Render Field of View",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_6,
);

export const sampling_step_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1607),
  "Sampling Step Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const shading_style = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1701),
  "Shading Style",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ambient_reflection_intensity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1702),
  "Ambient Reflection Intensity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const light_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1703),
  "Light Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const diffuse_reflection_intensity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1704),
  "Diffuse Reflection Intensity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const specular_reflection_intensity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1705),
  "Specular Reflection Intensity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const shininess = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1706),
  "Shininess",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const presentation_state_classification_component_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1801),
  "Presentation State Classification Component Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const component_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1802),
  "Component Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const component_input_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1803),
  "Component Input Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const volumetric_presentation_input_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1804),
  "Volumetric Presentation Input Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const presentation_state_compositor_component_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1805),
  "Presentation State Compositor Component Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const weighting_transfer_function_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1806),
  "Weighting Transfer Function Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const weighting_lookup_table_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1807),
  "Weighting Lookup Table Descriptor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const weighting_lookup_table_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1808),
  "Weighting Lookup Table Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const volumetric_annotation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1901),
  "Volumetric Annotation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_structured_context_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1903),
  "Referenced Structured Context Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_content_item = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1904),
  "Referenced Content Item",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const volumetric_presentation_input_annotation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1905),
  "Volumetric Presentation Input Annotation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const annotation_clipping = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1907),
  "Annotation Clipping",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const presentation_animation_style = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A01),
  "Presentation Animation Style",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const recommended_animation_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A03),
  "Recommended Animation Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const animation_curve_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A04),
  "Animation Curve Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const animation_step_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A05),
  "Animation Step Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const swivel_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A06),
  "Swivel Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const volumetric_curve_up_directions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A07),
  "Volumetric Curve Up Directions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherDoubleString()]),
  vm_1,
);

export const volume_stream_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A08),
  "Volume Stream Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rgba_transfer_function_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1A09),
  "RGBA Transfer Function Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const advanced_blending_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B01),
  "Advanced Blending Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const blending_input_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B02),
  "Blending Input Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const blending_display_input_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B03),
  "Blending Display Input Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const blending_display_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B04),
  "Blending Display Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const blending_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B06),
  "Blending Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const time_series_blending = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B07),
  "Time Series Blending",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const geometry_for_display = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B08),
  "Geometry for Display",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const threshold_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B11),
  "Threshold Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const threshold_value_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B12),
  "Threshold Value Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const threshold_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B13),
  "Threshold Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const threshold_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x70, 0x1B14),
  "Threshold Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

function find_element_in_group_0070(element) {
  if (element === 0x1) {
    return new Ok(graphic_annotation_sequence);
  } else if (element === 0x2) {
    return new Ok(graphic_layer);
  } else if (element === 0x3) {
    return new Ok(bounding_box_annotation_units);
  } else if (element === 0x4) {
    return new Ok(anchor_point_annotation_units);
  } else if (element === 0x5) {
    return new Ok(graphic_annotation_units);
  } else if (element === 0x6) {
    return new Ok(unformatted_text_value);
  } else if (element === 0x8) {
    return new Ok(text_object_sequence);
  } else if (element === 0x9) {
    return new Ok(graphic_object_sequence);
  } else if (element === 0x10) {
    return new Ok(bounding_box_top_left_hand_corner);
  } else if (element === 0x11) {
    return new Ok(bounding_box_bottom_right_hand_corner);
  } else if (element === 0x12) {
    return new Ok(bounding_box_text_horizontal_justification);
  } else if (element === 0x14) {
    return new Ok(anchor_point);
  } else if (element === 0x15) {
    return new Ok(anchor_point_visibility);
  } else if (element === 0x20) {
    return new Ok(graphic_dimensions);
  } else if (element === 0x21) {
    return new Ok(number_of_graphic_points);
  } else if (element === 0x22) {
    return new Ok(graphic_data);
  } else if (element === 0x23) {
    return new Ok(graphic_type);
  } else if (element === 0x24) {
    return new Ok(graphic_filled);
  } else if (element === 0x40) {
    return new Ok(image_rotation_retired);
  } else if (element === 0x41) {
    return new Ok(image_horizontal_flip);
  } else if (element === 0x42) {
    return new Ok(image_rotation);
  } else if (element === 0x50) {
    return new Ok(displayed_area_top_left_hand_corner_trial);
  } else if (element === 0x51) {
    return new Ok(displayed_area_bottom_right_hand_corner_trial);
  } else if (element === 0x52) {
    return new Ok(displayed_area_top_left_hand_corner);
  } else if (element === 0x53) {
    return new Ok(displayed_area_bottom_right_hand_corner);
  } else if (element === 0x5A) {
    return new Ok(displayed_area_selection_sequence);
  } else if (element === 0x60) {
    return new Ok(graphic_layer_sequence);
  } else if (element === 0x62) {
    return new Ok(graphic_layer_order);
  } else if (element === 0x66) {
    return new Ok(graphic_layer_recommended_display_grayscale_value);
  } else if (element === 0x67) {
    return new Ok(graphic_layer_recommended_display_rgb_value);
  } else if (element === 0x68) {
    return new Ok(graphic_layer_description);
  } else if (element === 0x80) {
    return new Ok(content_label);
  } else if (element === 0x81) {
    return new Ok(content_description);
  } else if (element === 0x82) {
    return new Ok(presentation_creation_date);
  } else if (element === 0x83) {
    return new Ok(presentation_creation_time);
  } else if (element === 0x84) {
    return new Ok(content_creator_name);
  } else if (element === 0x86) {
    return new Ok(content_creator_identification_code_sequence);
  } else if (element === 0x87) {
    return new Ok(alternate_content_description_sequence);
  } else if (element === 0x100) {
    return new Ok(presentation_size_mode);
  } else if (element === 0x101) {
    return new Ok(presentation_pixel_spacing);
  } else if (element === 0x102) {
    return new Ok(presentation_pixel_aspect_ratio);
  } else if (element === 0x103) {
    return new Ok(presentation_pixel_magnification_ratio);
  } else if (element === 0x207) {
    return new Ok(graphic_group_label);
  } else if (element === 0x208) {
    return new Ok(graphic_group_description);
  } else if (element === 0x209) {
    return new Ok(compound_graphic_sequence);
  } else if (element === 0x226) {
    return new Ok(compound_graphic_instance_id);
  } else if (element === 0x227) {
    return new Ok(font_name);
  } else if (element === 0x228) {
    return new Ok(font_name_type);
  } else if (element === 0x229) {
    return new Ok(css_font_name);
  } else if (element === 0x230) {
    return new Ok(rotation_angle);
  } else if (element === 0x231) {
    return new Ok(text_style_sequence);
  } else if (element === 0x232) {
    return new Ok(line_style_sequence);
  } else if (element === 0x233) {
    return new Ok(fill_style_sequence);
  } else if (element === 0x234) {
    return new Ok(graphic_group_sequence);
  } else if (element === 0x241) {
    return new Ok(text_color_cie_lab_value);
  } else if (element === 0x242) {
    return new Ok(horizontal_alignment);
  } else if (element === 0x243) {
    return new Ok(vertical_alignment);
  } else if (element === 0x244) {
    return new Ok(shadow_style);
  } else if (element === 0x245) {
    return new Ok(shadow_offset_x);
  } else if (element === 0x246) {
    return new Ok(shadow_offset_y);
  } else if (element === 0x247) {
    return new Ok(shadow_color_cie_lab_value);
  } else if (element === 0x248) {
    return new Ok(underlined);
  } else if (element === 0x249) {
    return new Ok(bold);
  } else if (element === 0x250) {
    return new Ok(italic);
  } else if (element === 0x251) {
    return new Ok(pattern_on_color_cie_lab_value);
  } else if (element === 0x252) {
    return new Ok(pattern_off_color_cie_lab_value);
  } else if (element === 0x253) {
    return new Ok(line_thickness);
  } else if (element === 0x254) {
    return new Ok(line_dashing_style);
  } else if (element === 0x255) {
    return new Ok(line_pattern);
  } else if (element === 0x256) {
    return new Ok(fill_pattern);
  } else if (element === 0x257) {
    return new Ok(fill_mode);
  } else if (element === 0x258) {
    return new Ok(shadow_opacity);
  } else if (element === 0x261) {
    return new Ok(gap_length);
  } else if (element === 0x262) {
    return new Ok(diameter_of_visibility);
  } else if (element === 0x273) {
    return new Ok(rotation_point);
  } else if (element === 0x274) {
    return new Ok(tick_alignment);
  } else if (element === 0x278) {
    return new Ok(show_tick_label);
  } else if (element === 0x279) {
    return new Ok(tick_label_alignment);
  } else if (element === 0x282) {
    return new Ok(compound_graphic_units);
  } else if (element === 0x284) {
    return new Ok(pattern_on_opacity);
  } else if (element === 0x285) {
    return new Ok(pattern_off_opacity);
  } else if (element === 0x287) {
    return new Ok(major_ticks_sequence);
  } else if (element === 0x288) {
    return new Ok(tick_position);
  } else if (element === 0x289) {
    return new Ok(tick_label);
  } else if (element === 0x294) {
    return new Ok(compound_graphic_type);
  } else if (element === 0x295) {
    return new Ok(graphic_group_id);
  } else if (element === 0x306) {
    return new Ok(shape_type);
  } else if (element === 0x308) {
    return new Ok(registration_sequence);
  } else if (element === 0x309) {
    return new Ok(matrix_registration_sequence);
  } else if (element === 0x30A) {
    return new Ok(matrix_sequence);
  } else if (element === 0x30B) {
    return new Ok(
      frame_of_reference_to_displayed_coordinate_system_transformation_matrix,
    );
  } else if (element === 0x30C) {
    return new Ok(frame_of_reference_transformation_matrix_type);
  } else if (element === 0x30D) {
    return new Ok(registration_type_code_sequence);
  } else if (element === 0x30F) {
    return new Ok(fiducial_description);
  } else if (element === 0x310) {
    return new Ok(fiducial_identifier);
  } else if (element === 0x311) {
    return new Ok(fiducial_identifier_code_sequence);
  } else if (element === 0x312) {
    return new Ok(contour_uncertainty_radius);
  } else if (element === 0x314) {
    return new Ok(used_fiducials_sequence);
  } else if (element === 0x315) {
    return new Ok(used_rt_structure_set_roi_sequence);
  } else if (element === 0x318) {
    return new Ok(graphic_coordinates_data_sequence);
  } else if (element === 0x31A) {
    return new Ok(fiducial_uid);
  } else if (element === 0x31B) {
    return new Ok(referenced_fiducial_uid);
  } else if (element === 0x31C) {
    return new Ok(fiducial_set_sequence);
  } else if (element === 0x31E) {
    return new Ok(fiducial_sequence);
  } else if (element === 0x31F) {
    return new Ok(fiducials_property_category_code_sequence);
  } else if (element === 0x401) {
    return new Ok(graphic_layer_recommended_display_cie_lab_value);
  } else if (element === 0x402) {
    return new Ok(blending_sequence);
  } else if (element === 0x403) {
    return new Ok(relative_opacity);
  } else if (element === 0x404) {
    return new Ok(referenced_spatial_registration_sequence);
  } else if (element === 0x405) {
    return new Ok(blending_position);
  } else if (element === 0x1101) {
    return new Ok(presentation_display_collection_uid);
  } else if (element === 0x1102) {
    return new Ok(presentation_sequence_collection_uid);
  } else if (element === 0x1103) {
    return new Ok(presentation_sequence_position_index);
  } else if (element === 0x1104) {
    return new Ok(rendered_image_reference_sequence);
  } else if (element === 0x1201) {
    return new Ok(volumetric_presentation_state_input_sequence);
  } else if (element === 0x1202) {
    return new Ok(presentation_input_type);
  } else if (element === 0x1203) {
    return new Ok(input_sequence_position_index);
  } else if (element === 0x1204) {
    return new Ok(crop);
  } else if (element === 0x1205) {
    return new Ok(cropping_specification_index);
  } else if (element === 0x1206) {
    return new Ok(compositing_method);
  } else if (element === 0x1207) {
    return new Ok(volumetric_presentation_input_number);
  } else if (element === 0x1208) {
    return new Ok(image_volume_geometry);
  } else if (element === 0x1209) {
    return new Ok(volumetric_presentation_input_set_uid);
  } else if (element === 0x120A) {
    return new Ok(volumetric_presentation_input_set_sequence);
  } else if (element === 0x120B) {
    return new Ok(global_crop);
  } else if (element === 0x120C) {
    return new Ok(global_cropping_specification_index);
  } else if (element === 0x120D) {
    return new Ok(rendering_method);
  } else if (element === 0x1301) {
    return new Ok(volume_cropping_sequence);
  } else if (element === 0x1302) {
    return new Ok(volume_cropping_method);
  } else if (element === 0x1303) {
    return new Ok(bounding_box_crop);
  } else if (element === 0x1304) {
    return new Ok(oblique_cropping_plane_sequence);
  } else if (element === 0x1305) {
    return new Ok(plane);
  } else if (element === 0x1306) {
    return new Ok(plane_normal);
  } else if (element === 0x1309) {
    return new Ok(cropping_specification_number);
  } else if (element === 0x1501) {
    return new Ok(multi_planar_reconstruction_style);
  } else if (element === 0x1502) {
    return new Ok(mpr_thickness_type);
  } else if (element === 0x1503) {
    return new Ok(mpr_slab_thickness);
  } else if (element === 0x1505) {
    return new Ok(mpr_top_left_hand_corner);
  } else if (element === 0x1507) {
    return new Ok(mpr_view_width_direction);
  } else if (element === 0x1508) {
    return new Ok(mpr_view_width);
  } else if (element === 0x150C) {
    return new Ok(number_of_volumetric_curve_points);
  } else if (element === 0x150D) {
    return new Ok(volumetric_curve_points);
  } else if (element === 0x1511) {
    return new Ok(mpr_view_height_direction);
  } else if (element === 0x1512) {
    return new Ok(mpr_view_height);
  } else if (element === 0x1602) {
    return new Ok(render_projection);
  } else if (element === 0x1603) {
    return new Ok(viewpoint_position);
  } else if (element === 0x1604) {
    return new Ok(viewpoint_look_at_point);
  } else if (element === 0x1605) {
    return new Ok(viewpoint_up_direction);
  } else if (element === 0x1606) {
    return new Ok(render_field_of_view);
  } else if (element === 0x1607) {
    return new Ok(sampling_step_size);
  } else if (element === 0x1701) {
    return new Ok(shading_style);
  } else if (element === 0x1702) {
    return new Ok(ambient_reflection_intensity);
  } else if (element === 0x1703) {
    return new Ok(light_direction);
  } else if (element === 0x1704) {
    return new Ok(diffuse_reflection_intensity);
  } else if (element === 0x1705) {
    return new Ok(specular_reflection_intensity);
  } else if (element === 0x1706) {
    return new Ok(shininess);
  } else if (element === 0x1801) {
    return new Ok(presentation_state_classification_component_sequence);
  } else if (element === 0x1802) {
    return new Ok(component_type);
  } else if (element === 0x1803) {
    return new Ok(component_input_sequence);
  } else if (element === 0x1804) {
    return new Ok(volumetric_presentation_input_index);
  } else if (element === 0x1805) {
    return new Ok(presentation_state_compositor_component_sequence);
  } else if (element === 0x1806) {
    return new Ok(weighting_transfer_function_sequence);
  } else if (element === 0x1807) {
    return new Ok(weighting_lookup_table_descriptor);
  } else if (element === 0x1808) {
    return new Ok(weighting_lookup_table_data);
  } else if (element === 0x1901) {
    return new Ok(volumetric_annotation_sequence);
  } else if (element === 0x1903) {
    return new Ok(referenced_structured_context_sequence);
  } else if (element === 0x1904) {
    return new Ok(referenced_content_item);
  } else if (element === 0x1905) {
    return new Ok(volumetric_presentation_input_annotation_sequence);
  } else if (element === 0x1907) {
    return new Ok(annotation_clipping);
  } else if (element === 0x1A01) {
    return new Ok(presentation_animation_style);
  } else if (element === 0x1A03) {
    return new Ok(recommended_animation_rate);
  } else if (element === 0x1A04) {
    return new Ok(animation_curve_sequence);
  } else if (element === 0x1A05) {
    return new Ok(animation_step_size);
  } else if (element === 0x1A06) {
    return new Ok(swivel_range);
  } else if (element === 0x1A07) {
    return new Ok(volumetric_curve_up_directions);
  } else if (element === 0x1A08) {
    return new Ok(volume_stream_sequence);
  } else if (element === 0x1A09) {
    return new Ok(rgba_transfer_function_description);
  } else if (element === 0x1B01) {
    return new Ok(advanced_blending_sequence);
  } else if (element === 0x1B02) {
    return new Ok(blending_input_number);
  } else if (element === 0x1B03) {
    return new Ok(blending_display_input_sequence);
  } else if (element === 0x1B04) {
    return new Ok(blending_display_sequence);
  } else if (element === 0x1B06) {
    return new Ok(blending_mode);
  } else if (element === 0x1B07) {
    return new Ok(time_series_blending);
  } else if (element === 0x1B08) {
    return new Ok(geometry_for_display);
  } else if (element === 0x1B11) {
    return new Ok(threshold_sequence);
  } else if (element === 0x1B12) {
    return new Ok(threshold_value_sequence);
  } else if (element === 0x1B13) {
    return new Ok(threshold_type);
  } else if (element === 0x1B14) {
    return new Ok(threshold_value);
  } else {
    return new Error(undefined);
  }
}

export const hanging_protocol_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x2),
  "Hanging Protocol Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const hanging_protocol_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x4),
  "Hanging Protocol Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const hanging_protocol_level = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x6),
  "Hanging Protocol Level",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const hanging_protocol_creator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x8),
  "Hanging Protocol Creator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const hanging_protocol_creation_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0xA),
  "Hanging Protocol Creation DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const hanging_protocol_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0xC),
  "Hanging Protocol Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const hanging_protocol_user_identification_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0xE),
  "Hanging Protocol User Identification Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const hanging_protocol_user_group_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x10),
  "Hanging Protocol User Group Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_hanging_protocol_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x12),
  "Source Hanging Protocol Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_priors_referenced = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x14),
  "Number of Priors Referenced",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_sets_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x20),
  "Image Sets Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_set_selector_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x22),
  "Image Set Selector Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_set_selector_usage_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x24),
  "Image Set Selector Usage Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const selector_attribute = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x26),
  "Selector Attribute",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const selector_value_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x28),
  "Selector Value Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const time_based_image_sets_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x30),
  "Time Based Image Sets Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_set_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x32),
  "Image Set Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_set_selector_category = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x34),
  "Image Set Selector Category",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const relative_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x38),
  "Relative Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2,
);

export const relative_time_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x3A),
  "Relative Time Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const abstract_prior_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x3C),
  "Abstract Prior Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_2,
);

export const abstract_prior_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x3E),
  "Abstract Prior Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_set_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x40),
  "Image Set Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const selector_attribute_vr = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x50),
  "Selector Attribute VR",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const selector_sequence_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x52),
  "Selector Sequence Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const selector_sequence_pointer_private_creator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x54),
  "Selector Sequence Pointer Private Creator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const selector_attribute_private_creator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x56),
  "Selector Attribute Private Creator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const selector_ae_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x5E),
  "Selector AE Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1_to_n,
);

export const selector_as_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x5F),
  "Selector AS Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AgeString()]),
  vm_1_to_n,
);

export const selector_at_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x60),
  "Selector AT Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const selector_da_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x61),
  "Selector DA Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1_to_n,
);

export const selector_cs_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x62),
  "Selector CS Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const selector_dt_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x63),
  "Selector DT Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1_to_n,
);

export const selector_is_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x64),
  "Selector IS Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const selector_ob_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x65),
  "Selector OB Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const selector_lo_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x66),
  "Selector LO Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const selector_of_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x67),
  "Selector OF Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const selector_lt_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x68),
  "Selector LT Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const selector_ow_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x69),
  "Selector OW Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const selector_pn_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x6A),
  "Selector PN Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1_to_n,
);

export const selector_tm_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x6B),
  "Selector TM Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1_to_n,
);

export const selector_sh_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x6C),
  "Selector SH Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const selector_un_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x6D),
  "Selector UN Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Unknown()]),
  vm_1,
);

export const selector_st_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x6E),
  "Selector ST Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const selector_uc_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x6F),
  "Selector UC Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1_to_n,
);

export const selector_ut_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x70),
  "Selector UT Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const selector_ur_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x71),
  "Selector UR Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const selector_ds_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x72),
  "Selector DS Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const selector_od_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x73),
  "Selector OD Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherDoubleString()]),
  vm_1,
);

export const selector_fd_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x74),
  "Selector FD Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const selector_ol_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x75),
  "Selector OL Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherLongString()]),
  vm_1,
);

export const selector_fl_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x76),
  "Selector FL Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const selector_ul_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x78),
  "Selector UL Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1_to_n,
);

export const selector_us_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x7A),
  "Selector US Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const selector_sl_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x7C),
  "Selector SL Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedLong()]),
  vm_1_to_n,
);

export const selector_ss_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x7E),
  "Selector SS Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1_to_n,
);

export const selector_ui_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x7F),
  "Selector UI Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const selector_code_sequence_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x80),
  "Selector Code Sequence Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const selector_ov_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x81),
  "Selector OV Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherVeryLongString()]),
  vm_1,
);

export const selector_sv_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x82),
  "Selector SV Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedVeryLong()]),
  vm_1_to_n,
);

export const selector_uv_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x83),
  "Selector UV Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedVeryLong()]),
  vm_1_to_n,
);

export const number_of_screens = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x100),
  "Number of Screens",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const nominal_screen_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x102),
  "Nominal Screen Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_vertical_pixels = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x104),
  "Number of Vertical Pixels",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_horizontal_pixels = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x106),
  "Number of Horizontal Pixels",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const display_environment_spatial_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x108),
  "Display Environment Spatial Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const screen_minimum_grayscale_bit_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x10A),
  "Screen Minimum Grayscale Bit Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const screen_minimum_color_bit_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x10C),
  "Screen Minimum Color Bit Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const application_maximum_repaint_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x10E),
  "Application Maximum Repaint Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const display_sets_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x200),
  "Display Sets Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const display_set_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x202),
  "Display Set Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const display_set_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x203),
  "Display Set Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const display_set_presentation_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x204),
  "Display Set Presentation Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const display_set_presentation_group_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x206),
  "Display Set Presentation Group Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const partial_data_display_handling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x208),
  "Partial Data Display Handling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const synchronized_scrolling_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x210),
  "Synchronized Scrolling Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const display_set_scrolling_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x212),
  "Display Set Scrolling Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2_to_n,
);

export const navigation_indicator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x214),
  "Navigation Indicator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const navigation_display_set = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x216),
  "Navigation Display Set",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const reference_display_sets = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x218),
  "Reference Display Sets",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const image_boxes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x300),
  "Image Boxes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_box_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x302),
  "Image Box Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_box_layout_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x304),
  "Image Box Layout Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_box_tile_horizontal_dimension = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x306),
  "Image Box Tile Horizontal Dimension",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_box_tile_vertical_dimension = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x308),
  "Image Box Tile Vertical Dimension",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_box_scroll_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x310),
  "Image Box Scroll Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_box_small_scroll_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x312),
  "Image Box Small Scroll Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_box_small_scroll_amount = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x314),
  "Image Box Small Scroll Amount",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_box_large_scroll_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x316),
  "Image Box Large Scroll Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_box_large_scroll_amount = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x318),
  "Image Box Large Scroll Amount",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const image_box_overlap_priority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x320),
  "Image Box Overlap Priority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const cine_relative_to_real_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x330),
  "Cine Relative to Real-Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const filter_operations_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x400),
  "Filter Operations Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const filter_by_category = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x402),
  "Filter-by Category",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const filter_by_attribute_presence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x404),
  "Filter-by Attribute Presence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const filter_by_operator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x406),
  "Filter-by Operator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const structured_display_background_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x420),
  "Structured Display Background CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const empty_image_box_cie_lab_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x421),
  "Empty Image Box CIELab Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const structured_display_image_box_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x422),
  "Structured Display Image Box Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const structured_display_text_box_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x424),
  "Structured Display Text Box Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_first_frame_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x427),
  "Referenced First Frame Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_box_synchronization_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x430),
  "Image Box Synchronization Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const synchronized_image_box_list = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x432),
  "Synchronized Image Box List",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_2_to_n,
);

export const type_of_synchronization = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x434),
  "Type of Synchronization",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const blending_operation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x500),
  "Blending Operation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reformatting_operation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x510),
  "Reformatting Operation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reformatting_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x512),
  "Reformatting Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const reformatting_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x514),
  "Reformatting Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const reformatting_operation_initial_view_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x516),
  "Reformatting Operation Initial View Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const three_d_rendering_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x520),
  "3D Rendering Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const sorting_operations_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x600),
  "Sorting Operations Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const sort_by_category = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x602),
  "Sort-by Category",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const sorting_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x604),
  "Sorting Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const display_set_patient_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x700),
  "Display Set Patient Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_2,
);

export const voi_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x702),
  "VOI Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pseudo_color_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x704),
  "Pseudo-Color Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const pseudo_color_palette_instance_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x705),
  "Pseudo-Color Palette Instance Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const show_grayscale_inverted = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x706),
  "Show Grayscale Inverted",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const show_image_true_size_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x710),
  "Show Image True Size Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const show_graphic_annotation_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x712),
  "Show Graphic Annotation Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const show_patient_demographics_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x714),
  "Show Patient Demographics Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const show_acquisition_techniques_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x716),
  "Show Acquisition Techniques Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const display_set_horizontal_justification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x717),
  "Display Set Horizontal Justification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const display_set_vertical_justification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x72, 0x718),
  "Display Set Vertical Justification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_0072(element) {
  if (element === 0x2) {
    return new Ok(hanging_protocol_name);
  } else if (element === 0x4) {
    return new Ok(hanging_protocol_description);
  } else if (element === 0x6) {
    return new Ok(hanging_protocol_level);
  } else if (element === 0x8) {
    return new Ok(hanging_protocol_creator);
  } else if (element === 0xA) {
    return new Ok(hanging_protocol_creation_date_time);
  } else if (element === 0xC) {
    return new Ok(hanging_protocol_definition_sequence);
  } else if (element === 0xE) {
    return new Ok(hanging_protocol_user_identification_code_sequence);
  } else if (element === 0x10) {
    return new Ok(hanging_protocol_user_group_name);
  } else if (element === 0x12) {
    return new Ok(source_hanging_protocol_sequence);
  } else if (element === 0x14) {
    return new Ok(number_of_priors_referenced);
  } else if (element === 0x20) {
    return new Ok(image_sets_sequence);
  } else if (element === 0x22) {
    return new Ok(image_set_selector_sequence);
  } else if (element === 0x24) {
    return new Ok(image_set_selector_usage_flag);
  } else if (element === 0x26) {
    return new Ok(selector_attribute);
  } else if (element === 0x28) {
    return new Ok(selector_value_number);
  } else if (element === 0x30) {
    return new Ok(time_based_image_sets_sequence);
  } else if (element === 0x32) {
    return new Ok(image_set_number);
  } else if (element === 0x34) {
    return new Ok(image_set_selector_category);
  } else if (element === 0x38) {
    return new Ok(relative_time);
  } else if (element === 0x3A) {
    return new Ok(relative_time_units);
  } else if (element === 0x3C) {
    return new Ok(abstract_prior_value);
  } else if (element === 0x3E) {
    return new Ok(abstract_prior_code_sequence);
  } else if (element === 0x40) {
    return new Ok(image_set_label);
  } else if (element === 0x50) {
    return new Ok(selector_attribute_vr);
  } else if (element === 0x52) {
    return new Ok(selector_sequence_pointer);
  } else if (element === 0x54) {
    return new Ok(selector_sequence_pointer_private_creator);
  } else if (element === 0x56) {
    return new Ok(selector_attribute_private_creator);
  } else if (element === 0x5E) {
    return new Ok(selector_ae_value);
  } else if (element === 0x5F) {
    return new Ok(selector_as_value);
  } else if (element === 0x60) {
    return new Ok(selector_at_value);
  } else if (element === 0x61) {
    return new Ok(selector_da_value);
  } else if (element === 0x62) {
    return new Ok(selector_cs_value);
  } else if (element === 0x63) {
    return new Ok(selector_dt_value);
  } else if (element === 0x64) {
    return new Ok(selector_is_value);
  } else if (element === 0x65) {
    return new Ok(selector_ob_value);
  } else if (element === 0x66) {
    return new Ok(selector_lo_value);
  } else if (element === 0x67) {
    return new Ok(selector_of_value);
  } else if (element === 0x68) {
    return new Ok(selector_lt_value);
  } else if (element === 0x69) {
    return new Ok(selector_ow_value);
  } else if (element === 0x6A) {
    return new Ok(selector_pn_value);
  } else if (element === 0x6B) {
    return new Ok(selector_tm_value);
  } else if (element === 0x6C) {
    return new Ok(selector_sh_value);
  } else if (element === 0x6D) {
    return new Ok(selector_un_value);
  } else if (element === 0x6E) {
    return new Ok(selector_st_value);
  } else if (element === 0x6F) {
    return new Ok(selector_uc_value);
  } else if (element === 0x70) {
    return new Ok(selector_ut_value);
  } else if (element === 0x71) {
    return new Ok(selector_ur_value);
  } else if (element === 0x72) {
    return new Ok(selector_ds_value);
  } else if (element === 0x73) {
    return new Ok(selector_od_value);
  } else if (element === 0x74) {
    return new Ok(selector_fd_value);
  } else if (element === 0x75) {
    return new Ok(selector_ol_value);
  } else if (element === 0x76) {
    return new Ok(selector_fl_value);
  } else if (element === 0x78) {
    return new Ok(selector_ul_value);
  } else if (element === 0x7A) {
    return new Ok(selector_us_value);
  } else if (element === 0x7C) {
    return new Ok(selector_sl_value);
  } else if (element === 0x7E) {
    return new Ok(selector_ss_value);
  } else if (element === 0x7F) {
    return new Ok(selector_ui_value);
  } else if (element === 0x80) {
    return new Ok(selector_code_sequence_value);
  } else if (element === 0x81) {
    return new Ok(selector_ov_value);
  } else if (element === 0x82) {
    return new Ok(selector_sv_value);
  } else if (element === 0x83) {
    return new Ok(selector_uv_value);
  } else if (element === 0x100) {
    return new Ok(number_of_screens);
  } else if (element === 0x102) {
    return new Ok(nominal_screen_definition_sequence);
  } else if (element === 0x104) {
    return new Ok(number_of_vertical_pixels);
  } else if (element === 0x106) {
    return new Ok(number_of_horizontal_pixels);
  } else if (element === 0x108) {
    return new Ok(display_environment_spatial_position);
  } else if (element === 0x10A) {
    return new Ok(screen_minimum_grayscale_bit_depth);
  } else if (element === 0x10C) {
    return new Ok(screen_minimum_color_bit_depth);
  } else if (element === 0x10E) {
    return new Ok(application_maximum_repaint_time);
  } else if (element === 0x200) {
    return new Ok(display_sets_sequence);
  } else if (element === 0x202) {
    return new Ok(display_set_number);
  } else if (element === 0x203) {
    return new Ok(display_set_label);
  } else if (element === 0x204) {
    return new Ok(display_set_presentation_group);
  } else if (element === 0x206) {
    return new Ok(display_set_presentation_group_description);
  } else if (element === 0x208) {
    return new Ok(partial_data_display_handling);
  } else if (element === 0x210) {
    return new Ok(synchronized_scrolling_sequence);
  } else if (element === 0x212) {
    return new Ok(display_set_scrolling_group);
  } else if (element === 0x214) {
    return new Ok(navigation_indicator_sequence);
  } else if (element === 0x216) {
    return new Ok(navigation_display_set);
  } else if (element === 0x218) {
    return new Ok(reference_display_sets);
  } else if (element === 0x300) {
    return new Ok(image_boxes_sequence);
  } else if (element === 0x302) {
    return new Ok(image_box_number);
  } else if (element === 0x304) {
    return new Ok(image_box_layout_type);
  } else if (element === 0x306) {
    return new Ok(image_box_tile_horizontal_dimension);
  } else if (element === 0x308) {
    return new Ok(image_box_tile_vertical_dimension);
  } else if (element === 0x310) {
    return new Ok(image_box_scroll_direction);
  } else if (element === 0x312) {
    return new Ok(image_box_small_scroll_type);
  } else if (element === 0x314) {
    return new Ok(image_box_small_scroll_amount);
  } else if (element === 0x316) {
    return new Ok(image_box_large_scroll_type);
  } else if (element === 0x318) {
    return new Ok(image_box_large_scroll_amount);
  } else if (element === 0x320) {
    return new Ok(image_box_overlap_priority);
  } else if (element === 0x330) {
    return new Ok(cine_relative_to_real_time);
  } else if (element === 0x400) {
    return new Ok(filter_operations_sequence);
  } else if (element === 0x402) {
    return new Ok(filter_by_category);
  } else if (element === 0x404) {
    return new Ok(filter_by_attribute_presence);
  } else if (element === 0x406) {
    return new Ok(filter_by_operator);
  } else if (element === 0x420) {
    return new Ok(structured_display_background_cie_lab_value);
  } else if (element === 0x421) {
    return new Ok(empty_image_box_cie_lab_value);
  } else if (element === 0x422) {
    return new Ok(structured_display_image_box_sequence);
  } else if (element === 0x424) {
    return new Ok(structured_display_text_box_sequence);
  } else if (element === 0x427) {
    return new Ok(referenced_first_frame_sequence);
  } else if (element === 0x430) {
    return new Ok(image_box_synchronization_sequence);
  } else if (element === 0x432) {
    return new Ok(synchronized_image_box_list);
  } else if (element === 0x434) {
    return new Ok(type_of_synchronization);
  } else if (element === 0x500) {
    return new Ok(blending_operation_type);
  } else if (element === 0x510) {
    return new Ok(reformatting_operation_type);
  } else if (element === 0x512) {
    return new Ok(reformatting_thickness);
  } else if (element === 0x514) {
    return new Ok(reformatting_interval);
  } else if (element === 0x516) {
    return new Ok(reformatting_operation_initial_view_direction);
  } else if (element === 0x520) {
    return new Ok(three_d_rendering_type);
  } else if (element === 0x600) {
    return new Ok(sorting_operations_sequence);
  } else if (element === 0x602) {
    return new Ok(sort_by_category);
  } else if (element === 0x604) {
    return new Ok(sorting_direction);
  } else if (element === 0x700) {
    return new Ok(display_set_patient_orientation);
  } else if (element === 0x702) {
    return new Ok(voi_type);
  } else if (element === 0x704) {
    return new Ok(pseudo_color_type);
  } else if (element === 0x705) {
    return new Ok(pseudo_color_palette_instance_reference_sequence);
  } else if (element === 0x706) {
    return new Ok(show_grayscale_inverted);
  } else if (element === 0x710) {
    return new Ok(show_image_true_size_flag);
  } else if (element === 0x712) {
    return new Ok(show_graphic_annotation_flag);
  } else if (element === 0x714) {
    return new Ok(show_patient_demographics_flag);
  } else if (element === 0x716) {
    return new Ok(show_acquisition_techniques_flag);
  } else if (element === 0x717) {
    return new Ok(display_set_horizontal_justification);
  } else if (element === 0x718) {
    return new Ok(display_set_vertical_justification);
  } else {
    return new Error(undefined);
  }
}

export const continuation_start_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x120),
  "Continuation Start Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const continuation_end_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x121),
  "Continuation End Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const procedure_step_state = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1000),
  "Procedure Step State",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const procedure_step_progress_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1002),
  "Procedure Step Progress Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const procedure_step_progress = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1004),
  "Procedure Step Progress",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const procedure_step_progress_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1006),
  "Procedure Step Progress Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const procedure_step_progress_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1007),
  "Procedure Step Progress Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const procedure_step_communications_uri_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1008),
  "Procedure Step Communications URI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contact_uri = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x100A),
  "Contact URI",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniversalResourceIdentifier()]),
  vm_1,
);

export const contact_display_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x100C),
  "Contact Display Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const procedure_step_discontinuation_reason_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x100E),
  "Procedure Step Discontinuation Reason Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const beam_task_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1020),
  "Beam Task Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const beam_task_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1022),
  "Beam Task Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_order_index_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1024),
  "Beam Order Index (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const autosequence_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1025),
  "Autosequence Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const table_top_vertical_adjusted_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1026),
  "Table Top Vertical Adjusted Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const table_top_longitudinal_adjusted_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1027),
  "Table Top Longitudinal Adjusted Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const table_top_lateral_adjusted_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1028),
  "Table Top Lateral Adjusted Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const patient_support_adjusted_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x102A),
  "Patient Support Adjusted Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const table_top_eccentric_adjusted_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x102B),
  "Table Top Eccentric Adjusted Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const table_top_pitch_adjusted_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x102C),
  "Table Top Pitch Adjusted Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const table_top_roll_adjusted_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x102D),
  "Table Top Roll Adjusted Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const delivery_verification_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1030),
  "Delivery Verification Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const verification_image_timing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1032),
  "Verification Image Timing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const double_exposure_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1034),
  "Double Exposure Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const double_exposure_ordering = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1036),
  "Double Exposure Ordering",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const double_exposure_meterset_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1038),
  "Double Exposure Meterset (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const double_exposure_field_delta_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x103A),
  "Double Exposure Field Delta (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_4,
);

export const related_reference_rt_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1040),
  "Related Reference RT Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const general_machine_verification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1042),
  "General Machine Verification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conventional_machine_verification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1044),
  "Conventional Machine Verification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_machine_verification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1046),
  "Ion Machine Verification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const failed_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1048),
  "Failed Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const overridden_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x104A),
  "Overridden Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conventional_control_point_verification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x104C),
  "Conventional Control Point Verification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_control_point_verification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x104E),
  "Ion Control Point Verification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const attribute_occurrence_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1050),
  "Attribute Occurrence Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const attribute_occurrence_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1052),
  "Attribute Occurrence Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const attribute_item_selector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1054),
  "Attribute Item Selector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const attribute_occurrence_private_creator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1056),
  "Attribute Occurrence Private Creator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const selector_sequence_pointer_items = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1057),
  "Selector Sequence Pointer Items",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const scheduled_procedure_step_priority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1200),
  "Scheduled Procedure Step Priority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const worklist_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1202),
  "Worklist Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const procedure_step_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1204),
  "Procedure Step Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const scheduled_processing_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1210),
  "Scheduled Processing Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const performed_processing_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1212),
  "Performed Processing Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const unified_procedure_step_performed_procedure_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1216),
  "Unified Procedure Step Performed Procedure Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const related_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1220),
  "Related Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const procedure_step_relationship_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1222),
  "Procedure Step Relationship Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const replaced_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1224),
  "Replaced Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const deletion_lock = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1230),
  "Deletion Lock",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const receiving_ae = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1234),
  "Receiving AE",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const requesting_ae = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1236),
  "Requesting AE",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const reason_for_cancellation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1238),
  "Reason for Cancellation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const scp_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1242),
  "SCP Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const subscription_list_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1244),
  "Subscription List Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const unified_procedure_step_list_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1246),
  "Unified Procedure Step List Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_order_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1324),
  "Beam Order Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const double_exposure_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1338),
  "Double Exposure Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const double_exposure_field_delta = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x133A),
  "Double Exposure Field Delta",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const brachy_task_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1401),
  "Brachy Task Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const continuation_start_total_reference_air_kerma = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1402),
  "Continuation Start Total Reference Air Kerma",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const continuation_end_total_reference_air_kerma = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1403),
  "Continuation End Total Reference Air Kerma",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const continuation_pulse_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1404),
  "Continuation Pulse Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const channel_delivery_order_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1405),
  "Channel Delivery Order Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_channel_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1406),
  "Referenced Channel Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const start_cumulative_time_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1407),
  "Start Cumulative Time Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const end_cumulative_time_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1408),
  "End Cumulative Time Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const omitted_channel_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x1409),
  "Omitted Channel Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reason_for_channel_omission = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x140A),
  "Reason for Channel Omission",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reason_for_channel_omission_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x140B),
  "Reason for Channel Omission Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const channel_delivery_order_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x140C),
  "Channel Delivery Order Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const channel_delivery_continuation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x140D),
  "Channel Delivery Continuation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const omitted_application_setup_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x74, 0x140E),
  "Omitted Application Setup Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0074(element) {
  if (element === 0x120) {
    return new Ok(continuation_start_meterset);
  } else if (element === 0x121) {
    return new Ok(continuation_end_meterset);
  } else if (element === 0x1000) {
    return new Ok(procedure_step_state);
  } else if (element === 0x1002) {
    return new Ok(procedure_step_progress_information_sequence);
  } else if (element === 0x1004) {
    return new Ok(procedure_step_progress);
  } else if (element === 0x1006) {
    return new Ok(procedure_step_progress_description);
  } else if (element === 0x1007) {
    return new Ok(procedure_step_progress_parameters_sequence);
  } else if (element === 0x1008) {
    return new Ok(procedure_step_communications_uri_sequence);
  } else if (element === 0x100A) {
    return new Ok(contact_uri);
  } else if (element === 0x100C) {
    return new Ok(contact_display_name);
  } else if (element === 0x100E) {
    return new Ok(procedure_step_discontinuation_reason_code_sequence);
  } else if (element === 0x1020) {
    return new Ok(beam_task_sequence);
  } else if (element === 0x1022) {
    return new Ok(beam_task_type);
  } else if (element === 0x1024) {
    return new Ok(beam_order_index_trial);
  } else if (element === 0x1025) {
    return new Ok(autosequence_flag);
  } else if (element === 0x1026) {
    return new Ok(table_top_vertical_adjusted_position);
  } else if (element === 0x1027) {
    return new Ok(table_top_longitudinal_adjusted_position);
  } else if (element === 0x1028) {
    return new Ok(table_top_lateral_adjusted_position);
  } else if (element === 0x102A) {
    return new Ok(patient_support_adjusted_angle);
  } else if (element === 0x102B) {
    return new Ok(table_top_eccentric_adjusted_angle);
  } else if (element === 0x102C) {
    return new Ok(table_top_pitch_adjusted_angle);
  } else if (element === 0x102D) {
    return new Ok(table_top_roll_adjusted_angle);
  } else if (element === 0x1030) {
    return new Ok(delivery_verification_image_sequence);
  } else if (element === 0x1032) {
    return new Ok(verification_image_timing);
  } else if (element === 0x1034) {
    return new Ok(double_exposure_flag);
  } else if (element === 0x1036) {
    return new Ok(double_exposure_ordering);
  } else if (element === 0x1038) {
    return new Ok(double_exposure_meterset_trial);
  } else if (element === 0x103A) {
    return new Ok(double_exposure_field_delta_trial);
  } else if (element === 0x1040) {
    return new Ok(related_reference_rt_image_sequence);
  } else if (element === 0x1042) {
    return new Ok(general_machine_verification_sequence);
  } else if (element === 0x1044) {
    return new Ok(conventional_machine_verification_sequence);
  } else if (element === 0x1046) {
    return new Ok(ion_machine_verification_sequence);
  } else if (element === 0x1048) {
    return new Ok(failed_attributes_sequence);
  } else if (element === 0x104A) {
    return new Ok(overridden_attributes_sequence);
  } else if (element === 0x104C) {
    return new Ok(conventional_control_point_verification_sequence);
  } else if (element === 0x104E) {
    return new Ok(ion_control_point_verification_sequence);
  } else if (element === 0x1050) {
    return new Ok(attribute_occurrence_sequence);
  } else if (element === 0x1052) {
    return new Ok(attribute_occurrence_pointer);
  } else if (element === 0x1054) {
    return new Ok(attribute_item_selector);
  } else if (element === 0x1056) {
    return new Ok(attribute_occurrence_private_creator);
  } else if (element === 0x1057) {
    return new Ok(selector_sequence_pointer_items);
  } else if (element === 0x1200) {
    return new Ok(scheduled_procedure_step_priority);
  } else if (element === 0x1202) {
    return new Ok(worklist_label);
  } else if (element === 0x1204) {
    return new Ok(procedure_step_label);
  } else if (element === 0x1210) {
    return new Ok(scheduled_processing_parameters_sequence);
  } else if (element === 0x1212) {
    return new Ok(performed_processing_parameters_sequence);
  } else if (element === 0x1216) {
    return new Ok(unified_procedure_step_performed_procedure_sequence);
  } else if (element === 0x1220) {
    return new Ok(related_procedure_step_sequence);
  } else if (element === 0x1222) {
    return new Ok(procedure_step_relationship_type);
  } else if (element === 0x1224) {
    return new Ok(replaced_procedure_step_sequence);
  } else if (element === 0x1230) {
    return new Ok(deletion_lock);
  } else if (element === 0x1234) {
    return new Ok(receiving_ae);
  } else if (element === 0x1236) {
    return new Ok(requesting_ae);
  } else if (element === 0x1238) {
    return new Ok(reason_for_cancellation);
  } else if (element === 0x1242) {
    return new Ok(scp_status);
  } else if (element === 0x1244) {
    return new Ok(subscription_list_status);
  } else if (element === 0x1246) {
    return new Ok(unified_procedure_step_list_status);
  } else if (element === 0x1324) {
    return new Ok(beam_order_index);
  } else if (element === 0x1338) {
    return new Ok(double_exposure_meterset);
  } else if (element === 0x133A) {
    return new Ok(double_exposure_field_delta);
  } else if (element === 0x1401) {
    return new Ok(brachy_task_sequence);
  } else if (element === 0x1402) {
    return new Ok(continuation_start_total_reference_air_kerma);
  } else if (element === 0x1403) {
    return new Ok(continuation_end_total_reference_air_kerma);
  } else if (element === 0x1404) {
    return new Ok(continuation_pulse_number);
  } else if (element === 0x1405) {
    return new Ok(channel_delivery_order_sequence);
  } else if (element === 0x1406) {
    return new Ok(referenced_channel_number);
  } else if (element === 0x1407) {
    return new Ok(start_cumulative_time_weight);
  } else if (element === 0x1408) {
    return new Ok(end_cumulative_time_weight);
  } else if (element === 0x1409) {
    return new Ok(omitted_channel_sequence);
  } else if (element === 0x140A) {
    return new Ok(reason_for_channel_omission);
  } else if (element === 0x140B) {
    return new Ok(reason_for_channel_omission_description);
  } else if (element === 0x140C) {
    return new Ok(channel_delivery_order_index);
  } else if (element === 0x140D) {
    return new Ok(channel_delivery_continuation_sequence);
  } else if (element === 0x140E) {
    return new Ok(omitted_application_setup_sequence);
  } else {
    return new Error(undefined);
  }
}

export const implant_assembly_template_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x1),
  "Implant Assembly Template Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const implant_assembly_template_issuer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x3),
  "Implant Assembly Template Issuer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const implant_assembly_template_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x6),
  "Implant Assembly Template Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const replaced_implant_assembly_template_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x8),
  "Replaced Implant Assembly Template Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_assembly_template_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0xA),
  "Implant Assembly Template Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const original_implant_assembly_template_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0xC),
  "Original Implant Assembly Template Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const derivation_implant_assembly_template_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0xE),
  "Derivation Implant Assembly Template Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_assembly_template_target_anatomy_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x10),
  "Implant Assembly Template Target Anatomy Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const procedure_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x20),
  "Procedure Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surgical_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x30),
  "Surgical Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const component_types_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x32),
  "Component Types Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const component_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x34),
  "Component Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const exclusive_component_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x36),
  "Exclusive Component Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const mandatory_component_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x38),
  "Mandatory Component Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const component_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x40),
  "Component Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const component_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x55),
  "Component ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const component_assembly_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x60),
  "Component Assembly Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const component_1_referenced_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x70),
  "Component 1 Referenced ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const component_1_referenced_mating_feature_set_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x80),
  "Component 1 Referenced Mating Feature Set ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const component_1_referenced_mating_feature_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0x90),
  "Component 1 Referenced Mating Feature ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const component_2_referenced_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0xA0),
  "Component 2 Referenced ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const component_2_referenced_mating_feature_set_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0xB0),
  "Component 2 Referenced Mating Feature Set ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const component_2_referenced_mating_feature_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x76, 0xC0),
  "Component 2 Referenced Mating Feature ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

function find_element_in_group_0076(element) {
  if (element === 0x1) {
    return new Ok(implant_assembly_template_name);
  } else if (element === 0x3) {
    return new Ok(implant_assembly_template_issuer);
  } else if (element === 0x6) {
    return new Ok(implant_assembly_template_version);
  } else if (element === 0x8) {
    return new Ok(replaced_implant_assembly_template_sequence);
  } else if (element === 0xA) {
    return new Ok(implant_assembly_template_type);
  } else if (element === 0xC) {
    return new Ok(original_implant_assembly_template_sequence);
  } else if (element === 0xE) {
    return new Ok(derivation_implant_assembly_template_sequence);
  } else if (element === 0x10) {
    return new Ok(implant_assembly_template_target_anatomy_sequence);
  } else if (element === 0x20) {
    return new Ok(procedure_type_code_sequence);
  } else if (element === 0x30) {
    return new Ok(surgical_technique);
  } else if (element === 0x32) {
    return new Ok(component_types_sequence);
  } else if (element === 0x34) {
    return new Ok(component_type_code_sequence);
  } else if (element === 0x36) {
    return new Ok(exclusive_component_type);
  } else if (element === 0x38) {
    return new Ok(mandatory_component_type);
  } else if (element === 0x40) {
    return new Ok(component_sequence);
  } else if (element === 0x55) {
    return new Ok(component_id);
  } else if (element === 0x60) {
    return new Ok(component_assembly_sequence);
  } else if (element === 0x70) {
    return new Ok(component_1_referenced_id);
  } else if (element === 0x80) {
    return new Ok(component_1_referenced_mating_feature_set_id);
  } else if (element === 0x90) {
    return new Ok(component_1_referenced_mating_feature_id);
  } else if (element === 0xA0) {
    return new Ok(component_2_referenced_id);
  } else if (element === 0xB0) {
    return new Ok(component_2_referenced_mating_feature_set_id);
  } else if (element === 0xC0) {
    return new Ok(component_2_referenced_mating_feature_id);
  } else {
    return new Error(undefined);
  }
}

export const implant_template_group_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x1),
  "Implant Template Group Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const implant_template_group_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x10),
  "Implant Template Group Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const implant_template_group_issuer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x20),
  "Implant Template Group Issuer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const implant_template_group_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x24),
  "Implant Template Group Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const replaced_implant_template_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x26),
  "Replaced Implant Template Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_template_group_target_anatomy_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x28),
  "Implant Template Group Target Anatomy Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_template_group_members_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x2A),
  "Implant Template Group Members Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_template_group_member_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x2E),
  "Implant Template Group Member ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const three_d_implant_template_group_member_matching_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x50),
  "3D Implant Template Group Member Matching Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const three_d_implant_template_group_member_matching_axes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x60),
  "3D Implant Template Group Member Matching Axes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  /* @__PURE__ */ new ValueMultiplicity(9, /* @__PURE__ */ new Some(9)),
);

export const implant_template_group_member_matching_2d_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x70),
  "Implant Template Group Member Matching 2D Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const two_d_implant_template_group_member_matching_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0x90),
  "2D Implant Template Group Member Matching Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const two_d_implant_template_group_member_matching_axes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0xA0),
  "2D Implant Template Group Member Matching Axes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_4,
);

export const implant_template_group_variation_dimension_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0xB0),
  "Implant Template Group Variation Dimension Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const implant_template_group_variation_dimension_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0xB2),
  "Implant Template Group Variation Dimension Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const implant_template_group_variation_dimension_rank_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0xB4),
  "Implant Template Group Variation Dimension Rank Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_implant_template_group_member_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0xB6),
  "Referenced Implant Template Group Member ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const implant_template_group_variation_dimension_rank = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x78, 0xB8),
  "Implant Template Group Variation Dimension Rank",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

function find_element_in_group_0078(element) {
  if (element === 0x1) {
    return new Ok(implant_template_group_name);
  } else if (element === 0x10) {
    return new Ok(implant_template_group_description);
  } else if (element === 0x20) {
    return new Ok(implant_template_group_issuer);
  } else if (element === 0x24) {
    return new Ok(implant_template_group_version);
  } else if (element === 0x26) {
    return new Ok(replaced_implant_template_group_sequence);
  } else if (element === 0x28) {
    return new Ok(implant_template_group_target_anatomy_sequence);
  } else if (element === 0x2A) {
    return new Ok(implant_template_group_members_sequence);
  } else if (element === 0x2E) {
    return new Ok(implant_template_group_member_id);
  } else if (element === 0x50) {
    return new Ok(three_d_implant_template_group_member_matching_point);
  } else if (element === 0x60) {
    return new Ok(three_d_implant_template_group_member_matching_axes);
  } else if (element === 0x70) {
    return new Ok(
      implant_template_group_member_matching_2d_coordinates_sequence,
    );
  } else if (element === 0x90) {
    return new Ok(two_d_implant_template_group_member_matching_point);
  } else if (element === 0xA0) {
    return new Ok(two_d_implant_template_group_member_matching_axes);
  } else if (element === 0xB0) {
    return new Ok(implant_template_group_variation_dimension_sequence);
  } else if (element === 0xB2) {
    return new Ok(implant_template_group_variation_dimension_name);
  } else if (element === 0xB4) {
    return new Ok(implant_template_group_variation_dimension_rank_sequence);
  } else if (element === 0xB6) {
    return new Ok(referenced_implant_template_group_member_id);
  } else if (element === 0xB8) {
    return new Ok(implant_template_group_variation_dimension_rank);
  } else {
    return new Error(undefined);
  }
}

export const surface_scan_acquisition_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x1),
  "Surface Scan Acquisition Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const surface_scan_mode_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x2),
  "Surface Scan Mode Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const registration_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x3),
  "Registration Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const shot_duration_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x4),
  "Shot Duration Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const shot_offset_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x5),
  "Shot Offset Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const surface_point_presentation_value_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x6),
  "Surface Point Presentation Value Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const surface_point_color_cie_lab_value_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x7),
  "Surface Point Color CIELab Value Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3_to_n,
);

export const uv_mapping_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x8),
  "UV Mapping Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const texture_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x9),
  "Texture Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const u_value_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x10),
  "U Value Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const v_value_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x11),
  "V Value Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const referenced_texture_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x12),
  "Referenced Texture Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_surface_data_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x80, 0x13),
  "Referenced Surface Data Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_0080(element) {
  if (element === 0x1) {
    return new Ok(surface_scan_acquisition_type_code_sequence);
  } else if (element === 0x2) {
    return new Ok(surface_scan_mode_code_sequence);
  } else if (element === 0x3) {
    return new Ok(registration_method_code_sequence);
  } else if (element === 0x4) {
    return new Ok(shot_duration_time);
  } else if (element === 0x5) {
    return new Ok(shot_offset_time);
  } else if (element === 0x6) {
    return new Ok(surface_point_presentation_value_data);
  } else if (element === 0x7) {
    return new Ok(surface_point_color_cie_lab_value_data);
  } else if (element === 0x8) {
    return new Ok(uv_mapping_sequence);
  } else if (element === 0x9) {
    return new Ok(texture_label);
  } else if (element === 0x10) {
    return new Ok(u_value_data);
  } else if (element === 0x11) {
    return new Ok(v_value_data);
  } else if (element === 0x12) {
    return new Ok(referenced_texture_sequence);
  } else if (element === 0x13) {
    return new Ok(referenced_surface_data_sequence);
  } else {
    return new Error(undefined);
  }
}

export const assessment_summary = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x1),
  "Assessment Summary",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const assessment_summary_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x3),
  "Assessment Summary Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const assessed_sop_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x4),
  "Assessed SOP Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_comparison_sop_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x5),
  "Referenced Comparison SOP Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_assessment_observations = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x6),
  "Number of Assessment Observations",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const assessment_observations_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x7),
  "Assessment Observations Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const observation_significance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x8),
  "Observation Significance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const observation_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0xA),
  "Observation Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const structured_constraint_observation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0xC),
  "Structured Constraint Observation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assessed_attribute_value_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x10),
  "Assessed Attribute Value Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assessment_set_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x16),
  "Assessment Set ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const assessment_requester_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x17),
  "Assessment Requester Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const selector_attribute_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x18),
  "Selector Attribute Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const selector_attribute_keyword = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x19),
  "Selector Attribute Keyword",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const assessment_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x21),
  "Assessment Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const observation_basis_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x22),
  "Observation Basis Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const assessment_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x23),
  "Assessment Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const constraint_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x32),
  "Constraint Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const specification_selection_guidance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x33),
  "Specification Selection Guidance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const constraint_value_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x34),
  "Constraint Value Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recommended_default_value_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x35),
  "Recommended Default Value Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const constraint_violation_significance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x36),
  "Constraint Violation Significance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const constraint_violation_condition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x37),
  "Constraint Violation Condition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const modifiable_constraint_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x82, 0x38),
  "Modifiable Constraint Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_0082(element) {
  if (element === 0x1) {
    return new Ok(assessment_summary);
  } else if (element === 0x3) {
    return new Ok(assessment_summary_description);
  } else if (element === 0x4) {
    return new Ok(assessed_sop_instance_sequence);
  } else if (element === 0x5) {
    return new Ok(referenced_comparison_sop_instance_sequence);
  } else if (element === 0x6) {
    return new Ok(number_of_assessment_observations);
  } else if (element === 0x7) {
    return new Ok(assessment_observations_sequence);
  } else if (element === 0x8) {
    return new Ok(observation_significance);
  } else if (element === 0xA) {
    return new Ok(observation_description);
  } else if (element === 0xC) {
    return new Ok(structured_constraint_observation_sequence);
  } else if (element === 0x10) {
    return new Ok(assessed_attribute_value_sequence);
  } else if (element === 0x16) {
    return new Ok(assessment_set_id);
  } else if (element === 0x17) {
    return new Ok(assessment_requester_sequence);
  } else if (element === 0x18) {
    return new Ok(selector_attribute_name);
  } else if (element === 0x19) {
    return new Ok(selector_attribute_keyword);
  } else if (element === 0x21) {
    return new Ok(assessment_type_code_sequence);
  } else if (element === 0x22) {
    return new Ok(observation_basis_code_sequence);
  } else if (element === 0x23) {
    return new Ok(assessment_label);
  } else if (element === 0x32) {
    return new Ok(constraint_type);
  } else if (element === 0x33) {
    return new Ok(specification_selection_guidance);
  } else if (element === 0x34) {
    return new Ok(constraint_value_sequence);
  } else if (element === 0x35) {
    return new Ok(recommended_default_value_sequence);
  } else if (element === 0x36) {
    return new Ok(constraint_violation_significance);
  } else if (element === 0x37) {
    return new Ok(constraint_violation_condition);
  } else if (element === 0x38) {
    return new Ok(modifiable_constraint_flag);
  } else {
    return new Error(undefined);
  }
}

export const storage_media_file_set_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x88, 0x130),
  "Storage Media File-set ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const storage_media_file_set_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x88, 0x140),
  "Storage Media File-set UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const icon_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x88, 0x200),
  "Icon Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const topic_title = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x88, 0x904),
  "Topic Title",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const topic_subject = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x88, 0x906),
  "Topic Subject",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const topic_author = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x88, 0x910),
  "Topic Author",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const topic_keywords = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x88, 0x912),
  "Topic Keywords",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(32)),
);

function find_element_in_group_0088(element) {
  if (element === 0x130) {
    return new Ok(storage_media_file_set_id);
  } else if (element === 0x140) {
    return new Ok(storage_media_file_set_uid);
  } else if (element === 0x200) {
    return new Ok(icon_image_sequence);
  } else if (element === 0x904) {
    return new Ok(topic_title);
  } else if (element === 0x906) {
    return new Ok(topic_subject);
  } else if (element === 0x910) {
    return new Ok(topic_author);
  } else if (element === 0x912) {
    return new Ok(topic_keywords);
  } else {
    return new Error(undefined);
  }
}

export const sop_instance_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x100, 0x410),
  "SOP Instance Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const sop_authorization_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x100, 0x420),
  "SOP Authorization DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const sop_authorization_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x100, 0x424),
  "SOP Authorization Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const authorization_equipment_certification_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x100, 0x426),
  "Authorization Equipment Certification Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

function find_element_in_group_0100(element) {
  if (element === 0x410) {
    return new Ok(sop_instance_status);
  } else if (element === 0x420) {
    return new Ok(sop_authorization_date_time);
  } else if (element === 0x424) {
    return new Ok(sop_authorization_comment);
  } else if (element === 0x426) {
    return new Ok(authorization_equipment_certification_number);
  } else {
    return new Error(undefined);
  }
}

export const macid_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x5),
  "MAC ID Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const mac_calculation_transfer_syntax_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x10),
  "MAC Calculation Transfer Syntax UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const mac_algorithm = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x15),
  "MAC Algorithm",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const data_elements_signed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x20),
  "Data Elements Signed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const digital_signature_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x100),
  "Digital Signature UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const digital_signature_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x105),
  "Digital Signature DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const certificate_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x110),
  "Certificate Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const certificate_of_signer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x115),
  "Certificate of Signer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const signature = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x120),
  "Signature",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const certified_timestamp_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x305),
  "Certified Timestamp Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const certified_timestamp = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x310),
  "Certified Timestamp",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const digital_signature_purpose_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x401),
  "Digital Signature Purpose Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_digital_signature_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x402),
  "Referenced Digital Signature Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_sop_instance_mac_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x403),
  "Referenced SOP Instance MAC Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mac = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x404),
  "MAC",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const encrypted_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x500),
  "Encrypted Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const encrypted_content_transfer_syntax_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x510),
  "Encrypted Content Transfer Syntax UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const encrypted_content = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x520),
  "Encrypted Content",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const modified_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x550),
  "Modified Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const nonconforming_modified_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x551),
  "Nonconforming Modified Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const nonconforming_data_element_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x552),
  "Nonconforming Data Element Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const original_attributes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x561),
  "Original Attributes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const attribute_modification_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x562),
  "Attribute Modification DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const modifying_system = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x563),
  "Modifying System",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_of_previous_values = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x564),
  "Source of Previous Values",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const reason_for_the_attribute_modification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x565),
  "Reason for the Attribute Modification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const instance_origin_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x400, 0x600),
  "Instance Origin Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_0400(element) {
  if (element === 0x5) {
    return new Ok(macid_number);
  } else if (element === 0x10) {
    return new Ok(mac_calculation_transfer_syntax_uid);
  } else if (element === 0x15) {
    return new Ok(mac_algorithm);
  } else if (element === 0x20) {
    return new Ok(data_elements_signed);
  } else if (element === 0x100) {
    return new Ok(digital_signature_uid);
  } else if (element === 0x105) {
    return new Ok(digital_signature_date_time);
  } else if (element === 0x110) {
    return new Ok(certificate_type);
  } else if (element === 0x115) {
    return new Ok(certificate_of_signer);
  } else if (element === 0x120) {
    return new Ok(signature);
  } else if (element === 0x305) {
    return new Ok(certified_timestamp_type);
  } else if (element === 0x310) {
    return new Ok(certified_timestamp);
  } else if (element === 0x401) {
    return new Ok(digital_signature_purpose_code_sequence);
  } else if (element === 0x402) {
    return new Ok(referenced_digital_signature_sequence);
  } else if (element === 0x403) {
    return new Ok(referenced_sop_instance_mac_sequence);
  } else if (element === 0x404) {
    return new Ok(mac);
  } else if (element === 0x500) {
    return new Ok(encrypted_attributes_sequence);
  } else if (element === 0x510) {
    return new Ok(encrypted_content_transfer_syntax_uid);
  } else if (element === 0x520) {
    return new Ok(encrypted_content);
  } else if (element === 0x550) {
    return new Ok(modified_attributes_sequence);
  } else if (element === 0x551) {
    return new Ok(nonconforming_modified_attributes_sequence);
  } else if (element === 0x552) {
    return new Ok(nonconforming_data_element_value);
  } else if (element === 0x561) {
    return new Ok(original_attributes_sequence);
  } else if (element === 0x562) {
    return new Ok(attribute_modification_date_time);
  } else if (element === 0x563) {
    return new Ok(modifying_system);
  } else if (element === 0x564) {
    return new Ok(source_of_previous_values);
  } else if (element === 0x565) {
    return new Ok(reason_for_the_attribute_modification);
  } else if (element === 0x600) {
    return new Ok(instance_origin_status);
  } else {
    return new Error(undefined);
  }
}

export const escape_triplet = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x1000, 0x0),
  "Escape Triplet",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const run_length_triplet = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x1000, 0x1),
  "Run Length Triplet",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const huffman_table_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x1000, 0x2),
  "Huffman Table Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const huffman_table_triplet = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x1000, 0x3),
  "Huffman Table Triplet",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const shift_table_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x1000, 0x4),
  "Shift Table Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const shift_table_triplet = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x1000, 0x5),
  "Shift Table Triplet",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_3,
);

export const zonal_map = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x1010, 0x0),
  "Zonal Map",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const number_of_copies = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x10),
  "Number of Copies",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const printer_configuration_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x1E),
  "Printer Configuration Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const print_priority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x20),
  "Print Priority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const medium_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x30),
  "Medium Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const film_destination = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x40),
  "Film Destination",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const film_session_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x50),
  "Film Session Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const memory_allocation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x60),
  "Memory Allocation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const maximum_memory_allocation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x61),
  "Maximum Memory Allocation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const color_image_printing_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x62),
  "Color Image Printing Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const collation_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x63),
  "Collation Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const annotation_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x65),
  "Annotation Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_overlay_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x67),
  "Image Overlay Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const presentation_lut_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x69),
  "Presentation LUT Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const image_box_presentation_lut_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x6A),
  "Image Box Presentation LUT Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const memory_bit_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0xA0),
  "Memory Bit Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const printing_bit_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0xA1),
  "Printing Bit Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const media_installed_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0xA2),
  "Media Installed Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const other_media_available_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0xA4),
  "Other Media Available Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const supported_image_display_formats_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0xA8),
  "Supported Image Display Formats Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_film_box_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x500),
  "Referenced Film Box Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_stored_print_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2000, 0x510),
  "Referenced Stored Print Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2000(element) {
  if (element === 0x10) {
    return new Ok(number_of_copies);
  } else if (element === 0x1E) {
    return new Ok(printer_configuration_sequence);
  } else if (element === 0x20) {
    return new Ok(print_priority);
  } else if (element === 0x30) {
    return new Ok(medium_type);
  } else if (element === 0x40) {
    return new Ok(film_destination);
  } else if (element === 0x50) {
    return new Ok(film_session_label);
  } else if (element === 0x60) {
    return new Ok(memory_allocation);
  } else if (element === 0x61) {
    return new Ok(maximum_memory_allocation);
  } else if (element === 0x62) {
    return new Ok(color_image_printing_flag);
  } else if (element === 0x63) {
    return new Ok(collation_flag);
  } else if (element === 0x65) {
    return new Ok(annotation_flag);
  } else if (element === 0x67) {
    return new Ok(image_overlay_flag);
  } else if (element === 0x69) {
    return new Ok(presentation_lut_flag);
  } else if (element === 0x6A) {
    return new Ok(image_box_presentation_lut_flag);
  } else if (element === 0xA0) {
    return new Ok(memory_bit_depth);
  } else if (element === 0xA1) {
    return new Ok(printing_bit_depth);
  } else if (element === 0xA2) {
    return new Ok(media_installed_sequence);
  } else if (element === 0xA4) {
    return new Ok(other_media_available_sequence);
  } else if (element === 0xA8) {
    return new Ok(supported_image_display_formats_sequence);
  } else if (element === 0x500) {
    return new Ok(referenced_film_box_sequence);
  } else if (element === 0x510) {
    return new Ok(referenced_stored_print_sequence);
  } else {
    return new Error(undefined);
  }
}

export const image_display_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x10),
  "Image Display Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const annotation_display_format_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x30),
  "Annotation Display Format ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const film_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x40),
  "Film Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const film_size_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x50),
  "Film Size ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const printer_resolution_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x52),
  "Printer Resolution ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const default_printer_resolution_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x54),
  "Default Printer Resolution ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const magnification_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x60),
  "Magnification Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const smoothing_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x80),
  "Smoothing Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const default_magnification_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0xA6),
  "Default Magnification Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const other_magnification_types_available = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0xA7),
  "Other Magnification Types Available",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const default_smoothing_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0xA8),
  "Default Smoothing Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const other_smoothing_types_available = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0xA9),
  "Other Smoothing Types Available",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const border_density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x100),
  "Border Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const empty_image_density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x110),
  "Empty Image Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const min_density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x120),
  "Min Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const max_density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x130),
  "Max Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const trim = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x140),
  "Trim",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const configuration_information = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x150),
  "Configuration Information",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const configuration_information_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x152),
  "Configuration Information Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const maximum_collated_films = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x154),
  "Maximum Collated Films",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const illumination = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x15E),
  "Illumination",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const reflected_ambient_light = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x160),
  "Reflected Ambient Light",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const printer_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x376),
  "Printer Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const referenced_film_session_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x500),
  "Referenced Film Session Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_image_box_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x510),
  "Referenced Image Box Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_basic_annotation_box_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2010, 0x520),
  "Referenced Basic Annotation Box Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2010(element) {
  if (element === 0x10) {
    return new Ok(image_display_format);
  } else if (element === 0x30) {
    return new Ok(annotation_display_format_id);
  } else if (element === 0x40) {
    return new Ok(film_orientation);
  } else if (element === 0x50) {
    return new Ok(film_size_id);
  } else if (element === 0x52) {
    return new Ok(printer_resolution_id);
  } else if (element === 0x54) {
    return new Ok(default_printer_resolution_id);
  } else if (element === 0x60) {
    return new Ok(magnification_type);
  } else if (element === 0x80) {
    return new Ok(smoothing_type);
  } else if (element === 0xA6) {
    return new Ok(default_magnification_type);
  } else if (element === 0xA7) {
    return new Ok(other_magnification_types_available);
  } else if (element === 0xA8) {
    return new Ok(default_smoothing_type);
  } else if (element === 0xA9) {
    return new Ok(other_smoothing_types_available);
  } else if (element === 0x100) {
    return new Ok(border_density);
  } else if (element === 0x110) {
    return new Ok(empty_image_density);
  } else if (element === 0x120) {
    return new Ok(min_density);
  } else if (element === 0x130) {
    return new Ok(max_density);
  } else if (element === 0x140) {
    return new Ok(trim);
  } else if (element === 0x150) {
    return new Ok(configuration_information);
  } else if (element === 0x152) {
    return new Ok(configuration_information_description);
  } else if (element === 0x154) {
    return new Ok(maximum_collated_films);
  } else if (element === 0x15E) {
    return new Ok(illumination);
  } else if (element === 0x160) {
    return new Ok(reflected_ambient_light);
  } else if (element === 0x376) {
    return new Ok(printer_pixel_spacing);
  } else if (element === 0x500) {
    return new Ok(referenced_film_session_sequence);
  } else if (element === 0x510) {
    return new Ok(referenced_image_box_sequence);
  } else if (element === 0x520) {
    return new Ok(referenced_basic_annotation_box_sequence);
  } else {
    return new Error(undefined);
  }
}

export const image_box_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x10),
  "Image Box Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const polarity = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x20),
  "Polarity",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const requested_image_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x30),
  "Requested Image Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const requested_decimate_crop_behavior = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x40),
  "Requested Decimate/Crop Behavior",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const requested_resolution_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x50),
  "Requested Resolution ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const requested_image_size_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0xA0),
  "Requested Image Size Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const decimate_crop_result = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0xA2),
  "Decimate/Crop Result",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const basic_grayscale_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x110),
  "Basic Grayscale Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const basic_color_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x111),
  "Basic Color Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_image_overlay_box_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x130),
  "Referenced Image Overlay Box Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_voilut_box_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2020, 0x140),
  "Referenced VOI LUT Box Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2020(element) {
  if (element === 0x10) {
    return new Ok(image_box_position);
  } else if (element === 0x20) {
    return new Ok(polarity);
  } else if (element === 0x30) {
    return new Ok(requested_image_size);
  } else if (element === 0x40) {
    return new Ok(requested_decimate_crop_behavior);
  } else if (element === 0x50) {
    return new Ok(requested_resolution_id);
  } else if (element === 0xA0) {
    return new Ok(requested_image_size_flag);
  } else if (element === 0xA2) {
    return new Ok(decimate_crop_result);
  } else if (element === 0x110) {
    return new Ok(basic_grayscale_image_sequence);
  } else if (element === 0x111) {
    return new Ok(basic_color_image_sequence);
  } else if (element === 0x130) {
    return new Ok(referenced_image_overlay_box_sequence);
  } else if (element === 0x140) {
    return new Ok(referenced_voilut_box_sequence);
  } else {
    return new Error(undefined);
  }
}

export const annotation_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2030, 0x10),
  "Annotation Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const text_string = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2030, 0x20),
  "Text String",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

function find_element_in_group_2030(element) {
  if (element === 0x10) {
    return new Ok(annotation_position);
  } else if (element === 0x20) {
    return new Ok(text_string);
  } else {
    return new Error(undefined);
  }
}

export const referenced_overlay_plane_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x10),
  "Referenced Overlay Plane Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_overlay_plane_groups = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x11),
  "Referenced Overlay Plane Groups",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(99)),
);

export const overlay_pixel_data_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x20),
  "Overlay Pixel Data Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const overlay_magnification_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x60),
  "Overlay Magnification Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_smoothing_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x70),
  "Overlay Smoothing Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_or_image_magnification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x72),
  "Overlay or Image Magnification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const magnify_to_number_of_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x74),
  "Magnify to Number of Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_foreground_density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x80),
  "Overlay Foreground Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_background_density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x82),
  "Overlay Background Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x90),
  "Overlay Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const threshold_density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x100),
  "Threshold Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_image_box_sequence_retired = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2040, 0x500),
  "Referenced Image Box Sequence (Retired)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2040(element) {
  if (element === 0x10) {
    return new Ok(referenced_overlay_plane_sequence);
  } else if (element === 0x11) {
    return new Ok(referenced_overlay_plane_groups);
  } else if (element === 0x20) {
    return new Ok(overlay_pixel_data_sequence);
  } else if (element === 0x60) {
    return new Ok(overlay_magnification_type);
  } else if (element === 0x70) {
    return new Ok(overlay_smoothing_type);
  } else if (element === 0x72) {
    return new Ok(overlay_or_image_magnification);
  } else if (element === 0x74) {
    return new Ok(magnify_to_number_of_columns);
  } else if (element === 0x80) {
    return new Ok(overlay_foreground_density);
  } else if (element === 0x82) {
    return new Ok(overlay_background_density);
  } else if (element === 0x90) {
    return new Ok(overlay_mode);
  } else if (element === 0x100) {
    return new Ok(threshold_density);
  } else if (element === 0x500) {
    return new Ok(referenced_image_box_sequence_retired);
  } else {
    return new Error(undefined);
  }
}

export const presentation_lut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2050, 0x10),
  "Presentation LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const presentation_lut_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2050, 0x20),
  "Presentation LUT Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_presentation_lut_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2050, 0x500),
  "Referenced Presentation LUT Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2050(element) {
  if (element === 0x10) {
    return new Ok(presentation_lut_sequence);
  } else if (element === 0x20) {
    return new Ok(presentation_lut_shape);
  } else if (element === 0x500) {
    return new Ok(referenced_presentation_lut_sequence);
  } else {
    return new Error(undefined);
  }
}

export const print_job_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x10),
  "Print Job ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const execution_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x20),
  "Execution Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const execution_status_info = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x30),
  "Execution Status Info",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const creation_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x40),
  "Creation Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const creation_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x50),
  "Creation Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const originator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x70),
  "Originator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const destination_ae = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x140),
  "Destination AE",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ApplicationEntity()]),
  vm_1,
);

export const owner_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x160),
  "Owner ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const number_of_films = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x170),
  "Number of Films",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_print_job_sequence_pull_stored_print = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2100, 0x500),
  "Referenced Print Job Sequence (Pull Stored Print)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2100(element) {
  if (element === 0x10) {
    return new Ok(print_job_id);
  } else if (element === 0x20) {
    return new Ok(execution_status);
  } else if (element === 0x30) {
    return new Ok(execution_status_info);
  } else if (element === 0x40) {
    return new Ok(creation_date);
  } else if (element === 0x50) {
    return new Ok(creation_time);
  } else if (element === 0x70) {
    return new Ok(originator);
  } else if (element === 0x140) {
    return new Ok(destination_ae);
  } else if (element === 0x160) {
    return new Ok(owner_id);
  } else if (element === 0x170) {
    return new Ok(number_of_films);
  } else if (element === 0x500) {
    return new Ok(referenced_print_job_sequence_pull_stored_print);
  } else {
    return new Error(undefined);
  }
}

export const printer_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2110, 0x10),
  "Printer Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const printer_status_info = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2110, 0x20),
  "Printer Status Info",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const printer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2110, 0x30),
  "Printer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const print_queue_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2110, 0x99),
  "Print Queue ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

function find_element_in_group_2110(element) {
  if (element === 0x10) {
    return new Ok(printer_status);
  } else if (element === 0x20) {
    return new Ok(printer_status_info);
  } else if (element === 0x30) {
    return new Ok(printer_name);
  } else if (element === 0x99) {
    return new Ok(print_queue_id);
  } else {
    return new Error(undefined);
  }
}

export const queue_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2120, 0x10),
  "Queue Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const print_job_description_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2120, 0x50),
  "Print Job Description Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_print_job_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2120, 0x70),
  "Referenced Print Job Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2120(element) {
  if (element === 0x10) {
    return new Ok(queue_status);
  } else if (element === 0x50) {
    return new Ok(print_job_description_sequence);
  } else if (element === 0x70) {
    return new Ok(referenced_print_job_sequence);
  } else {
    return new Error(undefined);
  }
}

export const print_management_capabilities_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0x10),
  "Print Management Capabilities Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const printer_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0x15),
  "Printer Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const film_box_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0x30),
  "Film Box Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_box_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0x40),
  "Image Box Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const annotation_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0x50),
  "Annotation Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_overlay_box_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0x60),
  "Image Overlay Box Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const presentation_lut_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0x80),
  "Presentation LUT Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const proposed_study_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0xA0),
  "Proposed Study Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const original_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2130, 0xC0),
  "Original Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_2130(element) {
  if (element === 0x10) {
    return new Ok(print_management_capabilities_sequence);
  } else if (element === 0x15) {
    return new Ok(printer_characteristics_sequence);
  } else if (element === 0x30) {
    return new Ok(film_box_content_sequence);
  } else if (element === 0x40) {
    return new Ok(image_box_content_sequence);
  } else if (element === 0x50) {
    return new Ok(annotation_content_sequence);
  } else if (element === 0x60) {
    return new Ok(image_overlay_box_content_sequence);
  } else if (element === 0x80) {
    return new Ok(presentation_lut_content_sequence);
  } else if (element === 0xA0) {
    return new Ok(proposed_study_sequence);
  } else if (element === 0xC0) {
    return new Ok(original_image_sequence);
  } else {
    return new Error(undefined);
  }
}

export const label_using_information_extracted_from_instances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x1),
  "Label Using Information Extracted From Instances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const label_text = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x2),
  "Label Text",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const label_style_selection = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x3),
  "Label Style Selection",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const media_disposition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x4),
  "Media Disposition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const barcode_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x5),
  "Barcode Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const barcode_symbology = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x6),
  "Barcode Symbology",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const allow_media_splitting = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x7),
  "Allow Media Splitting",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const include_non_dicom_objects = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x8),
  "Include Non-DICOM Objects",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const include_display_application = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x9),
  "Include Display Application",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const preserve_composite_instances_after_media_creation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0xA),
  "Preserve Composite Instances After Media Creation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const total_number_of_pieces_of_media_created = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0xB),
  "Total Number of Pieces of Media Created",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const requested_media_application_profile = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0xC),
  "Requested Media Application Profile",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const referenced_storage_media_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0xD),
  "Referenced Storage Media Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const failure_attributes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0xE),
  "Failure Attributes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const allow_lossy_compression = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0xF),
  "Allow Lossy Compression",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const request_priority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x2200, 0x20),
  "Request Priority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_2200(element) {
  if (element === 0x1) {
    return new Ok(label_using_information_extracted_from_instances);
  } else if (element === 0x2) {
    return new Ok(label_text);
  } else if (element === 0x3) {
    return new Ok(label_style_selection);
  } else if (element === 0x4) {
    return new Ok(media_disposition);
  } else if (element === 0x5) {
    return new Ok(barcode_value);
  } else if (element === 0x6) {
    return new Ok(barcode_symbology);
  } else if (element === 0x7) {
    return new Ok(allow_media_splitting);
  } else if (element === 0x8) {
    return new Ok(include_non_dicom_objects);
  } else if (element === 0x9) {
    return new Ok(include_display_application);
  } else if (element === 0xA) {
    return new Ok(preserve_composite_instances_after_media_creation);
  } else if (element === 0xB) {
    return new Ok(total_number_of_pieces_of_media_created);
  } else if (element === 0xC) {
    return new Ok(requested_media_application_profile);
  } else if (element === 0xD) {
    return new Ok(referenced_storage_media_sequence);
  } else if (element === 0xE) {
    return new Ok(failure_attributes);
  } else if (element === 0xF) {
    return new Ok(allow_lossy_compression);
  } else if (element === 0x20) {
    return new Ok(request_priority);
  } else {
    return new Error(undefined);
  }
}

export const rt_image_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x2),
  "RT Image Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const rt_image_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x3),
  "RT Image Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const rt_image_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x4),
  "RT Image Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const reported_values_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0xA),
  "Reported Values Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_image_plane = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0xC),
  "RT Image Plane",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const x_ray_image_receptor_translation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0xD),
  "X-Ray Image Receptor Translation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const x_ray_image_receptor_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0xE),
  "X-Ray Image Receptor Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const rt_image_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x10),
  "RT Image Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_6,
);

export const image_plane_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x11),
  "Image Plane Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const rt_image_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x12),
  "RT Image Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const radiation_machine_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x20),
  "Radiation Machine Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const radiation_machine_sad = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x22),
  "Radiation Machine SAD",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radiation_machine_ssd = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x24),
  "Radiation Machine SSD",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const rt_image_sid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x26),
  "RT Image SID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_to_reference_object_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x28),
  "Source to Reference Object Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const fraction_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x29),
  "Fraction Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const exposure_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x30),
  "Exposure Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const meterset_exposure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x32),
  "Meterset Exposure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const diaphragm_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x34),
  "Diaphragm Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_4,
);

export const fluence_map_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x40),
  "Fluence Map Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fluence_data_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x41),
  "Fluence Data Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fluence_data_scale = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x42),
  "Fluence Data Scale",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const primary_fluence_mode_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x50),
  "Primary Fluence Mode Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fluence_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x51),
  "Fluence Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fluence_mode_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x52),
  "Fluence Mode ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const selected_frame_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x100),
  "Selected Frame Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const selected_frame_functional_groups_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x101),
  "Selected Frame Functional Groups Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_image_frame_general_content_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x102),
  "RT Image Frame General Content Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_image_frame_context_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x103),
  "RT Image Frame Context Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_image_scope_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x104),
  "RT Image Scope Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const beam_modifier_coordinates_presence_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x105),
  "Beam Modifier Coordinates Presence Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const start_cumulative_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x106),
  "Start Cumulative Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const stop_cumulative_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x107),
  "Stop Cumulative Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const rt_acquisition_patient_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x108),
  "RT Acquisition Patient Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_image_frame_imaging_device_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x109),
  "RT Image Frame Imaging Device Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_image_framek_v_radiation_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x10A),
  "RT Image Frame kV Radiation Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_image_frame_mv_radiation_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x10B),
  "RT Image Frame MV Radiation Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_image_frame_radiation_acquisition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x10C),
  "RT Image Frame Radiation Acquisition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const imaging_source_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x10D),
  "Imaging Source Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const image_receptor_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x10E),
  "Image Receptor Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const device_position_to_equipment_mapping_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x10F),
  "Device Position to Equipment Mapping Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  /* @__PURE__ */ new ValueMultiplicity(16, /* @__PURE__ */ new Some(16)),
);

export const device_position_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x110),
  "Device Position Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const imaging_source_location_specification_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x111),
  "Imaging Source Location Specification Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const imaging_device_location_matrix_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x112),
  "Imaging Device Location Matrix Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const imaging_device_location_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x113),
  "Imaging Device Location Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const imaging_aperture_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x114),
  "Imaging Aperture Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const imaging_aperture_specification_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x115),
  "Imaging Aperture Specification Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_acquisition_devices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x116),
  "Number of Acquisition Devices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const acquisition_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x117),
  "Acquisition Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_task_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x118),
  "Acquisition Task Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_task_workitem_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x119),
  "Acquisition Task Workitem Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_subtask_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x11A),
  "Acquisition Subtask Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const subtask_workitem_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x11B),
  "Subtask Workitem Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_task_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x11C),
  "Acquisition Task Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const acquisition_subtask_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x11D),
  "Acquisition Subtask Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_baseline_parameters_rt_radiation_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x11E),
  "Referenced Baseline Parameters RT Radiation Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const position_acquisition_template_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x11F),
  "Position Acquisition Template Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const position_acquisition_template_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x120),
  "Position Acquisition Template ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const position_acquisition_template_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x121),
  "Position Acquisition Template Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const position_acquisition_template_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x122),
  "Position Acquisition Template Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const position_acquisition_template_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x123),
  "Position Acquisition Template Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const acquisition_task_applicability_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x124),
  "Acquisition Task Applicability Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const projection_imaging_acquisition_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x125),
  "Projection Imaging Acquisition Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ct_imaging_acquisition_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x126),
  "CT Imaging Acquisition Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const kv_imaging_generation_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x127),
  "KV Imaging Generation Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const mv_imaging_generation_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x128),
  "MV Imaging Generation Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const acquisition_signal_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x129),
  "Acquisition Signal Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const acquisition_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x12A),
  "Acquisition Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scan_start_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x12B),
  "Scan Start Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scan_stop_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x12C),
  "Scan Stop Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const imaging_source_to_beam_modifier_definition_plane_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x12D),
  "Imaging Source to Beam Modifier Definition Plane Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const scan_arc_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x12E),
  "Scan Arc Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const detector_positioning_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x12F),
  "Detector Positioning Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const additional_rt_accessory_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x130),
  "Additional RT Accessory Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const device_specific_acquisition_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x131),
  "Device-Specific Acquisition Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_position_reference_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x132),
  "Referenced Position Reference Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const energy_derivation_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x133),
  "Energy Derivation Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const maximum_cumulative_meterset_exposure = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x134),
  "Maximum Cumulative Meterset Exposure",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const acquisition_initiation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3002, 0x135),
  "Acquisition Initiation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_3002(element) {
  if (element === 0x2) {
    return new Ok(rt_image_label);
  } else if (element === 0x3) {
    return new Ok(rt_image_name);
  } else if (element === 0x4) {
    return new Ok(rt_image_description);
  } else if (element === 0xA) {
    return new Ok(reported_values_origin);
  } else if (element === 0xC) {
    return new Ok(rt_image_plane);
  } else if (element === 0xD) {
    return new Ok(x_ray_image_receptor_translation);
  } else if (element === 0xE) {
    return new Ok(x_ray_image_receptor_angle);
  } else if (element === 0x10) {
    return new Ok(rt_image_orientation);
  } else if (element === 0x11) {
    return new Ok(image_plane_pixel_spacing);
  } else if (element === 0x12) {
    return new Ok(rt_image_position);
  } else if (element === 0x20) {
    return new Ok(radiation_machine_name);
  } else if (element === 0x22) {
    return new Ok(radiation_machine_sad);
  } else if (element === 0x24) {
    return new Ok(radiation_machine_ssd);
  } else if (element === 0x26) {
    return new Ok(rt_image_sid);
  } else if (element === 0x28) {
    return new Ok(source_to_reference_object_distance);
  } else if (element === 0x29) {
    return new Ok(fraction_number);
  } else if (element === 0x30) {
    return new Ok(exposure_sequence);
  } else if (element === 0x32) {
    return new Ok(meterset_exposure);
  } else if (element === 0x34) {
    return new Ok(diaphragm_position);
  } else if (element === 0x40) {
    return new Ok(fluence_map_sequence);
  } else if (element === 0x41) {
    return new Ok(fluence_data_source);
  } else if (element === 0x42) {
    return new Ok(fluence_data_scale);
  } else if (element === 0x50) {
    return new Ok(primary_fluence_mode_sequence);
  } else if (element === 0x51) {
    return new Ok(fluence_mode);
  } else if (element === 0x52) {
    return new Ok(fluence_mode_id);
  } else if (element === 0x100) {
    return new Ok(selected_frame_number);
  } else if (element === 0x101) {
    return new Ok(selected_frame_functional_groups_sequence);
  } else if (element === 0x102) {
    return new Ok(rt_image_frame_general_content_sequence);
  } else if (element === 0x103) {
    return new Ok(rt_image_frame_context_sequence);
  } else if (element === 0x104) {
    return new Ok(rt_image_scope_sequence);
  } else if (element === 0x105) {
    return new Ok(beam_modifier_coordinates_presence_flag);
  } else if (element === 0x106) {
    return new Ok(start_cumulative_meterset);
  } else if (element === 0x107) {
    return new Ok(stop_cumulative_meterset);
  } else if (element === 0x108) {
    return new Ok(rt_acquisition_patient_position_sequence);
  } else if (element === 0x109) {
    return new Ok(rt_image_frame_imaging_device_position_sequence);
  } else if (element === 0x10A) {
    return new Ok(rt_image_framek_v_radiation_acquisition_sequence);
  } else if (element === 0x10B) {
    return new Ok(rt_image_frame_mv_radiation_acquisition_sequence);
  } else if (element === 0x10C) {
    return new Ok(rt_image_frame_radiation_acquisition_sequence);
  } else if (element === 0x10D) {
    return new Ok(imaging_source_position_sequence);
  } else if (element === 0x10E) {
    return new Ok(image_receptor_position_sequence);
  } else if (element === 0x10F) {
    return new Ok(device_position_to_equipment_mapping_matrix);
  } else if (element === 0x110) {
    return new Ok(device_position_parameter_sequence);
  } else if (element === 0x111) {
    return new Ok(imaging_source_location_specification_type);
  } else if (element === 0x112) {
    return new Ok(imaging_device_location_matrix_sequence);
  } else if (element === 0x113) {
    return new Ok(imaging_device_location_parameter_sequence);
  } else if (element === 0x114) {
    return new Ok(imaging_aperture_sequence);
  } else if (element === 0x115) {
    return new Ok(imaging_aperture_specification_type);
  } else if (element === 0x116) {
    return new Ok(number_of_acquisition_devices);
  } else if (element === 0x117) {
    return new Ok(acquisition_device_sequence);
  } else if (element === 0x118) {
    return new Ok(acquisition_task_sequence);
  } else if (element === 0x119) {
    return new Ok(acquisition_task_workitem_code_sequence);
  } else if (element === 0x11A) {
    return new Ok(acquisition_subtask_sequence);
  } else if (element === 0x11B) {
    return new Ok(subtask_workitem_code_sequence);
  } else if (element === 0x11C) {
    return new Ok(acquisition_task_index);
  } else if (element === 0x11D) {
    return new Ok(acquisition_subtask_index);
  } else if (element === 0x11E) {
    return new Ok(referenced_baseline_parameters_rt_radiation_instance_sequence);
  } else if (element === 0x11F) {
    return new Ok(position_acquisition_template_identification_sequence);
  } else if (element === 0x120) {
    return new Ok(position_acquisition_template_id);
  } else if (element === 0x121) {
    return new Ok(position_acquisition_template_name);
  } else if (element === 0x122) {
    return new Ok(position_acquisition_template_code_sequence);
  } else if (element === 0x123) {
    return new Ok(position_acquisition_template_description);
  } else if (element === 0x124) {
    return new Ok(acquisition_task_applicability_sequence);
  } else if (element === 0x125) {
    return new Ok(projection_imaging_acquisition_parameter_sequence);
  } else if (element === 0x126) {
    return new Ok(ct_imaging_acquisition_parameter_sequence);
  } else if (element === 0x127) {
    return new Ok(kv_imaging_generation_parameters_sequence);
  } else if (element === 0x128) {
    return new Ok(mv_imaging_generation_parameters_sequence);
  } else if (element === 0x129) {
    return new Ok(acquisition_signal_type);
  } else if (element === 0x12A) {
    return new Ok(acquisition_method);
  } else if (element === 0x12B) {
    return new Ok(scan_start_position_sequence);
  } else if (element === 0x12C) {
    return new Ok(scan_stop_position_sequence);
  } else if (element === 0x12D) {
    return new Ok(imaging_source_to_beam_modifier_definition_plane_distance);
  } else if (element === 0x12E) {
    return new Ok(scan_arc_type);
  } else if (element === 0x12F) {
    return new Ok(detector_positioning_type);
  } else if (element === 0x130) {
    return new Ok(additional_rt_accessory_device_sequence);
  } else if (element === 0x131) {
    return new Ok(device_specific_acquisition_parameter_sequence);
  } else if (element === 0x132) {
    return new Ok(referenced_position_reference_instance_sequence);
  } else if (element === 0x133) {
    return new Ok(energy_derivation_code_sequence);
  } else if (element === 0x134) {
    return new Ok(maximum_cumulative_meterset_exposure);
  } else if (element === 0x135) {
    return new Ok(acquisition_initiation_sequence);
  } else {
    return new Error(undefined);
  }
}

export const dvh_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x1),
  "DVH Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dose_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x2),
  "Dose Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dose_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x4),
  "Dose Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const spatial_transform_of_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x5),
  "Spatial Transform of Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dose_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x6),
  "Dose Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const normalization_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x8),
  "Normalization Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const dose_summation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0xA),
  "Dose Summation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const grid_frame_offset_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0xC),
  "Grid Frame Offset Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2_to_n,
);

export const dose_grid_scaling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0xE),
  "Dose Grid Scaling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const rt_dose_roi_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x10),
  "RT Dose ROI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dose_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x12),
  "Dose Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const tissue_heterogeneity_correction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x14),
  "Tissue Heterogeneity Correction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  /* @__PURE__ */ new ValueMultiplicity(1, /* @__PURE__ */ new Some(3)),
);

export const dvh_normalization_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x40),
  "DVH Normalization Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const dvh_normalization_dose_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x42),
  "DVH Normalization Dose Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dvh_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x50),
  "DVH Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dvh_dose_scaling = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x52),
  "DVH Dose Scaling",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dvh_volume_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x54),
  "DVH Volume Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dvh_number_of_bins = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x56),
  "DVH Number of Bins",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const dvh_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x58),
  "DVH Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2_to_n,
);

export const dvh_referenced_roi_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x60),
  "DVH Referenced ROI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dvh_roi_contribution_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x62),
  "DVH ROI Contribution Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dvh_minimum_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x70),
  "DVH Minimum Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dvh_maximum_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x72),
  "DVH Maximum Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dvh_mean_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3004, 0x74),
  "DVH Mean Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

function find_element_in_group_3004(element) {
  if (element === 0x1) {
    return new Ok(dvh_type);
  } else if (element === 0x2) {
    return new Ok(dose_units);
  } else if (element === 0x4) {
    return new Ok(dose_type);
  } else if (element === 0x5) {
    return new Ok(spatial_transform_of_dose);
  } else if (element === 0x6) {
    return new Ok(dose_comment);
  } else if (element === 0x8) {
    return new Ok(normalization_point);
  } else if (element === 0xA) {
    return new Ok(dose_summation_type);
  } else if (element === 0xC) {
    return new Ok(grid_frame_offset_vector);
  } else if (element === 0xE) {
    return new Ok(dose_grid_scaling);
  } else if (element === 0x10) {
    return new Ok(rt_dose_roi_sequence);
  } else if (element === 0x12) {
    return new Ok(dose_value);
  } else if (element === 0x14) {
    return new Ok(tissue_heterogeneity_correction);
  } else if (element === 0x40) {
    return new Ok(dvh_normalization_point);
  } else if (element === 0x42) {
    return new Ok(dvh_normalization_dose_value);
  } else if (element === 0x50) {
    return new Ok(dvh_sequence);
  } else if (element === 0x52) {
    return new Ok(dvh_dose_scaling);
  } else if (element === 0x54) {
    return new Ok(dvh_volume_units);
  } else if (element === 0x56) {
    return new Ok(dvh_number_of_bins);
  } else if (element === 0x58) {
    return new Ok(dvh_data);
  } else if (element === 0x60) {
    return new Ok(dvh_referenced_roi_sequence);
  } else if (element === 0x62) {
    return new Ok(dvh_roi_contribution_type);
  } else if (element === 0x70) {
    return new Ok(dvh_minimum_dose);
  } else if (element === 0x72) {
    return new Ok(dvh_maximum_dose);
  } else if (element === 0x74) {
    return new Ok(dvh_mean_dose);
  } else {
    return new Error(undefined);
  }
}

export const structure_set_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x2),
  "Structure Set Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const structure_set_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x4),
  "Structure Set Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const structure_set_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x6),
  "Structure Set Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const structure_set_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x8),
  "Structure Set Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const structure_set_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x9),
  "Structure Set Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const referenced_frame_of_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x10),
  "Referenced Frame of Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_referenced_study_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x12),
  "RT Referenced Study Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_referenced_series_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x14),
  "RT Referenced Series Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contour_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x16),
  "Contour Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const predecessor_structure_set_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x18),
  "Predecessor Structure Set Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const structure_set_roi_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x20),
  "Structure Set ROI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x22),
  "ROI Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x24),
  "Referenced Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const roi_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x26),
  "ROI Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const roi_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x28),
  "ROI Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const roi_display_color = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x2A),
  "ROI Display Color",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_3,
);

export const roi_volume = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x2C),
  "ROI Volume",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const roi_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x2D),
  "ROI DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const roi_observation_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x2E),
  "ROI Observation DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const rt_related_roi_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x30),
  "RT Related ROI Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rtroi_relationship = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x33),
  "RT ROI Relationship",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const roi_generation_algorithm = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x36),
  "ROI Generation Algorithm",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const roi_derivation_algorithm_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x37),
  "ROI Derivation Algorithm Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_generation_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x38),
  "ROI Generation Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const roi_contour_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x39),
  "ROI Contour Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contour_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x40),
  "Contour Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contour_geometric_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x42),
  "Contour Geometric Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const contour_slab_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x44),
  "Contour Slab Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const contour_offset_vector = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x45),
  "Contour Offset Vector",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const number_of_contour_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x46),
  "Number of Contour Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const contour_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x48),
  "Contour Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const attached_contours = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x49),
  "Attached Contours",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const source_pixel_planes_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x4A),
  "Source Pixel Planes Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_series_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x4B),
  "Source Series Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_series_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x4C),
  "Source Series Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_creator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x4D),
  "ROI Creator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_interpreter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x4E),
  "ROI Interpreter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_observation_context_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x4F),
  "ROI Observation Context Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const contour_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x50),
  "Contour Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3_to_n,
);

export const rtroi_observations_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x80),
  "RT ROI Observations Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const observation_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x82),
  "Observation Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_roi_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x84),
  "Referenced ROI Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const roi_observation_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x85),
  "ROI Observation Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const rtroi_identification_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x86),
  "RT ROI Identification Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_observation_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0x88),
  "ROI Observation Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const related_rtroi_observations_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xA0),
  "Related RT ROI Observations Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rtroi_interpreted_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xA4),
  "RT ROI Interpreted Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const roi_interpreter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xA6),
  "ROI Interpreter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const roi_physical_properties_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xB0),
  "ROI Physical Properties Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_physical_property = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xB2),
  "ROI Physical Property",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const roi_physical_property_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xB4),
  "ROI Physical Property Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const roi_elemental_composition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xB6),
  "ROI Elemental Composition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const roi_elemental_composition_atomic_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xB7),
  "ROI Elemental Composition Atomic Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const roi_elemental_composition_atomic_mass_fraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xB8),
  "ROI Elemental Composition Atomic Mass Fraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const additional_rtroi_identification_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xB9),
  "Additional RT ROI Identification Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const frame_of_reference_relationship_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xC0),
  "Frame of Reference Relationship Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const related_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xC2),
  "Related Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const frame_of_reference_transformation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xC4),
  "Frame of Reference Transformation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const frame_of_reference_transformation_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xC6),
  "Frame of Reference Transformation Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  /* @__PURE__ */ new ValueMultiplicity(16, /* @__PURE__ */ new Some(16)),
);

export const frame_of_reference_transformation_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xC8),
  "Frame of Reference Transformation Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_location_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xC9),
  "Patient Location Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_location_coordinates_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xCA),
  "Patient Location Coordinates Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_support_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3006, 0xCB),
  "Patient Support Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_3006(element) {
  if (element === 0x2) {
    return new Ok(structure_set_label);
  } else if (element === 0x4) {
    return new Ok(structure_set_name);
  } else if (element === 0x6) {
    return new Ok(structure_set_description);
  } else if (element === 0x8) {
    return new Ok(structure_set_date);
  } else if (element === 0x9) {
    return new Ok(structure_set_time);
  } else if (element === 0x10) {
    return new Ok(referenced_frame_of_reference_sequence);
  } else if (element === 0x12) {
    return new Ok(rt_referenced_study_sequence);
  } else if (element === 0x14) {
    return new Ok(rt_referenced_series_sequence);
  } else if (element === 0x16) {
    return new Ok(contour_image_sequence);
  } else if (element === 0x18) {
    return new Ok(predecessor_structure_set_sequence);
  } else if (element === 0x20) {
    return new Ok(structure_set_roi_sequence);
  } else if (element === 0x22) {
    return new Ok(roi_number);
  } else if (element === 0x24) {
    return new Ok(referenced_frame_of_reference_uid);
  } else if (element === 0x26) {
    return new Ok(roi_name);
  } else if (element === 0x28) {
    return new Ok(roi_description);
  } else if (element === 0x2A) {
    return new Ok(roi_display_color);
  } else if (element === 0x2C) {
    return new Ok(roi_volume);
  } else if (element === 0x2D) {
    return new Ok(roi_date_time);
  } else if (element === 0x2E) {
    return new Ok(roi_observation_date_time);
  } else if (element === 0x30) {
    return new Ok(rt_related_roi_sequence);
  } else if (element === 0x33) {
    return new Ok(rtroi_relationship);
  } else if (element === 0x36) {
    return new Ok(roi_generation_algorithm);
  } else if (element === 0x37) {
    return new Ok(roi_derivation_algorithm_identification_sequence);
  } else if (element === 0x38) {
    return new Ok(roi_generation_description);
  } else if (element === 0x39) {
    return new Ok(roi_contour_sequence);
  } else if (element === 0x40) {
    return new Ok(contour_sequence);
  } else if (element === 0x42) {
    return new Ok(contour_geometric_type);
  } else if (element === 0x44) {
    return new Ok(contour_slab_thickness);
  } else if (element === 0x45) {
    return new Ok(contour_offset_vector);
  } else if (element === 0x46) {
    return new Ok(number_of_contour_points);
  } else if (element === 0x48) {
    return new Ok(contour_number);
  } else if (element === 0x49) {
    return new Ok(attached_contours);
  } else if (element === 0x4A) {
    return new Ok(source_pixel_planes_characteristics_sequence);
  } else if (element === 0x4B) {
    return new Ok(source_series_sequence);
  } else if (element === 0x4C) {
    return new Ok(source_series_information_sequence);
  } else if (element === 0x4D) {
    return new Ok(roi_creator_sequence);
  } else if (element === 0x4E) {
    return new Ok(roi_interpreter_sequence);
  } else if (element === 0x4F) {
    return new Ok(roi_observation_context_code_sequence);
  } else if (element === 0x50) {
    return new Ok(contour_data);
  } else if (element === 0x80) {
    return new Ok(rtroi_observations_sequence);
  } else if (element === 0x82) {
    return new Ok(observation_number);
  } else if (element === 0x84) {
    return new Ok(referenced_roi_number);
  } else if (element === 0x85) {
    return new Ok(roi_observation_label);
  } else if (element === 0x86) {
    return new Ok(rtroi_identification_code_sequence);
  } else if (element === 0x88) {
    return new Ok(roi_observation_description);
  } else if (element === 0xA0) {
    return new Ok(related_rtroi_observations_sequence);
  } else if (element === 0xA4) {
    return new Ok(rtroi_interpreted_type);
  } else if (element === 0xA6) {
    return new Ok(roi_interpreter);
  } else if (element === 0xB0) {
    return new Ok(roi_physical_properties_sequence);
  } else if (element === 0xB2) {
    return new Ok(roi_physical_property);
  } else if (element === 0xB4) {
    return new Ok(roi_physical_property_value);
  } else if (element === 0xB6) {
    return new Ok(roi_elemental_composition_sequence);
  } else if (element === 0xB7) {
    return new Ok(roi_elemental_composition_atomic_number);
  } else if (element === 0xB8) {
    return new Ok(roi_elemental_composition_atomic_mass_fraction);
  } else if (element === 0xB9) {
    return new Ok(additional_rtroi_identification_code_sequence);
  } else if (element === 0xC0) {
    return new Ok(frame_of_reference_relationship_sequence);
  } else if (element === 0xC2) {
    return new Ok(related_frame_of_reference_uid);
  } else if (element === 0xC4) {
    return new Ok(frame_of_reference_transformation_type);
  } else if (element === 0xC6) {
    return new Ok(frame_of_reference_transformation_matrix);
  } else if (element === 0xC8) {
    return new Ok(frame_of_reference_transformation_comment);
  } else if (element === 0xC9) {
    return new Ok(patient_location_coordinates_sequence);
  } else if (element === 0xCA) {
    return new Ok(patient_location_coordinates_code_sequence);
  } else if (element === 0xCB) {
    return new Ok(patient_support_position_sequence);
  } else {
    return new Error(undefined);
  }
}

export const measured_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x10),
  "Measured Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measured_dose_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x12),
  "Measured Dose Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const measured_dose_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x14),
  "Measured Dose Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const measured_dose_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x16),
  "Measured Dose Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const treatment_session_beam_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x20),
  "Treatment Session Beam Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_session_ion_beam_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x21),
  "Treatment Session Ion Beam Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const current_fraction_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x22),
  "Current Fraction Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const treatment_control_point_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x24),
  "Treatment Control Point Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const treatment_control_point_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x25),
  "Treatment Control Point Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const treatment_termination_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x2A),
  "Treatment Termination Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_termination_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x2B),
  "Treatment Termination Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const treatment_verification_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x2C),
  "Treatment Verification Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_treatment_record_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x30),
  "Referenced Treatment Record Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specified_primary_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x32),
  "Specified Primary Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const specified_secondary_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x33),
  "Specified Secondary Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivered_primary_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x36),
  "Delivered Primary Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivered_secondary_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x37),
  "Delivered Secondary Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const specified_treatment_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x3A),
  "Specified Treatment Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivered_treatment_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x3B),
  "Delivered Treatment Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const control_point_delivery_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x40),
  "Control Point Delivery Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_control_point_delivery_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x41),
  "Ion Control Point Delivery Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specified_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x42),
  "Specified Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivered_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x44),
  "Delivered Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const meterset_rate_set = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x45),
  "Meterset Rate Set",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const meterset_rate_delivered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x46),
  "Meterset Rate Delivered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const scan_spot_metersets_delivered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x47),
  "Scan Spot Metersets Delivered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const dose_rate_delivered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x48),
  "Dose Rate Delivered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const treatment_summary_calculated_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x50),
  "Treatment Summary Calculated Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const cumulative_dose_to_dose_reference = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x52),
  "Cumulative Dose to Dose Reference",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const first_treatment_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x54),
  "First Treatment Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const most_recent_treatment_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x56),
  "Most Recent Treatment Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const number_of_fractions_delivered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x5A),
  "Number of Fractions Delivered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const override_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x60),
  "Override Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const parameter_sequence_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x61),
  "Parameter Sequence Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const override_parameter_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x62),
  "Override Parameter Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const parameter_item_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x63),
  "Parameter Item Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const measured_dose_reference_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x64),
  "Measured Dose Reference Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const parameter_pointer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x65),
  "Parameter Pointer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1,
);

export const override_reason = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x66),
  "Override Reason",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const parameter_value_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x67),
  "Parameter Value Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const corrected_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x68),
  "Corrected Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const correction_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x6A),
  "Correction Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const calculated_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x70),
  "Calculated Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const calculated_dose_reference_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x72),
  "Calculated Dose Reference Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const calculated_dose_reference_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x74),
  "Calculated Dose Reference Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const calculated_dose_reference_dose_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x76),
  "Calculated Dose Reference Dose Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const start_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x78),
  "Start Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const end_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x7A),
  "End Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const referenced_measured_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x80),
  "Referenced Measured Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_measured_dose_reference_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x82),
  "Referenced Measured Dose Reference Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_calculated_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x90),
  "Referenced Calculated Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_calculated_dose_reference_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x92),
  "Referenced Calculated Dose Reference Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const beam_limiting_device_leaf_pairs_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xA0),
  "Beam Limiting Device Leaf Pairs Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const enhanced_rt_beam_limiting_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xA1),
  "Enhanced RT Beam Limiting Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const enhanced_rt_beam_limiting_opening_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xA2),
  "Enhanced RT Beam Limiting Opening Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const enhanced_rt_beam_limiting_device_definition_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xA3),
  "Enhanced RT Beam Limiting Device Definition Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const parallel_rt_beam_delimiter_opening_extents = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xA4),
  "Parallel RT Beam Delimiter Opening Extents",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2_to_n,
);

export const recorded_wedge_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xB0),
  "Recorded Wedge Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_compensator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xC0),
  "Recorded Compensator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_block_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xD0),
  "Recorded Block Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_block_slab_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xD1),
  "Recorded Block Slab Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_summary_measured_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xE0),
  "Treatment Summary Measured Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_snout_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xF0),
  "Recorded Snout Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_range_shifter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xF2),
  "Recorded Range Shifter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_lateral_spreading_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xF4),
  "Recorded Lateral Spreading Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_range_modulator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0xF6),
  "Recorded Range Modulator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const recorded_source_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x100),
  "Recorded Source Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_serial_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x105),
  "Source Serial Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const treatment_session_application_setup_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x110),
  "Treatment Session Application Setup Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const application_setup_check = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x116),
  "Application Setup Check",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const recorded_brachy_accessory_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x120),
  "Recorded Brachy Accessory Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_brachy_accessory_device_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x122),
  "Referenced Brachy Accessory Device Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const recorded_channel_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x130),
  "Recorded Channel Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const specified_channel_total_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x132),
  "Specified Channel Total Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivered_channel_total_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x134),
  "Delivered Channel Total Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const specified_number_of_pulses = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x136),
  "Specified Number of Pulses",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const delivered_number_of_pulses = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x138),
  "Delivered Number of Pulses",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const specified_pulse_repetition_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x13A),
  "Specified Pulse Repetition Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivered_pulse_repetition_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x13C),
  "Delivered Pulse Repetition Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const recorded_source_applicator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x140),
  "Recorded Source Applicator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_source_applicator_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x142),
  "Referenced Source Applicator Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const recorded_channel_shield_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x150),
  "Recorded Channel Shield Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_channel_shield_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x152),
  "Referenced Channel Shield Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const brachy_control_point_delivered_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x160),
  "Brachy Control Point Delivered Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const safe_position_exit_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x162),
  "Safe Position Exit Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const safe_position_exit_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x164),
  "Safe Position Exit Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const safe_position_return_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x166),
  "Safe Position Return Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const safe_position_return_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x168),
  "Safe Position Return Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const pulse_specific_brachy_control_point_delivered_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x171),
  "Pulse Specific Brachy Control Point Delivered Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pulse_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x172),
  "Pulse Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const brachy_pulse_control_point_delivered_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x173),
  "Brachy Pulse Control Point Delivered Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const current_treatment_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x200),
  "Current Treatment Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_status_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x202),
  "Treatment Status Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const fraction_group_summary_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x220),
  "Fraction Group Summary Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_fraction_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x223),
  "Referenced Fraction Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const fraction_group_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x224),
  "Fraction Group Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_stopper_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x230),
  "Beam Stopper Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fraction_status_summary_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x240),
  "Fraction Status Summary Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x250),
  "Treatment Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const treatment_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3008, 0x251),
  "Treatment Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

function find_element_in_group_3008(element) {
  if (element === 0x10) {
    return new Ok(measured_dose_reference_sequence);
  } else if (element === 0x12) {
    return new Ok(measured_dose_description);
  } else if (element === 0x14) {
    return new Ok(measured_dose_type);
  } else if (element === 0x16) {
    return new Ok(measured_dose_value);
  } else if (element === 0x20) {
    return new Ok(treatment_session_beam_sequence);
  } else if (element === 0x21) {
    return new Ok(treatment_session_ion_beam_sequence);
  } else if (element === 0x22) {
    return new Ok(current_fraction_number);
  } else if (element === 0x24) {
    return new Ok(treatment_control_point_date);
  } else if (element === 0x25) {
    return new Ok(treatment_control_point_time);
  } else if (element === 0x2A) {
    return new Ok(treatment_termination_status);
  } else if (element === 0x2B) {
    return new Ok(treatment_termination_code);
  } else if (element === 0x2C) {
    return new Ok(treatment_verification_status);
  } else if (element === 0x30) {
    return new Ok(referenced_treatment_record_sequence);
  } else if (element === 0x32) {
    return new Ok(specified_primary_meterset);
  } else if (element === 0x33) {
    return new Ok(specified_secondary_meterset);
  } else if (element === 0x36) {
    return new Ok(delivered_primary_meterset);
  } else if (element === 0x37) {
    return new Ok(delivered_secondary_meterset);
  } else if (element === 0x3A) {
    return new Ok(specified_treatment_time);
  } else if (element === 0x3B) {
    return new Ok(delivered_treatment_time);
  } else if (element === 0x40) {
    return new Ok(control_point_delivery_sequence);
  } else if (element === 0x41) {
    return new Ok(ion_control_point_delivery_sequence);
  } else if (element === 0x42) {
    return new Ok(specified_meterset);
  } else if (element === 0x44) {
    return new Ok(delivered_meterset);
  } else if (element === 0x45) {
    return new Ok(meterset_rate_set);
  } else if (element === 0x46) {
    return new Ok(meterset_rate_delivered);
  } else if (element === 0x47) {
    return new Ok(scan_spot_metersets_delivered);
  } else if (element === 0x48) {
    return new Ok(dose_rate_delivered);
  } else if (element === 0x50) {
    return new Ok(treatment_summary_calculated_dose_reference_sequence);
  } else if (element === 0x52) {
    return new Ok(cumulative_dose_to_dose_reference);
  } else if (element === 0x54) {
    return new Ok(first_treatment_date);
  } else if (element === 0x56) {
    return new Ok(most_recent_treatment_date);
  } else if (element === 0x5A) {
    return new Ok(number_of_fractions_delivered);
  } else if (element === 0x60) {
    return new Ok(override_sequence);
  } else if (element === 0x61) {
    return new Ok(parameter_sequence_pointer);
  } else if (element === 0x62) {
    return new Ok(override_parameter_pointer);
  } else if (element === 0x63) {
    return new Ok(parameter_item_index);
  } else if (element === 0x64) {
    return new Ok(measured_dose_reference_number);
  } else if (element === 0x65) {
    return new Ok(parameter_pointer);
  } else if (element === 0x66) {
    return new Ok(override_reason);
  } else if (element === 0x67) {
    return new Ok(parameter_value_number);
  } else if (element === 0x68) {
    return new Ok(corrected_parameter_sequence);
  } else if (element === 0x6A) {
    return new Ok(correction_value);
  } else if (element === 0x70) {
    return new Ok(calculated_dose_reference_sequence);
  } else if (element === 0x72) {
    return new Ok(calculated_dose_reference_number);
  } else if (element === 0x74) {
    return new Ok(calculated_dose_reference_description);
  } else if (element === 0x76) {
    return new Ok(calculated_dose_reference_dose_value);
  } else if (element === 0x78) {
    return new Ok(start_meterset);
  } else if (element === 0x7A) {
    return new Ok(end_meterset);
  } else if (element === 0x80) {
    return new Ok(referenced_measured_dose_reference_sequence);
  } else if (element === 0x82) {
    return new Ok(referenced_measured_dose_reference_number);
  } else if (element === 0x90) {
    return new Ok(referenced_calculated_dose_reference_sequence);
  } else if (element === 0x92) {
    return new Ok(referenced_calculated_dose_reference_number);
  } else if (element === 0xA0) {
    return new Ok(beam_limiting_device_leaf_pairs_sequence);
  } else if (element === 0xA1) {
    return new Ok(enhanced_rt_beam_limiting_device_sequence);
  } else if (element === 0xA2) {
    return new Ok(enhanced_rt_beam_limiting_opening_sequence);
  } else if (element === 0xA3) {
    return new Ok(enhanced_rt_beam_limiting_device_definition_flag);
  } else if (element === 0xA4) {
    return new Ok(parallel_rt_beam_delimiter_opening_extents);
  } else if (element === 0xB0) {
    return new Ok(recorded_wedge_sequence);
  } else if (element === 0xC0) {
    return new Ok(recorded_compensator_sequence);
  } else if (element === 0xD0) {
    return new Ok(recorded_block_sequence);
  } else if (element === 0xD1) {
    return new Ok(recorded_block_slab_sequence);
  } else if (element === 0xE0) {
    return new Ok(treatment_summary_measured_dose_reference_sequence);
  } else if (element === 0xF0) {
    return new Ok(recorded_snout_sequence);
  } else if (element === 0xF2) {
    return new Ok(recorded_range_shifter_sequence);
  } else if (element === 0xF4) {
    return new Ok(recorded_lateral_spreading_device_sequence);
  } else if (element === 0xF6) {
    return new Ok(recorded_range_modulator_sequence);
  } else if (element === 0x100) {
    return new Ok(recorded_source_sequence);
  } else if (element === 0x105) {
    return new Ok(source_serial_number);
  } else if (element === 0x110) {
    return new Ok(treatment_session_application_setup_sequence);
  } else if (element === 0x116) {
    return new Ok(application_setup_check);
  } else if (element === 0x120) {
    return new Ok(recorded_brachy_accessory_device_sequence);
  } else if (element === 0x122) {
    return new Ok(referenced_brachy_accessory_device_number);
  } else if (element === 0x130) {
    return new Ok(recorded_channel_sequence);
  } else if (element === 0x132) {
    return new Ok(specified_channel_total_time);
  } else if (element === 0x134) {
    return new Ok(delivered_channel_total_time);
  } else if (element === 0x136) {
    return new Ok(specified_number_of_pulses);
  } else if (element === 0x138) {
    return new Ok(delivered_number_of_pulses);
  } else if (element === 0x13A) {
    return new Ok(specified_pulse_repetition_interval);
  } else if (element === 0x13C) {
    return new Ok(delivered_pulse_repetition_interval);
  } else if (element === 0x140) {
    return new Ok(recorded_source_applicator_sequence);
  } else if (element === 0x142) {
    return new Ok(referenced_source_applicator_number);
  } else if (element === 0x150) {
    return new Ok(recorded_channel_shield_sequence);
  } else if (element === 0x152) {
    return new Ok(referenced_channel_shield_number);
  } else if (element === 0x160) {
    return new Ok(brachy_control_point_delivered_sequence);
  } else if (element === 0x162) {
    return new Ok(safe_position_exit_date);
  } else if (element === 0x164) {
    return new Ok(safe_position_exit_time);
  } else if (element === 0x166) {
    return new Ok(safe_position_return_date);
  } else if (element === 0x168) {
    return new Ok(safe_position_return_time);
  } else if (element === 0x171) {
    return new Ok(pulse_specific_brachy_control_point_delivered_sequence);
  } else if (element === 0x172) {
    return new Ok(pulse_number);
  } else if (element === 0x173) {
    return new Ok(brachy_pulse_control_point_delivered_sequence);
  } else if (element === 0x200) {
    return new Ok(current_treatment_status);
  } else if (element === 0x202) {
    return new Ok(treatment_status_comment);
  } else if (element === 0x220) {
    return new Ok(fraction_group_summary_sequence);
  } else if (element === 0x223) {
    return new Ok(referenced_fraction_number);
  } else if (element === 0x224) {
    return new Ok(fraction_group_type);
  } else if (element === 0x230) {
    return new Ok(beam_stopper_position);
  } else if (element === 0x240) {
    return new Ok(fraction_status_summary_sequence);
  } else if (element === 0x250) {
    return new Ok(treatment_date);
  } else if (element === 0x251) {
    return new Ok(treatment_time);
  } else {
    return new Error(undefined);
  }
}

export const rt_plan_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2),
  "RT Plan Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const rt_plan_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3),
  "RT Plan Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const rt_plan_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x4),
  "RT Plan Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const rt_plan_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x6),
  "RT Plan Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const rt_plan_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x7),
  "RT Plan Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const treatment_protocols = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x9),
  "Treatment Protocols",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const plan_intent = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xA),
  "Plan Intent",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_sites = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xB),
  "Treatment Sites",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const rt_plan_geometry = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC),
  "RT Plan Geometry",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const prescription_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE),
  "Prescription Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x10),
  "Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dose_reference_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x12),
  "Dose Reference Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const dose_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x13),
  "Dose Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const dose_reference_structure_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x14),
  "Dose Reference Structure Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const nominal_beam_energy_unit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x15),
  "Nominal Beam Energy Unit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dose_reference_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x16),
  "Dose Reference Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const dose_reference_point_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x18),
  "Dose Reference Point Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const nominal_prior_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1A),
  "Nominal Prior Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dose_reference_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x20),
  "Dose Reference Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const constraint_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x21),
  "Constraint Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivery_warning_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x22),
  "Delivery Warning Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const delivery_maximum_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x23),
  "Delivery Maximum Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const target_minimum_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x25),
  "Target Minimum Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const target_prescription_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x26),
  "Target Prescription Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const target_maximum_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x27),
  "Target Maximum Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const target_underdose_volume_fraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x28),
  "Target Underdose Volume Fraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const organ_at_risk_full_volume_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2A),
  "Organ at Risk Full-volume Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const organ_at_risk_limit_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2B),
  "Organ at Risk Limit Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const organ_at_risk_maximum_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2C),
  "Organ at Risk Maximum Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const organ_at_risk_overdose_volume_fraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2D),
  "Organ at Risk Overdose Volume Fraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const tolerance_table_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x40),
  "Tolerance Table Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const tolerance_table_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x42),
  "Tolerance Table Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const tolerance_table_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x43),
  "Tolerance Table Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const gantry_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x44),
  "Gantry Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const beam_limiting_device_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x46),
  "Beam Limiting Device Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const beam_limiting_device_tolerance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x48),
  "Beam Limiting Device Tolerance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const beam_limiting_device_position_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x4A),
  "Beam Limiting Device Position Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const snout_position_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x4B),
  "Snout Position Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const patient_support_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x4C),
  "Patient Support Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_eccentric_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x4E),
  "Table Top Eccentric Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_pitch_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x4F),
  "Table Top Pitch Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_top_roll_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x50),
  "Table Top Roll Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_top_vertical_position_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x51),
  "Table Top Vertical Position Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_longitudinal_position_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x52),
  "Table Top Longitudinal Position Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_lateral_position_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x53),
  "Table Top Lateral Position Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const rt_plan_relationship = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x55),
  "RT Plan Relationship",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fraction_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x70),
  "Fraction Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fraction_group_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x71),
  "Fraction Group Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const fraction_group_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x72),
  "Fraction Group Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const number_of_fractions_planned = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x78),
  "Number of Fractions Planned",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_fraction_pattern_digits_per_day = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x79),
  "Number of Fraction Pattern Digits Per Day",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const repeat_fraction_cycle_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x7A),
  "Repeat Fraction Cycle Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const fraction_pattern = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x7B),
  "Fraction Pattern",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const number_of_beams = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x80),
  "Number of Beams",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const beam_dose_specification_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x82),
  "Beam Dose Specification Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const referenced_dose_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x83),
  "Referenced Dose Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const beam_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x84),
  "Beam Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const beam_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x86),
  "Beam Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const beam_dose_point_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x88),
  "Beam Dose Point Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const beam_dose_point_equivalent_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x89),
  "Beam Dose Point Equivalent Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const beam_dose_point_ssd = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x8A),
  "Beam Dose Point SSD",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const beam_dose_meaning = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x8B),
  "Beam Dose Meaning",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_dose_verification_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x8C),
  "Beam Dose Verification Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const average_beam_dose_point_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x8D),
  "Average Beam Dose Point Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const average_beam_dose_point_equivalent_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x8E),
  "Average Beam Dose Point Equivalent Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const average_beam_dose_point_ssd = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x8F),
  "Average Beam Dose Point SSD",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const beam_dose_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x90),
  "Beam Dose Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const alternate_beam_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x91),
  "Alternate Beam Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const alternate_beam_dose_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x92),
  "Alternate Beam Dose Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const depth_value_averaging_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x93),
  "Depth Value Averaging Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_dose_point_source_to_external_contour_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x94),
  "Beam Dose Point Source to External Contour Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const number_of_brachy_application_setups = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xA0),
  "Number of Brachy Application Setups",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const brachy_application_setup_dose_specification_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xA2),
  "Brachy Application Setup Dose Specification Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const brachy_application_setup_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xA4),
  "Brachy Application Setup Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const beam_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xB0),
  "Beam Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_machine_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xB2),
  "Treatment Machine Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const primary_dosimeter_unit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xB3),
  "Primary Dosimeter Unit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_axis_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xB4),
  "Source-Axis Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const beam_limiting_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xB6),
  "Beam Limiting Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_beam_limiting_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xB8),
  "RT Beam Limiting Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_to_beam_limiting_device_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xBA),
  "Source to Beam Limiting Device Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const isocenter_to_beam_limiting_device_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xBB),
  "Isocenter to Beam Limiting Device Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const number_of_leaf_jaw_pairs = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xBC),
  "Number of Leaf/Jaw Pairs",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const leaf_position_boundaries = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xBE),
  "Leaf Position Boundaries",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3_to_n,
);

export const beam_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC0),
  "Beam Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const beam_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC2),
  "Beam Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const beam_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC3),
  "Beam Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const beam_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC4),
  "Beam Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_delivery_duration_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC5),
  "Beam Delivery Duration Limit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC6),
  "Radiation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const high_dose_technique_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC7),
  "High-Dose Technique Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reference_image_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xC8),
  "Reference Image Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const planned_verification_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xCA),
  "Planned Verification Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const imaging_device_specific_acquisition_parameters = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xCC),
  "Imaging Device-Specific Acquisition Parameters",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const treatment_delivery_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xCE),
  "Treatment Delivery Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_wedges = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD0),
  "Number of Wedges",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const wedge_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD1),
  "Wedge Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const wedge_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD2),
  "Wedge Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const wedge_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD3),
  "Wedge Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const wedge_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD4),
  "Wedge ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const wedge_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD5),
  "Wedge Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const wedge_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD6),
  "Wedge Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const total_wedge_tray_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD7),
  "Total Wedge Tray Water-Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const wedge_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD8),
  "Wedge Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const isocenter_to_wedge_tray_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xD9),
  "Isocenter to Wedge Tray Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const source_to_wedge_tray_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xDA),
  "Source to Wedge Tray Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_thin_edge_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xDB),
  "Wedge Thin Edge Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const bolus_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xDC),
  "Bolus ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const bolus_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xDD),
  "Bolus Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const effective_wedge_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xDE),
  "Effective Wedge Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const number_of_compensators = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE0),
  "Number of Compensators",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const material_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE1),
  "Material ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const total_compensator_tray_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE2),
  "Total Compensator Tray Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const compensator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE3),
  "Compensator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const compensator_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE4),
  "Compensator Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const compensator_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE5),
  "Compensator ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const source_to_compensator_tray_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE6),
  "Source to Compensator Tray Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const compensator_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE7),
  "Compensator Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const compensator_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE8),
  "Compensator Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const compensator_pixel_spacing = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xE9),
  "Compensator Pixel Spacing",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const compensator_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xEA),
  "Compensator Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2,
);

export const compensator_transmission_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xEB),
  "Compensator Transmission Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const compensator_thickness_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xEC),
  "Compensator Thickness Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const number_of_boli = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xED),
  "Number of Boli",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const compensator_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xEE),
  "Compensator Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const compensator_tray_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xEF),
  "Compensator Tray ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const number_of_blocks = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF0),
  "Number of Blocks",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const total_block_tray_factor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF2),
  "Total Block Tray Factor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const total_block_tray_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF3),
  "Total Block Tray Water-Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const block_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF4),
  "Block Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const block_tray_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF5),
  "Block Tray ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const source_to_block_tray_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF6),
  "Source to Block Tray Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const isocenter_to_block_tray_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF7),
  "Isocenter to Block Tray Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const block_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF8),
  "Block Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const accessory_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xF9),
  "Accessory Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const block_divergence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xFA),
  "Block Divergence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const block_mounting_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xFB),
  "Block Mounting Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const block_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xFC),
  "Block Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const block_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0xFE),
  "Block Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const block_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x100),
  "Block Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const block_transmission = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x102),
  "Block Transmission",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const block_number_of_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x104),
  "Block Number of Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const block_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x106),
  "Block Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2_to_n,
);

export const applicator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x107),
  "Applicator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const applicator_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x108),
  "Applicator ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const applicator_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x109),
  "Applicator Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const applicator_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x10A),
  "Applicator Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const cumulative_dose_reference_coefficient = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x10C),
  "Cumulative Dose Reference Coefficient",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const final_cumulative_meterset_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x10E),
  "Final Cumulative Meterset Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const number_of_control_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x110),
  "Number of Control Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x111),
  "Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const control_point_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x112),
  "Control Point Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const nominal_beam_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x114),
  "Nominal Beam Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const dose_rate_set = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x115),
  "Dose Rate Set",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const wedge_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x116),
  "Wedge Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const wedge_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x118),
  "Wedge Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_limiting_device_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x11A),
  "Beam Limiting Device Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const leaf_jaw_positions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x11C),
  "Leaf/Jaw Positions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_2_to_n,
);

export const gantry_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x11E),
  "Gantry Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const gantry_rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x11F),
  "Gantry Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_limiting_device_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x120),
  "Beam Limiting Device Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const beam_limiting_device_rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x121),
  "Beam Limiting Device Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_support_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x122),
  "Patient Support Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const patient_support_rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x123),
  "Patient Support Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const table_top_eccentric_axis_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x124),
  "Table Top Eccentric Axis Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_eccentric_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x125),
  "Table Top Eccentric Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_eccentric_rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x126),
  "Table Top Eccentric Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const table_top_vertical_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x128),
  "Table Top Vertical Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_longitudinal_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x129),
  "Table Top Longitudinal Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_lateral_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x12A),
  "Table Top Lateral Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const isocenter_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x12C),
  "Isocenter Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const surface_entry_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x12E),
  "Surface Entry Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const source_to_surface_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x130),
  "Source to Surface Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const average_beam_dose_point_source_to_external_contour_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x131),
  "Average Beam Dose Point Source to External Contour Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const source_to_external_contour_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x132),
  "Source to External Contour Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const external_contour_entry_point = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x133),
  "External Contour Entry Point",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const cumulative_meterset_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x134),
  "Cumulative Meterset Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_pitch_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x140),
  "Table Top Pitch Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_top_pitch_rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x142),
  "Table Top Pitch Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const table_top_roll_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x144),
  "Table Top Roll Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const table_top_roll_rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x146),
  "Table Top Roll Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const head_fixation_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x148),
  "Head Fixation Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const gantry_pitch_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x14A),
  "Gantry Pitch Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const gantry_pitch_rotation_direction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x14C),
  "Gantry Pitch Rotation Direction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const gantry_pitch_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x14E),
  "Gantry Pitch Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const fixation_eye = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x150),
  "Fixation Eye",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const chair_head_frame_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x151),
  "Chair Head Frame Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const head_fixation_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x152),
  "Head Fixation Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const chair_head_frame_position_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x153),
  "Chair Head Frame Position Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const fixation_light_azimuthal_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x154),
  "Fixation Light Azimuthal Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const fixation_light_polar_angle_tolerance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x155),
  "Fixation Light Polar Angle Tolerance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const patient_setup_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x180),
  "Patient Setup Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_setup_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x182),
  "Patient Setup Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const patient_setup_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x183),
  "Patient Setup Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const patient_additional_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x184),
  "Patient Additional Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const fixation_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x190),
  "Fixation Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fixation_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x192),
  "Fixation Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const fixation_device_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x194),
  "Fixation Device Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const fixation_device_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x196),
  "Fixation Device Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const fixation_device_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x198),
  "Fixation Device Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const fixation_device_pitch_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x199),
  "Fixation Device Pitch Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const fixation_device_roll_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x19A),
  "Fixation Device Roll Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const shielding_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1A0),
  "Shielding Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const shielding_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1A2),
  "Shielding Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const shielding_device_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1A4),
  "Shielding Device Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const shielding_device_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1A6),
  "Shielding Device Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const shielding_device_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1A8),
  "Shielding Device Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const setup_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1B0),
  "Setup Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const setup_technique_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1B2),
  "Setup Technique Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const setup_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1B4),
  "Setup Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const setup_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1B6),
  "Setup Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const setup_device_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1B8),
  "Setup Device Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const setup_device_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1BA),
  "Setup Device Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const setup_device_parameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1BC),
  "Setup Device Parameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const setup_reference_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1D0),
  "Setup Reference Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const table_top_vertical_setup_displacement = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1D2),
  "Table Top Vertical Setup Displacement",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_longitudinal_setup_displacement = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1D4),
  "Table Top Longitudinal Setup Displacement",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const table_top_lateral_setup_displacement = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x1D6),
  "Table Top Lateral Setup Displacement",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const brachy_treatment_technique = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x200),
  "Brachy Treatment Technique",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const brachy_treatment_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x202),
  "Brachy Treatment Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_machine_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x206),
  "Treatment Machine Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x210),
  "Source Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x212),
  "Source Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const source_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x214),
  "Source Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x216),
  "Source Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const active_source_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x218),
  "Active Source Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const active_source_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x21A),
  "Active Source Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_model_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x21B),
  "Source Model ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const source_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x21C),
  "Source Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_encapsulation_nominal_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x222),
  "Source Encapsulation Nominal Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_encapsulation_nominal_transmission = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x224),
  "Source Encapsulation Nominal Transmission",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_isotope_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x226),
  "Source Isotope Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_isotope_half_life = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x228),
  "Source Isotope Half Life",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_strength_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x229),
  "Source Strength Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reference_air_kerma_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x22A),
  "Reference Air Kerma Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_strength = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x22B),
  "Source Strength",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_strength_reference_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x22C),
  "Source Strength Reference Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const source_strength_reference_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x22E),
  "Source Strength Reference Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const application_setup_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x230),
  "Application Setup Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const application_setup_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x232),
  "Application Setup Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const application_setup_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x234),
  "Application Setup Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const application_setup_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x236),
  "Application Setup Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const application_setup_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x238),
  "Application Setup Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const template_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x240),
  "Template Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const template_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x242),
  "Template Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const template_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x244),
  "Template Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const total_reference_air_kerma = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x250),
  "Total Reference Air Kerma",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const brachy_accessory_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x260),
  "Brachy Accessory Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const brachy_accessory_device_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x262),
  "Brachy Accessory Device Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const brachy_accessory_device_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x263),
  "Brachy Accessory Device ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const brachy_accessory_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x264),
  "Brachy Accessory Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const brachy_accessory_device_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x266),
  "Brachy Accessory Device Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const brachy_accessory_device_nominal_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x26A),
  "Brachy Accessory Device Nominal Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const brachy_accessory_device_nominal_transmission = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x26C),
  "Brachy Accessory Device Nominal Transmission",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_effective_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x271),
  "Channel Effective Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_inner_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x272),
  "Channel Inner Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const afterloader_channel_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x273),
  "Afterloader Channel ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const source_applicator_tip_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x274),
  "Source Applicator Tip Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x280),
  "Channel Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x282),
  "Channel Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const channel_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x284),
  "Channel Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_total_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x286),
  "Channel Total Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_movement_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x288),
  "Source Movement Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_pulses = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x28A),
  "Number of Pulses",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const pulse_repetition_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x28C),
  "Pulse Repetition Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_applicator_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x290),
  "Source Applicator Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const source_applicator_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x291),
  "Source Applicator ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const source_applicator_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x292),
  "Source Applicator Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_applicator_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x294),
  "Source Applicator Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_applicator_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x296),
  "Source Applicator Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_applicator_manufacturer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x298),
  "Source Applicator Manufacturer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const source_applicator_wall_nominal_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x29C),
  "Source Applicator Wall Nominal Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_applicator_wall_nominal_transmission = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x29E),
  "Source Applicator Wall Nominal Transmission",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const source_applicator_step_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2A0),
  "Source Applicator Step Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const applicator_shape_referenced_roi_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2A1),
  "Applicator Shape Referenced ROI Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const transfer_tube_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2A2),
  "Transfer Tube Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const transfer_tube_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2A4),
  "Transfer Tube Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_shield_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2B0),
  "Channel Shield Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_shield_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2B2),
  "Channel Shield Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const channel_shield_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2B3),
  "Channel Shield ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const channel_shield_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2B4),
  "Channel Shield Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const channel_shield_nominal_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2B8),
  "Channel Shield Nominal Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const channel_shield_nominal_transmission = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2BA),
  "Channel Shield Nominal Transmission",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const final_cumulative_time_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2C8),
  "Final Cumulative Time Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const brachy_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2D0),
  "Brachy Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const control_point_relative_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2D2),
  "Control Point Relative Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const control_point_3d_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2D4),
  "Control Point 3D Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_3,
);

export const cumulative_time_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2D6),
  "Cumulative Time Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const compensator_divergence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E0),
  "Compensator Divergence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const compensator_mounting_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E1),
  "Compensator Mounting Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_to_compensator_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E2),
  "Source to Compensator Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1_to_n,
);

export const total_compensator_tray_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E3),
  "Total Compensator Tray Water-Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const isocenter_to_compensator_tray_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E4),
  "Isocenter to Compensator Tray Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const compensator_column_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E5),
  "Compensator Column Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const isocenter_to_compensator_distances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E6),
  "Isocenter to Compensator Distances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const compensator_relative_stopping_power_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E7),
  "Compensator Relative Stopping Power Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const compensator_milling_tool_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2E8),
  "Compensator Milling Tool Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const ion_range_compensator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2EA),
  "Ion Range Compensator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const compensator_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x2EB),
  "Compensator Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const radiation_mass_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x302),
  "Radiation Mass Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const radiation_atomic_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x304),
  "Radiation Atomic Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const radiation_charge_state = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x306),
  "Radiation Charge State",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_1,
);

export const scan_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x308),
  "Scan Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const modulated_scan_mode_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x309),
  "Modulated Scan Mode Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const virtual_source_axis_distances = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x30A),
  "Virtual Source-Axis Distances",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const snout_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x30C),
  "Snout Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const snout_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x30D),
  "Snout Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const snout_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x30F),
  "Snout ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const number_of_range_shifters = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x312),
  "Number of Range Shifters",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const range_shifter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x314),
  "Range Shifter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const range_shifter_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x316),
  "Range Shifter Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const range_shifter_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x318),
  "Range Shifter ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const range_shifter_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x320),
  "Range Shifter Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const range_shifter_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x322),
  "Range Shifter Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const number_of_lateral_spreading_devices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x330),
  "Number of Lateral Spreading Devices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const lateral_spreading_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x332),
  "Lateral Spreading Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lateral_spreading_device_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x334),
  "Lateral Spreading Device Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const lateral_spreading_device_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x336),
  "Lateral Spreading Device ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const lateral_spreading_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x338),
  "Lateral Spreading Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const lateral_spreading_device_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x33A),
  "Lateral Spreading Device Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const lateral_spreading_device_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x33C),
  "Lateral Spreading Device Water Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const number_of_range_modulators = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x340),
  "Number of Range Modulators",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const range_modulator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x342),
  "Range Modulator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const range_modulator_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x344),
  "Range Modulator Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const range_modulator_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x346),
  "Range Modulator ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const range_modulator_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x348),
  "Range Modulator Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const range_modulator_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x34A),
  "Range Modulator Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const beam_current_modulation_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x34C),
  "Beam Current Modulation ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const patient_support_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x350),
  "Patient Support Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_support_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x352),
  "Patient Support ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const patient_support_accessory_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x354),
  "Patient Support Accessory Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const tray_accessory_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x355),
  "Tray Accessory Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const fixation_light_azimuthal_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x356),
  "Fixation Light Azimuthal Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const fixation_light_polar_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x358),
  "Fixation Light Polar Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const meterset_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x35A),
  "Meterset Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const range_shifter_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x360),
  "Range Shifter Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const range_shifter_setting = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x362),
  "Range Shifter Setting",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const isocenter_to_range_shifter_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x364),
  "Isocenter to Range Shifter Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const range_shifter_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x366),
  "Range Shifter Water Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const lateral_spreading_device_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x370),
  "Lateral Spreading Device Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const lateral_spreading_device_setting = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x372),
  "Lateral Spreading Device Setting",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const isocenter_to_lateral_spreading_device_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x374),
  "Isocenter to Lateral Spreading Device Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const range_modulator_settings_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x380),
  "Range Modulator Settings Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const range_modulator_gating_start_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x382),
  "Range Modulator Gating Start Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const range_modulator_gating_stop_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x384),
  "Range Modulator Gating Stop Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const range_modulator_gating_start_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x386),
  "Range Modulator Gating Start Water Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const range_modulator_gating_stop_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x388),
  "Range Modulator Gating Stop Water Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const isocenter_to_range_modulator_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x38A),
  "Isocenter to Range Modulator Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const scan_spot_time_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x38F),
  "Scan Spot Time Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const scan_spot_tune_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x390),
  "Scan Spot Tune ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const scan_spot_prescribed_indices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x391),
  "Scan Spot Prescribed Indices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1_to_n,
);

export const number_of_scan_spot_positions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x392),
  "Number of Scan Spot Positions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const scan_spot_reordered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x393),
  "Scan Spot Reordered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scan_spot_position_map = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x394),
  "Scan Spot Position Map",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const scan_spot_reordering_allowed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x395),
  "Scan Spot Reordering Allowed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const scan_spot_meterset_weights = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x396),
  "Scan Spot Meterset Weights",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1_to_n,
);

export const scanning_spot_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x398),
  "Scanning Spot Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const scan_spot_sizes_delivered = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x399),
  "Scan Spot Sizes Delivered",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2_to_n,
);

export const number_of_paintings = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x39A),
  "Number of Paintings",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const ion_tolerance_table_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3A0),
  "Ion Tolerance Table Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_beam_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3A2),
  "Ion Beam Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_beam_limiting_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3A4),
  "Ion Beam Limiting Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_block_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3A6),
  "Ion Block Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3A8),
  "Ion Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_wedge_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3AA),
  "Ion Wedge Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ion_wedge_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x3AC),
  "Ion Wedge Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_setup_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x401),
  "Referenced Setup Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const setup_image_comment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x402),
  "Setup Image Comment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const motion_synchronization_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x410),
  "Motion Synchronization Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const control_point_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x412),
  "Control Point Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const general_accessory_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x420),
  "General Accessory Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const general_accessory_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x421),
  "General Accessory ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const general_accessory_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x422),
  "General Accessory Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const general_accessory_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x423),
  "General Accessory Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const general_accessory_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x424),
  "General Accessory Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const source_to_general_accessory_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x425),
  "Source to General Accessory Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const isocenter_to_general_accessory_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x426),
  "Isocenter to General Accessory Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const applicator_geometry_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x431),
  "Applicator Geometry Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const applicator_aperture_shape = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x432),
  "Applicator Aperture Shape",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const applicator_opening = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x433),
  "Applicator Opening",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const applicator_opening_x = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x434),
  "Applicator Opening X",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const applicator_opening_y = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x435),
  "Applicator Opening Y",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const source_to_applicator_mounting_position_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x436),
  "Source to Applicator Mounting Position Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const number_of_block_slab_items = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x440),
  "Number of Block Slab Items",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const block_slab_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x441),
  "Block Slab Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const block_slab_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x442),
  "Block Slab Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const block_slab_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x443),
  "Block Slab Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const device_motion_control_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x450),
  "Device Motion Control Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const device_motion_execution_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x451),
  "Device Motion Execution Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const device_motion_observation_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x452),
  "Device Motion Observation Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const device_motion_parameter_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x453),
  "Device Motion Parameter Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const distal_depth_fraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x501),
  "Distal Depth Fraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const distal_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x502),
  "Distal Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const nominal_range_modulation_fractions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x503),
  "Nominal Range Modulation Fractions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const nominal_range_modulated_region_depths = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x504),
  "Nominal Range Modulated Region Depths",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const depth_dose_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x505),
  "Depth Dose Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const delivered_depth_dose_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x506),
  "Delivered Depth Dose Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const delivered_distal_depth_fraction = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x507),
  "Delivered Distal Depth Fraction",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const delivered_distal_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x508),
  "Delivered Distal Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const delivered_nominal_range_modulation_fractions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x509),
  "Delivered Nominal Range Modulation Fractions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const delivered_nominal_range_modulated_region_depths = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x510),
  "Delivered Nominal Range Modulated Region Depths",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_2,
);

export const delivered_reference_dose_definition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x511),
  "Delivered Reference Dose Definition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reference_dose_definition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x512),
  "Reference Dose Definition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_control_point_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x600),
  "RT Control Point Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const radiation_generation_mode_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x601),
  "Radiation Generation Mode Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_defined_device_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x602),
  "Referenced Defined Device Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const radiation_dose_identification_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x603),
  "Radiation Dose Identification Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_rt_control_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x604),
  "Number of RT Control Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_radiation_generation_mode_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x605),
  "Referenced Radiation Generation Mode Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const treatment_position_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x606),
  "Treatment Position Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_device_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x607),
  "Referenced Device Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const treatment_position_group_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x608),
  "Treatment Position Group Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const treatment_position_group_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x609),
  "Treatment Position Group UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const treatment_position_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x60A),
  "Treatment Position Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_treatment_position_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x60B),
  "Referenced Treatment Position Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_radiation_dose_identification_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x60C),
  "Referenced Radiation Dose Identification Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_accessory_holder_water_equivalent_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x60D),
  "RT Accessory Holder Water-Equivalent Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const referenced_rt_accessory_holder_device_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x60E),
  "Referenced RT Accessory Holder Device Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_accessory_holder_slot_existence_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x60F),
  "RT Accessory Holder Slot Existence Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_accessory_holder_slot_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x610),
  "RT Accessory Holder Slot Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_accessory_holder_slot_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x611),
  "RT Accessory Holder Slot ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const rt_accessory_holder_slot_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x612),
  "RT Accessory Holder Slot Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const rt_accessory_slot_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x613),
  "RT Accessory Slot Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const rt_accessory_holder_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x614),
  "RT Accessory Holder Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_accessory_device_slot_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x615),
  "RT Accessory Device Slot ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const rt_radiation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x616),
  "RT Radiation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_dose_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x617),
  "Radiation Dose Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_dose_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x618),
  "Radiation Dose Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_dose_identification_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x619),
  "Radiation Dose Identification Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const reference_dose_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x61A),
  "Reference Dose Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const primary_dose_value_indicator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x61B),
  "Primary Dose Value Indicator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dose_values_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x61C),
  "Dose Values Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dose_value_purpose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x61D),
  "Dose Value Purpose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const reference_dose_point_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x61E),
  "Reference Dose Point Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const radiation_dose_values_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x61F),
  "Radiation Dose Values Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const meterset_to_dose_mapping_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x620),
  "Meterset to Dose Mapping Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const expected_in_vivo_measurement_values_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x621),
  "Expected In-Vivo Measurement Values Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const expected_in_vivo_measurement_value_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x622),
  "Expected In-Vivo Measurement Value Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const radiation_dose_in_vivo_measurement_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x623),
  "Radiation Dose In-Vivo Measurement Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const radiation_dose_central_axis_displacement = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x624),
  "Radiation Dose Central Axis Displacement",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const radiation_dose_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x625),
  "Radiation Dose Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_dose_source_to_skin_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x626),
  "Radiation Dose Source to Skin Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_dose_measurement_point_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x627),
  "Radiation Dose Measurement Point Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const radiation_dose_source_to_external_contour_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x628),
  "Radiation Dose Source to External Contour Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const rt_tolerance_set_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x629),
  "RT Tolerance Set Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_tolerance_set_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x62A),
  "RT Tolerance Set Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const attribute_tolerance_values_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x62B),
  "Attribute Tolerance Values Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const tolerance_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x62C),
  "Tolerance Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const patient_support_position_tolerance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x62D),
  "Patient Support Position Tolerance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_time_limit = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x62E),
  "Treatment Time Limit",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const c_arm_photon_electron_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x62F),
  "C-Arm Photon-Electron Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_radiation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x630),
  "Referenced RT Radiation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x631),
  "Referenced RT Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_patient_setup_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x632),
  "Referenced RT Patient Setup Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_to_patient_surface_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x634),
  "Source to Patient Surface Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const treatment_machine_special_mode_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x635),
  "Treatment Machine Special Mode Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const intended_number_of_fractions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x636),
  "Intended Number of Fractions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_radiation_set_intent = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x637),
  "RT Radiation Set Intent",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_radiation_physical_and_geometric_content_detail_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x638),
  "RT Radiation Physical and Geometric Content Detail Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_record_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x639),
  "RT Record Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_device_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x63A),
  "Treatment Device Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_physician_intent_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x63B),
  "Referenced RT Physician Intent Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const cumulative_meterset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x63C),
  "Cumulative Meterset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const delivery_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x63D),
  "Delivery Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const delivery_rate_unit_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x63E),
  "Delivery Rate Unit Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x63F),
  "Treatment Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_source_axis_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x640),
  "Radiation Source-Axis Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const number_of_rt_beam_limiting_devices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x641),
  "Number of RT Beam Limiting Devices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_beam_limiting_device_proximal_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x642),
  "RT Beam Limiting Device Proximal Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const rt_beam_limiting_device_distal_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x643),
  "RT Beam Limiting Device Distal Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const parallel_rt_beam_delimiter_device_orientation_label_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x644),
  "Parallel RT Beam Delimiter Device Orientation Label Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const beam_modifier_orientation_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x645),
  "Beam Modifier Orientation Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const fixed_rt_beam_delimiter_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x646),
  "Fixed RT Beam Delimiter Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const parallel_rt_beam_delimiter_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x647),
  "Parallel RT Beam Delimiter Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_parallel_rt_beam_delimiters = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x648),
  "Number of Parallel RT Beam Delimiters",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const parallel_rt_beam_delimiter_boundaries = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x649),
  "Parallel RT Beam Delimiter Boundaries",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2_to_n,
);

export const parallel_rt_beam_delimiter_positions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x64A),
  "Parallel RT Beam Delimiter Positions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2_to_n,
);

export const rt_beam_limiting_device_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x64B),
  "RT Beam Limiting Device Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const rt_beam_delimiter_geometry_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x64C),
  "RT Beam Delimiter Geometry Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_beam_limiting_device_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x64D),
  "RT Beam Limiting Device Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const parallel_rt_beam_delimiter_opening_mode = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x64E),
  "Parallel RT Beam Delimiter Opening Mode",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const parallel_rt_beam_delimiter_leaf_mounting_side = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x64F),
  "Parallel RT Beam Delimiter Leaf Mounting Side",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const patient_setup_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x650),
  "Patient Setup UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const wedge_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x651),
  "Wedge Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_beam_wedge_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x652),
  "Radiation Beam Wedge Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_beam_wedge_thin_edge_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x653),
  "Radiation Beam Wedge Thin Edge Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_beam_effective_wedge_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x654),
  "Radiation Beam Effective Wedge Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const number_of_wedge_positions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x655),
  "Number of Wedge Positions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_beam_limiting_device_opening_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x656),
  "RT Beam Limiting Device Opening Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_rt_beam_limiting_device_openings = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x657),
  "Number of RT Beam Limiting Device Openings",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const radiation_dosimeter_unit_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x658),
  "Radiation Dosimeter Unit Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_device_distance_reference_location_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x659),
  "RT Device Distance Reference Location Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_device_configuration_and_commissioning_key_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x65A),
  "Radiation Device Configuration and Commissioning Key Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_support_position_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x65B),
  "Patient Support Position Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_support_position_specification_method = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x65C),
  "Patient Support Position Specification Method",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const patient_support_position_device_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x65D),
  "Patient Support Position Device Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const device_order_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x65E),
  "Device Order Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const patient_support_position_parameter_order_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x65F),
  "Patient Support Position Parameter Order Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const patient_support_position_device_tolerance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x660),
  "Patient Support Position Device Tolerance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_support_position_tolerance_order_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x661),
  "Patient Support Position Tolerance Order Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const compensator_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x662),
  "Compensator Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const compensator_map_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x663),
  "Compensator Map Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const compensator_proximal_thickness_map = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x664),
  "Compensator Proximal Thickness Map",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const compensator_distal_thickness_map = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x665),
  "Compensator Distal Thickness Map",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const compensator_base_plane_offset = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x666),
  "Compensator Base Plane Offset",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const compensator_shape_fabrication_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x667),
  "Compensator Shape Fabrication Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const compensator_shape_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x668),
  "Compensator Shape Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_beam_compensator_milling_tool_diameter = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x669),
  "Radiation Beam Compensator Milling Tool Diameter",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const block_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x66A),
  "Block Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const block_edge_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x66B),
  "Block Edge Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const block_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x66C),
  "Block Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const radiation_beam_block_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x66D),
  "Radiation Beam Block Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_beam_block_slab_thickness = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x66E),
  "Radiation Beam Block Slab Thickness",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const block_edge_data_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x66F),
  "Block Edge Data Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_rt_accessory_holders = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x670),
  "Number of RT Accessory Holders",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const general_accessory_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x671),
  "General Accessory Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_general_accessories = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x672),
  "Number of General Accessories",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const bolus_definition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x673),
  "Bolus Definition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_boluses = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x674),
  "Number of Boluses",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const equipment_frame_of_reference_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x675),
  "Equipment Frame of Reference UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const equipment_frame_of_reference_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x676),
  "Equipment Frame of Reference Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const equipment_reference_point_coordinates_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x677),
  "Equipment Reference Point Coordinates Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const equipment_reference_point_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x678),
  "Equipment Reference Point Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_beam_limiting_device_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x679),
  "RT Beam Limiting Device Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const source_roll_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x67A),
  "Source Roll Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_generation_mode_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x67B),
  "Radiation GenerationMode Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_generation_mode_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x67C),
  "Radiation GenerationMode Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const radiation_generation_mode_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x67D),
  "Radiation GenerationMode Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const radiation_generation_mode_machine_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x67E),
  "Radiation GenerationMode Machine Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiation_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x67F),
  "Radiation Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const nominal_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x680),
  "Nominal Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const minimum_nominal_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x681),
  "Minimum Nominal Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const maximum_nominal_energy = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x682),
  "Maximum Nominal Energy",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const radiation_fluence_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x683),
  "Radiation Fluence Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const energy_unit_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x684),
  "Energy Unit Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_radiation_generation_modes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x685),
  "Number of Radiation GenerationModes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const patient_support_devices_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x686),
  "Patient Support Devices Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const number_of_patient_support_devices = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x687),
  "Number of Patient Support Devices",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_beam_modifier_definition_distance = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x688),
  "RT Beam Modifier Definition Distance",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const beam_area_limit_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x689),
  "Beam Area Limit Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_prescription_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x68A),
  "Referenced RT Prescription Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dose_value_interpretation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x68B),
  "Dose Value Interpretation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_session_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x700),
  "Treatment Session UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const rt_radiation_usage = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x701),
  "RT Radiation Usage",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const referenced_rt_radiation_set_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x702),
  "Referenced RT Radiation Set Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_radiation_record_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x703),
  "Referenced RT Radiation Record Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_radiation_set_delivery_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x704),
  "RT Radiation Set Delivery Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const clinical_fraction_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x705),
  "Clinical Fraction Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_treatment_fraction_completion_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x706),
  "RT Treatment Fraction Completion Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_radiation_set_usage = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x707),
  "RT Radiation Set Usage",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_delivery_continuation_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x708),
  "Treatment Delivery Continuation Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_record_content_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x709),
  "Treatment Record Content Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_treatment_termination_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x714),
  "RT Treatment Termination Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_treatment_termination_reason_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x715),
  "RT Treatment Termination Reason Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const machine_specific_treatment_termination_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x716),
  "Machine-Specific Treatment Termination Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_radiation_salvage_record_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x722),
  "RT Radiation Salvage Record Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const starting_meterset_value_known_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x723),
  "Starting Meterset Value Known Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_termination_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x730),
  "Treatment Termination Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const treatment_tolerance_violation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x731),
  "Treatment Tolerance Violation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_tolerance_violation_category = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x732),
  "Treatment Tolerance Violation Category",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const treatment_tolerance_violation_attribute_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x733),
  "Treatment Tolerance Violation Attribute Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_tolerance_violation_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x734),
  "Treatment Tolerance Violation Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const treatment_tolerance_violation_identification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x735),
  "Treatment Tolerance Violation Identification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const treatment_tolerance_violation_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x736),
  "Treatment Tolerance Violation DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const recorded_rt_control_point_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x73A),
  "Recorded RT Control Point DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const referenced_radiation_rt_control_point_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x73B),
  "Referenced Radiation RT Control Point Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const alternate_value_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x73E),
  "Alternate Value Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const confirmation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x73F),
  "Confirmation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const interlock_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x740),
  "Interlock Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const interlock_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x741),
  "Interlock DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const interlock_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x742),
  "Interlock Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const interlock_originating_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x743),
  "Interlock Originating Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const interlock_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x744),
  "Interlock Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const interlock_resolution_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x745),
  "Interlock Resolution Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const interlock_resolution_user_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x746),
  "Interlock Resolution User Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const override_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x760),
  "Override DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const treatment_tolerance_violation_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x761),
  "Treatment Tolerance Violation Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_tolerance_violation_cause_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x762),
  "Treatment Tolerance Violation Cause Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const measured_meterset_to_dose_mapping_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x772),
  "Measured Meterset to Dose Mapping Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_expected_in_vivo_measurement_value_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x773),
  "Referenced Expected In-Vivo Measurement Value Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const dose_measurement_device_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x774),
  "Dose Measurement Device Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const additional_parameter_recording_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x780),
  "Additional Parameter Recording Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const interlock_origin_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x783),
  "Interlock Origin Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const rt_patient_position_scope_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x784),
  "RT Patient Position Scope Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_treatment_position_group_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x785),
  "Referenced Treatment Position Group UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const radiation_order_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x786),
  "Radiation Order Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const omitted_radiation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x787),
  "Omitted Radiation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reason_for_omission_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x788),
  "Reason for Omission Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_delivery_start_patient_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x789),
  "RT Delivery Start Patient Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_treatment_preparation_patient_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x78A),
  "RT Treatment Preparation Patient Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_treatment_preparation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x78B),
  "Referenced RT Treatment Preparation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_patient_setup_photo_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x78C),
  "Referenced Patient Setup Photo Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_treatment_preparation_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x78D),
  "Patient Treatment Preparation Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_treatment_preparation_procedure_parameter_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x78E),
  "Patient Treatment Preparation Procedure Parameter Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const patient_treatment_preparation_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x78F),
  "Patient Treatment Preparation Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_treatment_preparation_procedure_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x790),
  "Patient Treatment Preparation Procedure Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_treatment_preparation_procedure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x791),
  "Patient Treatment Preparation Procedure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_treatment_preparation_method_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x792),
  "Patient Treatment Preparation Method Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const patient_treatment_preparation_procedure_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x793),
  "Patient Treatment Preparation Procedure Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_setup_photo_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x794),
  "Patient Setup Photo Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const patient_treatment_preparation_procedure_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x795),
  "Patient Treatment Preparation Procedure Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_patient_setup_procedure_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x796),
  "Referenced Patient Setup Procedure Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_radiation_task_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x797),
  "RT Radiation Task Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_patient_position_displacement_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x798),
  "RT Patient Position Displacement Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_patient_position_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x799),
  "RT Patient Position Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const displacement_reference_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x79A),
  "Displacement Reference Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const displacement_matrix = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x79B),
  "Displacement Matrix",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  /* @__PURE__ */ new ValueMultiplicity(16, /* @__PURE__ */ new Some(16)),
);

export const patient_support_displacement_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x79C),
  "Patient Support Displacement Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const displacement_reference_location_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x79D),
  "Displacement Reference Location Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_radiation_set_delivery_usage = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300A, 0x79E),
  "RT Radiation Set Delivery Usage",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_300a(element) {
  if (element === 0x2) {
    return new Ok(rt_plan_label);
  } else if (element === 0x3) {
    return new Ok(rt_plan_name);
  } else if (element === 0x4) {
    return new Ok(rt_plan_description);
  } else if (element === 0x6) {
    return new Ok(rt_plan_date);
  } else if (element === 0x7) {
    return new Ok(rt_plan_time);
  } else if (element === 0x9) {
    return new Ok(treatment_protocols);
  } else if (element === 0xA) {
    return new Ok(plan_intent);
  } else if (element === 0xB) {
    return new Ok(treatment_sites);
  } else if (element === 0xC) {
    return new Ok(rt_plan_geometry);
  } else if (element === 0xE) {
    return new Ok(prescription_description);
  } else if (element === 0x10) {
    return new Ok(dose_reference_sequence);
  } else if (element === 0x12) {
    return new Ok(dose_reference_number);
  } else if (element === 0x13) {
    return new Ok(dose_reference_uid);
  } else if (element === 0x14) {
    return new Ok(dose_reference_structure_type);
  } else if (element === 0x15) {
    return new Ok(nominal_beam_energy_unit);
  } else if (element === 0x16) {
    return new Ok(dose_reference_description);
  } else if (element === 0x18) {
    return new Ok(dose_reference_point_coordinates);
  } else if (element === 0x1A) {
    return new Ok(nominal_prior_dose);
  } else if (element === 0x20) {
    return new Ok(dose_reference_type);
  } else if (element === 0x21) {
    return new Ok(constraint_weight);
  } else if (element === 0x22) {
    return new Ok(delivery_warning_dose);
  } else if (element === 0x23) {
    return new Ok(delivery_maximum_dose);
  } else if (element === 0x25) {
    return new Ok(target_minimum_dose);
  } else if (element === 0x26) {
    return new Ok(target_prescription_dose);
  } else if (element === 0x27) {
    return new Ok(target_maximum_dose);
  } else if (element === 0x28) {
    return new Ok(target_underdose_volume_fraction);
  } else if (element === 0x2A) {
    return new Ok(organ_at_risk_full_volume_dose);
  } else if (element === 0x2B) {
    return new Ok(organ_at_risk_limit_dose);
  } else if (element === 0x2C) {
    return new Ok(organ_at_risk_maximum_dose);
  } else if (element === 0x2D) {
    return new Ok(organ_at_risk_overdose_volume_fraction);
  } else if (element === 0x40) {
    return new Ok(tolerance_table_sequence);
  } else if (element === 0x42) {
    return new Ok(tolerance_table_number);
  } else if (element === 0x43) {
    return new Ok(tolerance_table_label);
  } else if (element === 0x44) {
    return new Ok(gantry_angle_tolerance);
  } else if (element === 0x46) {
    return new Ok(beam_limiting_device_angle_tolerance);
  } else if (element === 0x48) {
    return new Ok(beam_limiting_device_tolerance_sequence);
  } else if (element === 0x4A) {
    return new Ok(beam_limiting_device_position_tolerance);
  } else if (element === 0x4B) {
    return new Ok(snout_position_tolerance);
  } else if (element === 0x4C) {
    return new Ok(patient_support_angle_tolerance);
  } else if (element === 0x4E) {
    return new Ok(table_top_eccentric_angle_tolerance);
  } else if (element === 0x4F) {
    return new Ok(table_top_pitch_angle_tolerance);
  } else if (element === 0x50) {
    return new Ok(table_top_roll_angle_tolerance);
  } else if (element === 0x51) {
    return new Ok(table_top_vertical_position_tolerance);
  } else if (element === 0x52) {
    return new Ok(table_top_longitudinal_position_tolerance);
  } else if (element === 0x53) {
    return new Ok(table_top_lateral_position_tolerance);
  } else if (element === 0x55) {
    return new Ok(rt_plan_relationship);
  } else if (element === 0x70) {
    return new Ok(fraction_group_sequence);
  } else if (element === 0x71) {
    return new Ok(fraction_group_number);
  } else if (element === 0x72) {
    return new Ok(fraction_group_description);
  } else if (element === 0x78) {
    return new Ok(number_of_fractions_planned);
  } else if (element === 0x79) {
    return new Ok(number_of_fraction_pattern_digits_per_day);
  } else if (element === 0x7A) {
    return new Ok(repeat_fraction_cycle_length);
  } else if (element === 0x7B) {
    return new Ok(fraction_pattern);
  } else if (element === 0x80) {
    return new Ok(number_of_beams);
  } else if (element === 0x82) {
    return new Ok(beam_dose_specification_point);
  } else if (element === 0x83) {
    return new Ok(referenced_dose_reference_uid);
  } else if (element === 0x84) {
    return new Ok(beam_dose);
  } else if (element === 0x86) {
    return new Ok(beam_meterset);
  } else if (element === 0x88) {
    return new Ok(beam_dose_point_depth);
  } else if (element === 0x89) {
    return new Ok(beam_dose_point_equivalent_depth);
  } else if (element === 0x8A) {
    return new Ok(beam_dose_point_ssd);
  } else if (element === 0x8B) {
    return new Ok(beam_dose_meaning);
  } else if (element === 0x8C) {
    return new Ok(beam_dose_verification_control_point_sequence);
  } else if (element === 0x8D) {
    return new Ok(average_beam_dose_point_depth);
  } else if (element === 0x8E) {
    return new Ok(average_beam_dose_point_equivalent_depth);
  } else if (element === 0x8F) {
    return new Ok(average_beam_dose_point_ssd);
  } else if (element === 0x90) {
    return new Ok(beam_dose_type);
  } else if (element === 0x91) {
    return new Ok(alternate_beam_dose);
  } else if (element === 0x92) {
    return new Ok(alternate_beam_dose_type);
  } else if (element === 0x93) {
    return new Ok(depth_value_averaging_flag);
  } else if (element === 0x94) {
    return new Ok(beam_dose_point_source_to_external_contour_distance);
  } else if (element === 0xA0) {
    return new Ok(number_of_brachy_application_setups);
  } else if (element === 0xA2) {
    return new Ok(brachy_application_setup_dose_specification_point);
  } else if (element === 0xA4) {
    return new Ok(brachy_application_setup_dose);
  } else if (element === 0xB0) {
    return new Ok(beam_sequence);
  } else if (element === 0xB2) {
    return new Ok(treatment_machine_name);
  } else if (element === 0xB3) {
    return new Ok(primary_dosimeter_unit);
  } else if (element === 0xB4) {
    return new Ok(source_axis_distance);
  } else if (element === 0xB6) {
    return new Ok(beam_limiting_device_sequence);
  } else if (element === 0xB8) {
    return new Ok(rt_beam_limiting_device_type);
  } else if (element === 0xBA) {
    return new Ok(source_to_beam_limiting_device_distance);
  } else if (element === 0xBB) {
    return new Ok(isocenter_to_beam_limiting_device_distance);
  } else if (element === 0xBC) {
    return new Ok(number_of_leaf_jaw_pairs);
  } else if (element === 0xBE) {
    return new Ok(leaf_position_boundaries);
  } else if (element === 0xC0) {
    return new Ok(beam_number);
  } else if (element === 0xC2) {
    return new Ok(beam_name);
  } else if (element === 0xC3) {
    return new Ok(beam_description);
  } else if (element === 0xC4) {
    return new Ok(beam_type);
  } else if (element === 0xC5) {
    return new Ok(beam_delivery_duration_limit);
  } else if (element === 0xC6) {
    return new Ok(radiation_type);
  } else if (element === 0xC7) {
    return new Ok(high_dose_technique_type);
  } else if (element === 0xC8) {
    return new Ok(reference_image_number);
  } else if (element === 0xCA) {
    return new Ok(planned_verification_image_sequence);
  } else if (element === 0xCC) {
    return new Ok(imaging_device_specific_acquisition_parameters);
  } else if (element === 0xCE) {
    return new Ok(treatment_delivery_type);
  } else if (element === 0xD0) {
    return new Ok(number_of_wedges);
  } else if (element === 0xD1) {
    return new Ok(wedge_sequence);
  } else if (element === 0xD2) {
    return new Ok(wedge_number);
  } else if (element === 0xD3) {
    return new Ok(wedge_type);
  } else if (element === 0xD4) {
    return new Ok(wedge_id);
  } else if (element === 0xD5) {
    return new Ok(wedge_angle);
  } else if (element === 0xD6) {
    return new Ok(wedge_factor);
  } else if (element === 0xD7) {
    return new Ok(total_wedge_tray_water_equivalent_thickness);
  } else if (element === 0xD8) {
    return new Ok(wedge_orientation);
  } else if (element === 0xD9) {
    return new Ok(isocenter_to_wedge_tray_distance);
  } else if (element === 0xDA) {
    return new Ok(source_to_wedge_tray_distance);
  } else if (element === 0xDB) {
    return new Ok(wedge_thin_edge_position);
  } else if (element === 0xDC) {
    return new Ok(bolus_id);
  } else if (element === 0xDD) {
    return new Ok(bolus_description);
  } else if (element === 0xDE) {
    return new Ok(effective_wedge_angle);
  } else if (element === 0xE0) {
    return new Ok(number_of_compensators);
  } else if (element === 0xE1) {
    return new Ok(material_id);
  } else if (element === 0xE2) {
    return new Ok(total_compensator_tray_factor);
  } else if (element === 0xE3) {
    return new Ok(compensator_sequence);
  } else if (element === 0xE4) {
    return new Ok(compensator_number);
  } else if (element === 0xE5) {
    return new Ok(compensator_id);
  } else if (element === 0xE6) {
    return new Ok(source_to_compensator_tray_distance);
  } else if (element === 0xE7) {
    return new Ok(compensator_rows);
  } else if (element === 0xE8) {
    return new Ok(compensator_columns);
  } else if (element === 0xE9) {
    return new Ok(compensator_pixel_spacing);
  } else if (element === 0xEA) {
    return new Ok(compensator_position);
  } else if (element === 0xEB) {
    return new Ok(compensator_transmission_data);
  } else if (element === 0xEC) {
    return new Ok(compensator_thickness_data);
  } else if (element === 0xED) {
    return new Ok(number_of_boli);
  } else if (element === 0xEE) {
    return new Ok(compensator_type);
  } else if (element === 0xEF) {
    return new Ok(compensator_tray_id);
  } else if (element === 0xF0) {
    return new Ok(number_of_blocks);
  } else if (element === 0xF2) {
    return new Ok(total_block_tray_factor);
  } else if (element === 0xF3) {
    return new Ok(total_block_tray_water_equivalent_thickness);
  } else if (element === 0xF4) {
    return new Ok(block_sequence);
  } else if (element === 0xF5) {
    return new Ok(block_tray_id);
  } else if (element === 0xF6) {
    return new Ok(source_to_block_tray_distance);
  } else if (element === 0xF7) {
    return new Ok(isocenter_to_block_tray_distance);
  } else if (element === 0xF8) {
    return new Ok(block_type);
  } else if (element === 0xF9) {
    return new Ok(accessory_code);
  } else if (element === 0xFA) {
    return new Ok(block_divergence);
  } else if (element === 0xFB) {
    return new Ok(block_mounting_position);
  } else if (element === 0xFC) {
    return new Ok(block_number);
  } else if (element === 0xFE) {
    return new Ok(block_name);
  } else if (element === 0x100) {
    return new Ok(block_thickness);
  } else if (element === 0x102) {
    return new Ok(block_transmission);
  } else if (element === 0x104) {
    return new Ok(block_number_of_points);
  } else if (element === 0x106) {
    return new Ok(block_data);
  } else if (element === 0x107) {
    return new Ok(applicator_sequence);
  } else if (element === 0x108) {
    return new Ok(applicator_id);
  } else if (element === 0x109) {
    return new Ok(applicator_type);
  } else if (element === 0x10A) {
    return new Ok(applicator_description);
  } else if (element === 0x10C) {
    return new Ok(cumulative_dose_reference_coefficient);
  } else if (element === 0x10E) {
    return new Ok(final_cumulative_meterset_weight);
  } else if (element === 0x110) {
    return new Ok(number_of_control_points);
  } else if (element === 0x111) {
    return new Ok(control_point_sequence);
  } else if (element === 0x112) {
    return new Ok(control_point_index);
  } else if (element === 0x114) {
    return new Ok(nominal_beam_energy);
  } else if (element === 0x115) {
    return new Ok(dose_rate_set);
  } else if (element === 0x116) {
    return new Ok(wedge_position_sequence);
  } else if (element === 0x118) {
    return new Ok(wedge_position);
  } else if (element === 0x11A) {
    return new Ok(beam_limiting_device_position_sequence);
  } else if (element === 0x11C) {
    return new Ok(leaf_jaw_positions);
  } else if (element === 0x11E) {
    return new Ok(gantry_angle);
  } else if (element === 0x11F) {
    return new Ok(gantry_rotation_direction);
  } else if (element === 0x120) {
    return new Ok(beam_limiting_device_angle);
  } else if (element === 0x121) {
    return new Ok(beam_limiting_device_rotation_direction);
  } else if (element === 0x122) {
    return new Ok(patient_support_angle);
  } else if (element === 0x123) {
    return new Ok(patient_support_rotation_direction);
  } else if (element === 0x124) {
    return new Ok(table_top_eccentric_axis_distance);
  } else if (element === 0x125) {
    return new Ok(table_top_eccentric_angle);
  } else if (element === 0x126) {
    return new Ok(table_top_eccentric_rotation_direction);
  } else if (element === 0x128) {
    return new Ok(table_top_vertical_position);
  } else if (element === 0x129) {
    return new Ok(table_top_longitudinal_position);
  } else if (element === 0x12A) {
    return new Ok(table_top_lateral_position);
  } else if (element === 0x12C) {
    return new Ok(isocenter_position);
  } else if (element === 0x12E) {
    return new Ok(surface_entry_point);
  } else if (element === 0x130) {
    return new Ok(source_to_surface_distance);
  } else if (element === 0x131) {
    return new Ok(average_beam_dose_point_source_to_external_contour_distance);
  } else if (element === 0x132) {
    return new Ok(source_to_external_contour_distance);
  } else if (element === 0x133) {
    return new Ok(external_contour_entry_point);
  } else if (element === 0x134) {
    return new Ok(cumulative_meterset_weight);
  } else if (element === 0x140) {
    return new Ok(table_top_pitch_angle);
  } else if (element === 0x142) {
    return new Ok(table_top_pitch_rotation_direction);
  } else if (element === 0x144) {
    return new Ok(table_top_roll_angle);
  } else if (element === 0x146) {
    return new Ok(table_top_roll_rotation_direction);
  } else if (element === 0x148) {
    return new Ok(head_fixation_angle);
  } else if (element === 0x14A) {
    return new Ok(gantry_pitch_angle);
  } else if (element === 0x14C) {
    return new Ok(gantry_pitch_rotation_direction);
  } else if (element === 0x14E) {
    return new Ok(gantry_pitch_angle_tolerance);
  } else if (element === 0x150) {
    return new Ok(fixation_eye);
  } else if (element === 0x151) {
    return new Ok(chair_head_frame_position);
  } else if (element === 0x152) {
    return new Ok(head_fixation_angle_tolerance);
  } else if (element === 0x153) {
    return new Ok(chair_head_frame_position_tolerance);
  } else if (element === 0x154) {
    return new Ok(fixation_light_azimuthal_angle_tolerance);
  } else if (element === 0x155) {
    return new Ok(fixation_light_polar_angle_tolerance);
  } else if (element === 0x180) {
    return new Ok(patient_setup_sequence);
  } else if (element === 0x182) {
    return new Ok(patient_setup_number);
  } else if (element === 0x183) {
    return new Ok(patient_setup_label);
  } else if (element === 0x184) {
    return new Ok(patient_additional_position);
  } else if (element === 0x190) {
    return new Ok(fixation_device_sequence);
  } else if (element === 0x192) {
    return new Ok(fixation_device_type);
  } else if (element === 0x194) {
    return new Ok(fixation_device_label);
  } else if (element === 0x196) {
    return new Ok(fixation_device_description);
  } else if (element === 0x198) {
    return new Ok(fixation_device_position);
  } else if (element === 0x199) {
    return new Ok(fixation_device_pitch_angle);
  } else if (element === 0x19A) {
    return new Ok(fixation_device_roll_angle);
  } else if (element === 0x1A0) {
    return new Ok(shielding_device_sequence);
  } else if (element === 0x1A2) {
    return new Ok(shielding_device_type);
  } else if (element === 0x1A4) {
    return new Ok(shielding_device_label);
  } else if (element === 0x1A6) {
    return new Ok(shielding_device_description);
  } else if (element === 0x1A8) {
    return new Ok(shielding_device_position);
  } else if (element === 0x1B0) {
    return new Ok(setup_technique);
  } else if (element === 0x1B2) {
    return new Ok(setup_technique_description);
  } else if (element === 0x1B4) {
    return new Ok(setup_device_sequence);
  } else if (element === 0x1B6) {
    return new Ok(setup_device_type);
  } else if (element === 0x1B8) {
    return new Ok(setup_device_label);
  } else if (element === 0x1BA) {
    return new Ok(setup_device_description);
  } else if (element === 0x1BC) {
    return new Ok(setup_device_parameter);
  } else if (element === 0x1D0) {
    return new Ok(setup_reference_description);
  } else if (element === 0x1D2) {
    return new Ok(table_top_vertical_setup_displacement);
  } else if (element === 0x1D4) {
    return new Ok(table_top_longitudinal_setup_displacement);
  } else if (element === 0x1D6) {
    return new Ok(table_top_lateral_setup_displacement);
  } else if (element === 0x200) {
    return new Ok(brachy_treatment_technique);
  } else if (element === 0x202) {
    return new Ok(brachy_treatment_type);
  } else if (element === 0x206) {
    return new Ok(treatment_machine_sequence);
  } else if (element === 0x210) {
    return new Ok(source_sequence);
  } else if (element === 0x212) {
    return new Ok(source_number);
  } else if (element === 0x214) {
    return new Ok(source_type);
  } else if (element === 0x216) {
    return new Ok(source_manufacturer);
  } else if (element === 0x218) {
    return new Ok(active_source_diameter);
  } else if (element === 0x21A) {
    return new Ok(active_source_length);
  } else if (element === 0x21B) {
    return new Ok(source_model_id);
  } else if (element === 0x21C) {
    return new Ok(source_description);
  } else if (element === 0x222) {
    return new Ok(source_encapsulation_nominal_thickness);
  } else if (element === 0x224) {
    return new Ok(source_encapsulation_nominal_transmission);
  } else if (element === 0x226) {
    return new Ok(source_isotope_name);
  } else if (element === 0x228) {
    return new Ok(source_isotope_half_life);
  } else if (element === 0x229) {
    return new Ok(source_strength_units);
  } else if (element === 0x22A) {
    return new Ok(reference_air_kerma_rate);
  } else if (element === 0x22B) {
    return new Ok(source_strength);
  } else if (element === 0x22C) {
    return new Ok(source_strength_reference_date);
  } else if (element === 0x22E) {
    return new Ok(source_strength_reference_time);
  } else if (element === 0x230) {
    return new Ok(application_setup_sequence);
  } else if (element === 0x232) {
    return new Ok(application_setup_type);
  } else if (element === 0x234) {
    return new Ok(application_setup_number);
  } else if (element === 0x236) {
    return new Ok(application_setup_name);
  } else if (element === 0x238) {
    return new Ok(application_setup_manufacturer);
  } else if (element === 0x240) {
    return new Ok(template_number);
  } else if (element === 0x242) {
    return new Ok(template_type);
  } else if (element === 0x244) {
    return new Ok(template_name);
  } else if (element === 0x250) {
    return new Ok(total_reference_air_kerma);
  } else if (element === 0x260) {
    return new Ok(brachy_accessory_device_sequence);
  } else if (element === 0x262) {
    return new Ok(brachy_accessory_device_number);
  } else if (element === 0x263) {
    return new Ok(brachy_accessory_device_id);
  } else if (element === 0x264) {
    return new Ok(brachy_accessory_device_type);
  } else if (element === 0x266) {
    return new Ok(brachy_accessory_device_name);
  } else if (element === 0x26A) {
    return new Ok(brachy_accessory_device_nominal_thickness);
  } else if (element === 0x26C) {
    return new Ok(brachy_accessory_device_nominal_transmission);
  } else if (element === 0x271) {
    return new Ok(channel_effective_length);
  } else if (element === 0x272) {
    return new Ok(channel_inner_length);
  } else if (element === 0x273) {
    return new Ok(afterloader_channel_id);
  } else if (element === 0x274) {
    return new Ok(source_applicator_tip_length);
  } else if (element === 0x280) {
    return new Ok(channel_sequence);
  } else if (element === 0x282) {
    return new Ok(channel_number);
  } else if (element === 0x284) {
    return new Ok(channel_length);
  } else if (element === 0x286) {
    return new Ok(channel_total_time);
  } else if (element === 0x288) {
    return new Ok(source_movement_type);
  } else if (element === 0x28A) {
    return new Ok(number_of_pulses);
  } else if (element === 0x28C) {
    return new Ok(pulse_repetition_interval);
  } else if (element === 0x290) {
    return new Ok(source_applicator_number);
  } else if (element === 0x291) {
    return new Ok(source_applicator_id);
  } else if (element === 0x292) {
    return new Ok(source_applicator_type);
  } else if (element === 0x294) {
    return new Ok(source_applicator_name);
  } else if (element === 0x296) {
    return new Ok(source_applicator_length);
  } else if (element === 0x298) {
    return new Ok(source_applicator_manufacturer);
  } else if (element === 0x29C) {
    return new Ok(source_applicator_wall_nominal_thickness);
  } else if (element === 0x29E) {
    return new Ok(source_applicator_wall_nominal_transmission);
  } else if (element === 0x2A0) {
    return new Ok(source_applicator_step_size);
  } else if (element === 0x2A1) {
    return new Ok(applicator_shape_referenced_roi_number);
  } else if (element === 0x2A2) {
    return new Ok(transfer_tube_number);
  } else if (element === 0x2A4) {
    return new Ok(transfer_tube_length);
  } else if (element === 0x2B0) {
    return new Ok(channel_shield_sequence);
  } else if (element === 0x2B2) {
    return new Ok(channel_shield_number);
  } else if (element === 0x2B3) {
    return new Ok(channel_shield_id);
  } else if (element === 0x2B4) {
    return new Ok(channel_shield_name);
  } else if (element === 0x2B8) {
    return new Ok(channel_shield_nominal_thickness);
  } else if (element === 0x2BA) {
    return new Ok(channel_shield_nominal_transmission);
  } else if (element === 0x2C8) {
    return new Ok(final_cumulative_time_weight);
  } else if (element === 0x2D0) {
    return new Ok(brachy_control_point_sequence);
  } else if (element === 0x2D2) {
    return new Ok(control_point_relative_position);
  } else if (element === 0x2D4) {
    return new Ok(control_point_3d_position);
  } else if (element === 0x2D6) {
    return new Ok(cumulative_time_weight);
  } else if (element === 0x2E0) {
    return new Ok(compensator_divergence);
  } else if (element === 0x2E1) {
    return new Ok(compensator_mounting_position);
  } else if (element === 0x2E2) {
    return new Ok(source_to_compensator_distance);
  } else if (element === 0x2E3) {
    return new Ok(total_compensator_tray_water_equivalent_thickness);
  } else if (element === 0x2E4) {
    return new Ok(isocenter_to_compensator_tray_distance);
  } else if (element === 0x2E5) {
    return new Ok(compensator_column_offset);
  } else if (element === 0x2E6) {
    return new Ok(isocenter_to_compensator_distances);
  } else if (element === 0x2E7) {
    return new Ok(compensator_relative_stopping_power_ratio);
  } else if (element === 0x2E8) {
    return new Ok(compensator_milling_tool_diameter);
  } else if (element === 0x2EA) {
    return new Ok(ion_range_compensator_sequence);
  } else if (element === 0x2EB) {
    return new Ok(compensator_description);
  } else if (element === 0x302) {
    return new Ok(radiation_mass_number);
  } else if (element === 0x304) {
    return new Ok(radiation_atomic_number);
  } else if (element === 0x306) {
    return new Ok(radiation_charge_state);
  } else if (element === 0x308) {
    return new Ok(scan_mode);
  } else if (element === 0x309) {
    return new Ok(modulated_scan_mode_type);
  } else if (element === 0x30A) {
    return new Ok(virtual_source_axis_distances);
  } else if (element === 0x30C) {
    return new Ok(snout_sequence);
  } else if (element === 0x30D) {
    return new Ok(snout_position);
  } else if (element === 0x30F) {
    return new Ok(snout_id);
  } else if (element === 0x312) {
    return new Ok(number_of_range_shifters);
  } else if (element === 0x314) {
    return new Ok(range_shifter_sequence);
  } else if (element === 0x316) {
    return new Ok(range_shifter_number);
  } else if (element === 0x318) {
    return new Ok(range_shifter_id);
  } else if (element === 0x320) {
    return new Ok(range_shifter_type);
  } else if (element === 0x322) {
    return new Ok(range_shifter_description);
  } else if (element === 0x330) {
    return new Ok(number_of_lateral_spreading_devices);
  } else if (element === 0x332) {
    return new Ok(lateral_spreading_device_sequence);
  } else if (element === 0x334) {
    return new Ok(lateral_spreading_device_number);
  } else if (element === 0x336) {
    return new Ok(lateral_spreading_device_id);
  } else if (element === 0x338) {
    return new Ok(lateral_spreading_device_type);
  } else if (element === 0x33A) {
    return new Ok(lateral_spreading_device_description);
  } else if (element === 0x33C) {
    return new Ok(lateral_spreading_device_water_equivalent_thickness);
  } else if (element === 0x340) {
    return new Ok(number_of_range_modulators);
  } else if (element === 0x342) {
    return new Ok(range_modulator_sequence);
  } else if (element === 0x344) {
    return new Ok(range_modulator_number);
  } else if (element === 0x346) {
    return new Ok(range_modulator_id);
  } else if (element === 0x348) {
    return new Ok(range_modulator_type);
  } else if (element === 0x34A) {
    return new Ok(range_modulator_description);
  } else if (element === 0x34C) {
    return new Ok(beam_current_modulation_id);
  } else if (element === 0x350) {
    return new Ok(patient_support_type);
  } else if (element === 0x352) {
    return new Ok(patient_support_id);
  } else if (element === 0x354) {
    return new Ok(patient_support_accessory_code);
  } else if (element === 0x355) {
    return new Ok(tray_accessory_code);
  } else if (element === 0x356) {
    return new Ok(fixation_light_azimuthal_angle);
  } else if (element === 0x358) {
    return new Ok(fixation_light_polar_angle);
  } else if (element === 0x35A) {
    return new Ok(meterset_rate);
  } else if (element === 0x360) {
    return new Ok(range_shifter_settings_sequence);
  } else if (element === 0x362) {
    return new Ok(range_shifter_setting);
  } else if (element === 0x364) {
    return new Ok(isocenter_to_range_shifter_distance);
  } else if (element === 0x366) {
    return new Ok(range_shifter_water_equivalent_thickness);
  } else if (element === 0x370) {
    return new Ok(lateral_spreading_device_settings_sequence);
  } else if (element === 0x372) {
    return new Ok(lateral_spreading_device_setting);
  } else if (element === 0x374) {
    return new Ok(isocenter_to_lateral_spreading_device_distance);
  } else if (element === 0x380) {
    return new Ok(range_modulator_settings_sequence);
  } else if (element === 0x382) {
    return new Ok(range_modulator_gating_start_value);
  } else if (element === 0x384) {
    return new Ok(range_modulator_gating_stop_value);
  } else if (element === 0x386) {
    return new Ok(range_modulator_gating_start_water_equivalent_thickness);
  } else if (element === 0x388) {
    return new Ok(range_modulator_gating_stop_water_equivalent_thickness);
  } else if (element === 0x38A) {
    return new Ok(isocenter_to_range_modulator_distance);
  } else if (element === 0x38F) {
    return new Ok(scan_spot_time_offset);
  } else if (element === 0x390) {
    return new Ok(scan_spot_tune_id);
  } else if (element === 0x391) {
    return new Ok(scan_spot_prescribed_indices);
  } else if (element === 0x392) {
    return new Ok(number_of_scan_spot_positions);
  } else if (element === 0x393) {
    return new Ok(scan_spot_reordered);
  } else if (element === 0x394) {
    return new Ok(scan_spot_position_map);
  } else if (element === 0x395) {
    return new Ok(scan_spot_reordering_allowed);
  } else if (element === 0x396) {
    return new Ok(scan_spot_meterset_weights);
  } else if (element === 0x398) {
    return new Ok(scanning_spot_size);
  } else if (element === 0x399) {
    return new Ok(scan_spot_sizes_delivered);
  } else if (element === 0x39A) {
    return new Ok(number_of_paintings);
  } else if (element === 0x3A0) {
    return new Ok(ion_tolerance_table_sequence);
  } else if (element === 0x3A2) {
    return new Ok(ion_beam_sequence);
  } else if (element === 0x3A4) {
    return new Ok(ion_beam_limiting_device_sequence);
  } else if (element === 0x3A6) {
    return new Ok(ion_block_sequence);
  } else if (element === 0x3A8) {
    return new Ok(ion_control_point_sequence);
  } else if (element === 0x3AA) {
    return new Ok(ion_wedge_sequence);
  } else if (element === 0x3AC) {
    return new Ok(ion_wedge_position_sequence);
  } else if (element === 0x401) {
    return new Ok(referenced_setup_image_sequence);
  } else if (element === 0x402) {
    return new Ok(setup_image_comment);
  } else if (element === 0x410) {
    return new Ok(motion_synchronization_sequence);
  } else if (element === 0x412) {
    return new Ok(control_point_orientation);
  } else if (element === 0x420) {
    return new Ok(general_accessory_sequence);
  } else if (element === 0x421) {
    return new Ok(general_accessory_id);
  } else if (element === 0x422) {
    return new Ok(general_accessory_description);
  } else if (element === 0x423) {
    return new Ok(general_accessory_type);
  } else if (element === 0x424) {
    return new Ok(general_accessory_number);
  } else if (element === 0x425) {
    return new Ok(source_to_general_accessory_distance);
  } else if (element === 0x426) {
    return new Ok(isocenter_to_general_accessory_distance);
  } else if (element === 0x431) {
    return new Ok(applicator_geometry_sequence);
  } else if (element === 0x432) {
    return new Ok(applicator_aperture_shape);
  } else if (element === 0x433) {
    return new Ok(applicator_opening);
  } else if (element === 0x434) {
    return new Ok(applicator_opening_x);
  } else if (element === 0x435) {
    return new Ok(applicator_opening_y);
  } else if (element === 0x436) {
    return new Ok(source_to_applicator_mounting_position_distance);
  } else if (element === 0x440) {
    return new Ok(number_of_block_slab_items);
  } else if (element === 0x441) {
    return new Ok(block_slab_sequence);
  } else if (element === 0x442) {
    return new Ok(block_slab_thickness);
  } else if (element === 0x443) {
    return new Ok(block_slab_number);
  } else if (element === 0x450) {
    return new Ok(device_motion_control_sequence);
  } else if (element === 0x451) {
    return new Ok(device_motion_execution_mode);
  } else if (element === 0x452) {
    return new Ok(device_motion_observation_mode);
  } else if (element === 0x453) {
    return new Ok(device_motion_parameter_code_sequence);
  } else if (element === 0x501) {
    return new Ok(distal_depth_fraction);
  } else if (element === 0x502) {
    return new Ok(distal_depth);
  } else if (element === 0x503) {
    return new Ok(nominal_range_modulation_fractions);
  } else if (element === 0x504) {
    return new Ok(nominal_range_modulated_region_depths);
  } else if (element === 0x505) {
    return new Ok(depth_dose_parameters_sequence);
  } else if (element === 0x506) {
    return new Ok(delivered_depth_dose_parameters_sequence);
  } else if (element === 0x507) {
    return new Ok(delivered_distal_depth_fraction);
  } else if (element === 0x508) {
    return new Ok(delivered_distal_depth);
  } else if (element === 0x509) {
    return new Ok(delivered_nominal_range_modulation_fractions);
  } else if (element === 0x510) {
    return new Ok(delivered_nominal_range_modulated_region_depths);
  } else if (element === 0x511) {
    return new Ok(delivered_reference_dose_definition);
  } else if (element === 0x512) {
    return new Ok(reference_dose_definition);
  } else if (element === 0x600) {
    return new Ok(rt_control_point_index);
  } else if (element === 0x601) {
    return new Ok(radiation_generation_mode_index);
  } else if (element === 0x602) {
    return new Ok(referenced_defined_device_index);
  } else if (element === 0x603) {
    return new Ok(radiation_dose_identification_index);
  } else if (element === 0x604) {
    return new Ok(number_of_rt_control_points);
  } else if (element === 0x605) {
    return new Ok(referenced_radiation_generation_mode_index);
  } else if (element === 0x606) {
    return new Ok(treatment_position_index);
  } else if (element === 0x607) {
    return new Ok(referenced_device_index);
  } else if (element === 0x608) {
    return new Ok(treatment_position_group_label);
  } else if (element === 0x609) {
    return new Ok(treatment_position_group_uid);
  } else if (element === 0x60A) {
    return new Ok(treatment_position_group_sequence);
  } else if (element === 0x60B) {
    return new Ok(referenced_treatment_position_index);
  } else if (element === 0x60C) {
    return new Ok(referenced_radiation_dose_identification_index);
  } else if (element === 0x60D) {
    return new Ok(rt_accessory_holder_water_equivalent_thickness);
  } else if (element === 0x60E) {
    return new Ok(referenced_rt_accessory_holder_device_index);
  } else if (element === 0x60F) {
    return new Ok(rt_accessory_holder_slot_existence_flag);
  } else if (element === 0x610) {
    return new Ok(rt_accessory_holder_slot_sequence);
  } else if (element === 0x611) {
    return new Ok(rt_accessory_holder_slot_id);
  } else if (element === 0x612) {
    return new Ok(rt_accessory_holder_slot_distance);
  } else if (element === 0x613) {
    return new Ok(rt_accessory_slot_distance);
  } else if (element === 0x614) {
    return new Ok(rt_accessory_holder_definition_sequence);
  } else if (element === 0x615) {
    return new Ok(rt_accessory_device_slot_id);
  } else if (element === 0x616) {
    return new Ok(rt_radiation_sequence);
  } else if (element === 0x617) {
    return new Ok(radiation_dose_sequence);
  } else if (element === 0x618) {
    return new Ok(radiation_dose_identification_sequence);
  } else if (element === 0x619) {
    return new Ok(radiation_dose_identification_label);
  } else if (element === 0x61A) {
    return new Ok(reference_dose_type);
  } else if (element === 0x61B) {
    return new Ok(primary_dose_value_indicator);
  } else if (element === 0x61C) {
    return new Ok(dose_values_sequence);
  } else if (element === 0x61D) {
    return new Ok(dose_value_purpose);
  } else if (element === 0x61E) {
    return new Ok(reference_dose_point_coordinates);
  } else if (element === 0x61F) {
    return new Ok(radiation_dose_values_parameters_sequence);
  } else if (element === 0x620) {
    return new Ok(meterset_to_dose_mapping_sequence);
  } else if (element === 0x621) {
    return new Ok(expected_in_vivo_measurement_values_sequence);
  } else if (element === 0x622) {
    return new Ok(expected_in_vivo_measurement_value_index);
  } else if (element === 0x623) {
    return new Ok(radiation_dose_in_vivo_measurement_label);
  } else if (element === 0x624) {
    return new Ok(radiation_dose_central_axis_displacement);
  } else if (element === 0x625) {
    return new Ok(radiation_dose_value);
  } else if (element === 0x626) {
    return new Ok(radiation_dose_source_to_skin_distance);
  } else if (element === 0x627) {
    return new Ok(radiation_dose_measurement_point_coordinates);
  } else if (element === 0x628) {
    return new Ok(radiation_dose_source_to_external_contour_distance);
  } else if (element === 0x629) {
    return new Ok(rt_tolerance_set_sequence);
  } else if (element === 0x62A) {
    return new Ok(rt_tolerance_set_label);
  } else if (element === 0x62B) {
    return new Ok(attribute_tolerance_values_sequence);
  } else if (element === 0x62C) {
    return new Ok(tolerance_value);
  } else if (element === 0x62D) {
    return new Ok(patient_support_position_tolerance_sequence);
  } else if (element === 0x62E) {
    return new Ok(treatment_time_limit);
  } else if (element === 0x62F) {
    return new Ok(c_arm_photon_electron_control_point_sequence);
  } else if (element === 0x630) {
    return new Ok(referenced_rt_radiation_sequence);
  } else if (element === 0x631) {
    return new Ok(referenced_rt_instance_sequence);
  } else if (element === 0x632) {
    return new Ok(referenced_rt_patient_setup_sequence);
  } else if (element === 0x634) {
    return new Ok(source_to_patient_surface_distance);
  } else if (element === 0x635) {
    return new Ok(treatment_machine_special_mode_code_sequence);
  } else if (element === 0x636) {
    return new Ok(intended_number_of_fractions);
  } else if (element === 0x637) {
    return new Ok(rt_radiation_set_intent);
  } else if (element === 0x638) {
    return new Ok(rt_radiation_physical_and_geometric_content_detail_flag);
  } else if (element === 0x639) {
    return new Ok(rt_record_flag);
  } else if (element === 0x63A) {
    return new Ok(treatment_device_identification_sequence);
  } else if (element === 0x63B) {
    return new Ok(referenced_rt_physician_intent_sequence);
  } else if (element === 0x63C) {
    return new Ok(cumulative_meterset);
  } else if (element === 0x63D) {
    return new Ok(delivery_rate);
  } else if (element === 0x63E) {
    return new Ok(delivery_rate_unit_sequence);
  } else if (element === 0x63F) {
    return new Ok(treatment_position_sequence);
  } else if (element === 0x640) {
    return new Ok(radiation_source_axis_distance);
  } else if (element === 0x641) {
    return new Ok(number_of_rt_beam_limiting_devices);
  } else if (element === 0x642) {
    return new Ok(rt_beam_limiting_device_proximal_distance);
  } else if (element === 0x643) {
    return new Ok(rt_beam_limiting_device_distal_distance);
  } else if (element === 0x644) {
    return new Ok(
      parallel_rt_beam_delimiter_device_orientation_label_code_sequence,
    );
  } else if (element === 0x645) {
    return new Ok(beam_modifier_orientation_angle);
  } else if (element === 0x646) {
    return new Ok(fixed_rt_beam_delimiter_device_sequence);
  } else if (element === 0x647) {
    return new Ok(parallel_rt_beam_delimiter_device_sequence);
  } else if (element === 0x648) {
    return new Ok(number_of_parallel_rt_beam_delimiters);
  } else if (element === 0x649) {
    return new Ok(parallel_rt_beam_delimiter_boundaries);
  } else if (element === 0x64A) {
    return new Ok(parallel_rt_beam_delimiter_positions);
  } else if (element === 0x64B) {
    return new Ok(rt_beam_limiting_device_offset);
  } else if (element === 0x64C) {
    return new Ok(rt_beam_delimiter_geometry_sequence);
  } else if (element === 0x64D) {
    return new Ok(rt_beam_limiting_device_definition_sequence);
  } else if (element === 0x64E) {
    return new Ok(parallel_rt_beam_delimiter_opening_mode);
  } else if (element === 0x64F) {
    return new Ok(parallel_rt_beam_delimiter_leaf_mounting_side);
  } else if (element === 0x650) {
    return new Ok(patient_setup_uid);
  } else if (element === 0x651) {
    return new Ok(wedge_definition_sequence);
  } else if (element === 0x652) {
    return new Ok(radiation_beam_wedge_angle);
  } else if (element === 0x653) {
    return new Ok(radiation_beam_wedge_thin_edge_distance);
  } else if (element === 0x654) {
    return new Ok(radiation_beam_effective_wedge_angle);
  } else if (element === 0x655) {
    return new Ok(number_of_wedge_positions);
  } else if (element === 0x656) {
    return new Ok(rt_beam_limiting_device_opening_sequence);
  } else if (element === 0x657) {
    return new Ok(number_of_rt_beam_limiting_device_openings);
  } else if (element === 0x658) {
    return new Ok(radiation_dosimeter_unit_sequence);
  } else if (element === 0x659) {
    return new Ok(rt_device_distance_reference_location_code_sequence);
  } else if (element === 0x65A) {
    return new Ok(radiation_device_configuration_and_commissioning_key_sequence);
  } else if (element === 0x65B) {
    return new Ok(patient_support_position_parameter_sequence);
  } else if (element === 0x65C) {
    return new Ok(patient_support_position_specification_method);
  } else if (element === 0x65D) {
    return new Ok(patient_support_position_device_parameter_sequence);
  } else if (element === 0x65E) {
    return new Ok(device_order_index);
  } else if (element === 0x65F) {
    return new Ok(patient_support_position_parameter_order_index);
  } else if (element === 0x660) {
    return new Ok(patient_support_position_device_tolerance_sequence);
  } else if (element === 0x661) {
    return new Ok(patient_support_position_tolerance_order_index);
  } else if (element === 0x662) {
    return new Ok(compensator_definition_sequence);
  } else if (element === 0x663) {
    return new Ok(compensator_map_orientation);
  } else if (element === 0x664) {
    return new Ok(compensator_proximal_thickness_map);
  } else if (element === 0x665) {
    return new Ok(compensator_distal_thickness_map);
  } else if (element === 0x666) {
    return new Ok(compensator_base_plane_offset);
  } else if (element === 0x667) {
    return new Ok(compensator_shape_fabrication_code_sequence);
  } else if (element === 0x668) {
    return new Ok(compensator_shape_sequence);
  } else if (element === 0x669) {
    return new Ok(radiation_beam_compensator_milling_tool_diameter);
  } else if (element === 0x66A) {
    return new Ok(block_definition_sequence);
  } else if (element === 0x66B) {
    return new Ok(block_edge_data);
  } else if (element === 0x66C) {
    return new Ok(block_orientation);
  } else if (element === 0x66D) {
    return new Ok(radiation_beam_block_thickness);
  } else if (element === 0x66E) {
    return new Ok(radiation_beam_block_slab_thickness);
  } else if (element === 0x66F) {
    return new Ok(block_edge_data_sequence);
  } else if (element === 0x670) {
    return new Ok(number_of_rt_accessory_holders);
  } else if (element === 0x671) {
    return new Ok(general_accessory_definition_sequence);
  } else if (element === 0x672) {
    return new Ok(number_of_general_accessories);
  } else if (element === 0x673) {
    return new Ok(bolus_definition_sequence);
  } else if (element === 0x674) {
    return new Ok(number_of_boluses);
  } else if (element === 0x675) {
    return new Ok(equipment_frame_of_reference_uid);
  } else if (element === 0x676) {
    return new Ok(equipment_frame_of_reference_description);
  } else if (element === 0x677) {
    return new Ok(equipment_reference_point_coordinates_sequence);
  } else if (element === 0x678) {
    return new Ok(equipment_reference_point_code_sequence);
  } else if (element === 0x679) {
    return new Ok(rt_beam_limiting_device_angle);
  } else if (element === 0x67A) {
    return new Ok(source_roll_angle);
  } else if (element === 0x67B) {
    return new Ok(radiation_generation_mode_sequence);
  } else if (element === 0x67C) {
    return new Ok(radiation_generation_mode_label);
  } else if (element === 0x67D) {
    return new Ok(radiation_generation_mode_description);
  } else if (element === 0x67E) {
    return new Ok(radiation_generation_mode_machine_code_sequence);
  } else if (element === 0x67F) {
    return new Ok(radiation_type_code_sequence);
  } else if (element === 0x680) {
    return new Ok(nominal_energy);
  } else if (element === 0x681) {
    return new Ok(minimum_nominal_energy);
  } else if (element === 0x682) {
    return new Ok(maximum_nominal_energy);
  } else if (element === 0x683) {
    return new Ok(radiation_fluence_modifier_code_sequence);
  } else if (element === 0x684) {
    return new Ok(energy_unit_code_sequence);
  } else if (element === 0x685) {
    return new Ok(number_of_radiation_generation_modes);
  } else if (element === 0x686) {
    return new Ok(patient_support_devices_sequence);
  } else if (element === 0x687) {
    return new Ok(number_of_patient_support_devices);
  } else if (element === 0x688) {
    return new Ok(rt_beam_modifier_definition_distance);
  } else if (element === 0x689) {
    return new Ok(beam_area_limit_sequence);
  } else if (element === 0x68A) {
    return new Ok(referenced_rt_prescription_sequence);
  } else if (element === 0x68B) {
    return new Ok(dose_value_interpretation);
  } else if (element === 0x700) {
    return new Ok(treatment_session_uid);
  } else if (element === 0x701) {
    return new Ok(rt_radiation_usage);
  } else if (element === 0x702) {
    return new Ok(referenced_rt_radiation_set_sequence);
  } else if (element === 0x703) {
    return new Ok(referenced_rt_radiation_record_sequence);
  } else if (element === 0x704) {
    return new Ok(rt_radiation_set_delivery_number);
  } else if (element === 0x705) {
    return new Ok(clinical_fraction_number);
  } else if (element === 0x706) {
    return new Ok(rt_treatment_fraction_completion_status);
  } else if (element === 0x707) {
    return new Ok(rt_radiation_set_usage);
  } else if (element === 0x708) {
    return new Ok(treatment_delivery_continuation_flag);
  } else if (element === 0x709) {
    return new Ok(treatment_record_content_origin);
  } else if (element === 0x714) {
    return new Ok(rt_treatment_termination_status);
  } else if (element === 0x715) {
    return new Ok(rt_treatment_termination_reason_code_sequence);
  } else if (element === 0x716) {
    return new Ok(machine_specific_treatment_termination_code_sequence);
  } else if (element === 0x722) {
    return new Ok(rt_radiation_salvage_record_control_point_sequence);
  } else if (element === 0x723) {
    return new Ok(starting_meterset_value_known_flag);
  } else if (element === 0x730) {
    return new Ok(treatment_termination_description);
  } else if (element === 0x731) {
    return new Ok(treatment_tolerance_violation_sequence);
  } else if (element === 0x732) {
    return new Ok(treatment_tolerance_violation_category);
  } else if (element === 0x733) {
    return new Ok(treatment_tolerance_violation_attribute_sequence);
  } else if (element === 0x734) {
    return new Ok(treatment_tolerance_violation_description);
  } else if (element === 0x735) {
    return new Ok(treatment_tolerance_violation_identification);
  } else if (element === 0x736) {
    return new Ok(treatment_tolerance_violation_date_time);
  } else if (element === 0x73A) {
    return new Ok(recorded_rt_control_point_date_time);
  } else if (element === 0x73B) {
    return new Ok(referenced_radiation_rt_control_point_index);
  } else if (element === 0x73E) {
    return new Ok(alternate_value_sequence);
  } else if (element === 0x73F) {
    return new Ok(confirmation_sequence);
  } else if (element === 0x740) {
    return new Ok(interlock_sequence);
  } else if (element === 0x741) {
    return new Ok(interlock_date_time);
  } else if (element === 0x742) {
    return new Ok(interlock_description);
  } else if (element === 0x743) {
    return new Ok(interlock_originating_device_sequence);
  } else if (element === 0x744) {
    return new Ok(interlock_code_sequence);
  } else if (element === 0x745) {
    return new Ok(interlock_resolution_code_sequence);
  } else if (element === 0x746) {
    return new Ok(interlock_resolution_user_sequence);
  } else if (element === 0x760) {
    return new Ok(override_date_time);
  } else if (element === 0x761) {
    return new Ok(treatment_tolerance_violation_type_code_sequence);
  } else if (element === 0x762) {
    return new Ok(treatment_tolerance_violation_cause_code_sequence);
  } else if (element === 0x772) {
    return new Ok(measured_meterset_to_dose_mapping_sequence);
  } else if (element === 0x773) {
    return new Ok(referenced_expected_in_vivo_measurement_value_index);
  } else if (element === 0x774) {
    return new Ok(dose_measurement_device_code_sequence);
  } else if (element === 0x780) {
    return new Ok(additional_parameter_recording_instance_sequence);
  } else if (element === 0x783) {
    return new Ok(interlock_origin_description);
  } else if (element === 0x784) {
    return new Ok(rt_patient_position_scope_sequence);
  } else if (element === 0x785) {
    return new Ok(referenced_treatment_position_group_uid);
  } else if (element === 0x786) {
    return new Ok(radiation_order_index);
  } else if (element === 0x787) {
    return new Ok(omitted_radiation_sequence);
  } else if (element === 0x788) {
    return new Ok(reason_for_omission_code_sequence);
  } else if (element === 0x789) {
    return new Ok(rt_delivery_start_patient_position_sequence);
  } else if (element === 0x78A) {
    return new Ok(rt_treatment_preparation_patient_position_sequence);
  } else if (element === 0x78B) {
    return new Ok(referenced_rt_treatment_preparation_sequence);
  } else if (element === 0x78C) {
    return new Ok(referenced_patient_setup_photo_sequence);
  } else if (element === 0x78D) {
    return new Ok(patient_treatment_preparation_method_code_sequence);
  } else if (element === 0x78E) {
    return new Ok(patient_treatment_preparation_procedure_parameter_description);
  } else if (element === 0x78F) {
    return new Ok(patient_treatment_preparation_device_sequence);
  } else if (element === 0x790) {
    return new Ok(patient_treatment_preparation_procedure_sequence);
  } else if (element === 0x791) {
    return new Ok(patient_treatment_preparation_procedure_code_sequence);
  } else if (element === 0x792) {
    return new Ok(patient_treatment_preparation_method_description);
  } else if (element === 0x793) {
    return new Ok(patient_treatment_preparation_procedure_parameter_sequence);
  } else if (element === 0x794) {
    return new Ok(patient_setup_photo_description);
  } else if (element === 0x795) {
    return new Ok(patient_treatment_preparation_procedure_index);
  } else if (element === 0x796) {
    return new Ok(referenced_patient_setup_procedure_index);
  } else if (element === 0x797) {
    return new Ok(rt_radiation_task_sequence);
  } else if (element === 0x798) {
    return new Ok(rt_patient_position_displacement_sequence);
  } else if (element === 0x799) {
    return new Ok(rt_patient_position_sequence);
  } else if (element === 0x79A) {
    return new Ok(displacement_reference_label);
  } else if (element === 0x79B) {
    return new Ok(displacement_matrix);
  } else if (element === 0x79C) {
    return new Ok(patient_support_displacement_sequence);
  } else if (element === 0x79D) {
    return new Ok(displacement_reference_location_code_sequence);
  } else if (element === 0x79E) {
    return new Ok(rt_radiation_set_delivery_usage);
  } else {
    return new Error(undefined);
  }
}

export const referenced_rt_plan_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x2),
  "Referenced RT Plan Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_beam_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x4),
  "Referenced Beam Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_beam_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x6),
  "Referenced Beam Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_reference_image_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x7),
  "Referenced Reference Image Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const start_cumulative_meterset_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x8),
  "Start Cumulative Meterset Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const end_cumulative_meterset_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x9),
  "End Cumulative Meterset Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const referenced_brachy_application_setup_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xA),
  "Referenced Brachy Application Setup Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_brachy_application_setup_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xC),
  "Referenced Brachy Application Setup Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_source_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xE),
  "Referenced Source Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_fraction_group_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x20),
  "Referenced Fraction Group Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_fraction_group_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x22),
  "Referenced Fraction Group Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_verification_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x40),
  "Referenced Verification Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_reference_image_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x42),
  "Referenced Reference Image Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x50),
  "Referenced Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_dose_reference_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x51),
  "Referenced Dose Reference Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const brachy_referenced_dose_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x55),
  "Brachy Referenced Dose Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_structure_set_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x60),
  "Referenced Structure Set Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_patient_setup_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x6A),
  "Referenced Patient Setup Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_dose_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x80),
  "Referenced Dose Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_tolerance_table_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xA0),
  "Referenced Tolerance Table Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_bolus_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xB0),
  "Referenced Bolus Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_wedge_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xC0),
  "Referenced Wedge Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_compensator_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xD0),
  "Referenced Compensator Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_block_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xE0),
  "Referenced Block Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_control_point_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xF0),
  "Referenced Control Point Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xF2),
  "Referenced Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_start_control_point_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xF4),
  "Referenced Start Control Point Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_stop_control_point_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0xF6),
  "Referenced Stop Control Point Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_range_shifter_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x100),
  "Referenced Range Shifter Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_lateral_spreading_device_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x102),
  "Referenced Lateral Spreading Device Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const referenced_range_modulator_number = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x104),
  "Referenced Range Modulator Number",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const omitted_beam_task_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x111),
  "Omitted Beam Task Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reason_for_omission = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x112),
  "Reason for Omission",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const reason_for_omission_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x113),
  "Reason for Omission Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const prescription_overview_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x114),
  "Prescription Overview Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const total_prescription_dose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x115),
  "Total Prescription Dose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const plan_overview_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x116),
  "Plan Overview Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const plan_overview_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x117),
  "Plan Overview Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_plan_overview_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x118),
  "Referenced Plan Overview Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_fractions_included = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x119),
  "Number of Fractions Included",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const dose_calibration_conditions_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x120),
  "Dose Calibration Conditions Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const absorbed_dose_to_meterset_ratio = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x121),
  "Absorbed Dose to Meterset Ratio",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const delineated_radiation_field_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x122),
  "Delineated Radiation Field Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_2,
);

export const dose_calibration_conditions_verified_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x123),
  "Dose Calibration Conditions Verified Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const calibration_reference_point_depth = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x124),
  "Calibration Reference Point Depth",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const gating_beam_hold_transition_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x125),
  "Gating Beam Hold Transition Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const beam_hold_transition = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x126),
  "Beam Hold Transition",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const beam_hold_transition_date_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x127),
  "Beam Hold Transition DateTime",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const beam_hold_originating_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x128),
  "Beam Hold Originating Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const beam_hold_transition_trigger_source = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300C, 0x129),
  "Beam Hold Transition Trigger Source",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

function find_element_in_group_300c(element) {
  if (element === 0x2) {
    return new Ok(referenced_rt_plan_sequence);
  } else if (element === 0x4) {
    return new Ok(referenced_beam_sequence);
  } else if (element === 0x6) {
    return new Ok(referenced_beam_number);
  } else if (element === 0x7) {
    return new Ok(referenced_reference_image_number);
  } else if (element === 0x8) {
    return new Ok(start_cumulative_meterset_weight);
  } else if (element === 0x9) {
    return new Ok(end_cumulative_meterset_weight);
  } else if (element === 0xA) {
    return new Ok(referenced_brachy_application_setup_sequence);
  } else if (element === 0xC) {
    return new Ok(referenced_brachy_application_setup_number);
  } else if (element === 0xE) {
    return new Ok(referenced_source_number);
  } else if (element === 0x20) {
    return new Ok(referenced_fraction_group_sequence);
  } else if (element === 0x22) {
    return new Ok(referenced_fraction_group_number);
  } else if (element === 0x40) {
    return new Ok(referenced_verification_image_sequence);
  } else if (element === 0x42) {
    return new Ok(referenced_reference_image_sequence);
  } else if (element === 0x50) {
    return new Ok(referenced_dose_reference_sequence);
  } else if (element === 0x51) {
    return new Ok(referenced_dose_reference_number);
  } else if (element === 0x55) {
    return new Ok(brachy_referenced_dose_reference_sequence);
  } else if (element === 0x60) {
    return new Ok(referenced_structure_set_sequence);
  } else if (element === 0x6A) {
    return new Ok(referenced_patient_setup_number);
  } else if (element === 0x80) {
    return new Ok(referenced_dose_sequence);
  } else if (element === 0xA0) {
    return new Ok(referenced_tolerance_table_number);
  } else if (element === 0xB0) {
    return new Ok(referenced_bolus_sequence);
  } else if (element === 0xC0) {
    return new Ok(referenced_wedge_number);
  } else if (element === 0xD0) {
    return new Ok(referenced_compensator_number);
  } else if (element === 0xE0) {
    return new Ok(referenced_block_number);
  } else if (element === 0xF0) {
    return new Ok(referenced_control_point_index);
  } else if (element === 0xF2) {
    return new Ok(referenced_control_point_sequence);
  } else if (element === 0xF4) {
    return new Ok(referenced_start_control_point_index);
  } else if (element === 0xF6) {
    return new Ok(referenced_stop_control_point_index);
  } else if (element === 0x100) {
    return new Ok(referenced_range_shifter_number);
  } else if (element === 0x102) {
    return new Ok(referenced_lateral_spreading_device_number);
  } else if (element === 0x104) {
    return new Ok(referenced_range_modulator_number);
  } else if (element === 0x111) {
    return new Ok(omitted_beam_task_sequence);
  } else if (element === 0x112) {
    return new Ok(reason_for_omission);
  } else if (element === 0x113) {
    return new Ok(reason_for_omission_description);
  } else if (element === 0x114) {
    return new Ok(prescription_overview_sequence);
  } else if (element === 0x115) {
    return new Ok(total_prescription_dose);
  } else if (element === 0x116) {
    return new Ok(plan_overview_sequence);
  } else if (element === 0x117) {
    return new Ok(plan_overview_index);
  } else if (element === 0x118) {
    return new Ok(referenced_plan_overview_index);
  } else if (element === 0x119) {
    return new Ok(number_of_fractions_included);
  } else if (element === 0x120) {
    return new Ok(dose_calibration_conditions_sequence);
  } else if (element === 0x121) {
    return new Ok(absorbed_dose_to_meterset_ratio);
  } else if (element === 0x122) {
    return new Ok(delineated_radiation_field_size);
  } else if (element === 0x123) {
    return new Ok(dose_calibration_conditions_verified_flag);
  } else if (element === 0x124) {
    return new Ok(calibration_reference_point_depth);
  } else if (element === 0x125) {
    return new Ok(gating_beam_hold_transition_sequence);
  } else if (element === 0x126) {
    return new Ok(beam_hold_transition);
  } else if (element === 0x127) {
    return new Ok(beam_hold_transition_date_time);
  } else if (element === 0x128) {
    return new Ok(beam_hold_originating_device_sequence);
  } else if (element === 0x129) {
    return new Ok(beam_hold_transition_trigger_source);
  } else {
    return new Error(undefined);
  }
}

export const approval_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300E, 0x2),
  "Approval Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const review_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300E, 0x4),
  "Review Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const review_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300E, 0x5),
  "Review Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const reviewer_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x300E, 0x8),
  "Reviewer Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

function find_element_in_group_300e(element) {
  if (element === 0x2) {
    return new Ok(approval_status);
  } else if (element === 0x4) {
    return new Ok(review_date);
  } else if (element === 0x5) {
    return new Ok(review_time);
  } else if (element === 0x8) {
    return new Ok(reviewer_name);
  } else {
    return new Error(undefined);
  }
}

export const radiobiological_dose_effect_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x1),
  "Radiobiological Dose Effect Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const radiobiological_dose_effect_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x2),
  "Radiobiological Dose Effect Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const effective_dose_calculation_method_category_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x3),
  "Effective Dose Calculation Method Category Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const effective_dose_calculation_method_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x4),
  "Effective Dose Calculation Method Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const effective_dose_calculation_method_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x5),
  "Effective Dose Calculation Method Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const conceptual_volume_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x6),
  "Conceptual Volume UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const originating_sop_instance_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x7),
  "Originating SOP Instance Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conceptual_volume_constituent_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x8),
  "Conceptual Volume Constituent Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const equivalent_conceptual_volume_instance_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x9),
  "Equivalent Conceptual Volume Instance Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const equivalent_conceptual_volumes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0xA),
  "Equivalent Conceptual Volumes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_conceptual_volume_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0xB),
  "Referenced Conceptual Volume UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const conceptual_volume_combination_expression = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0xC),
  "Conceptual Volume Combination Expression",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const conceptual_volume_constituent_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0xD),
  "Conceptual Volume Constituent Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const conceptual_volume_combination_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0xE),
  "Conceptual Volume Combination Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const conceptual_volume_combination_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0xF),
  "Conceptual Volume Combination Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const conceptual_volume_segmentation_defined_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x10),
  "Conceptual Volume Segmentation Defined Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const conceptual_volume_segmentation_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x11),
  "Conceptual Volume Segmentation Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conceptual_volume_constituent_segmentation_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x12),
  "Conceptual Volume Constituent Segmentation Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const constituent_conceptual_volume_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x13),
  "Constituent Conceptual Volume UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const derivation_conceptual_volume_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x14),
  "Derivation Conceptual Volume Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const source_conceptual_volume_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x15),
  "Source Conceptual Volume UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const conceptual_volume_derivation_algorithm_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x16),
  "Conceptual Volume Derivation Algorithm Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conceptual_volume_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x17),
  "Conceptual Volume Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const source_conceptual_volume_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x18),
  "Source Conceptual Volume Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const author_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x19),
  "Author Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const manufacturer_model_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x1A),
  "Manufacturer's Model Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const device_alternate_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x1B),
  "Device Alternate Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedCharacters()]),
  vm_1,
);

export const device_alternate_identifier_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x1C),
  "Device Alternate Identifier Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const device_alternate_identifier_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x1D),
  "Device Alternate Identifier Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const segmentation_creation_template_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x1E),
  "Segmentation Creation Template Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const segmentation_template_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x1F),
  "Segmentation Template UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_segment_reference_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x20),
  "Referenced Segment Reference Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const segment_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x21),
  "Segment Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_reference_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x22),
  "Segment Reference Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const direct_segment_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x23),
  "Direct Segment Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const combination_segment_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x24),
  "Combination Segment Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conceptual_volume_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x25),
  "Conceptual Volume Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segmented_rt_accessory_device_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x26),
  "Segmented RT Accessory Device Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x27),
  "Segment Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const related_segment_characteristics_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x28),
  "Related Segment Characteristics Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_characteristics_precedence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x29),
  "Segment Characteristics Precedence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_segment_annotation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x2A),
  "RT Segment Annotation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_annotation_category_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x2B),
  "Segment Annotation Category Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_annotation_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x2C),
  "Segment Annotation Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const device_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x2D),
  "Device Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const device_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x2E),
  "Device Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const segment_annotation_type_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x2F),
  "Segment Annotation Type Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const patient_equipment_relationship_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x30),
  "Patient Equipment Relationship Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_fiducials_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x31),
  "Referenced Fiducials UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const patient_treatment_orientation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x32),
  "Patient Treatment Orientation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const user_content_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x33),
  "User Content Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const user_content_long_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x34),
  "User Content Long Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const entity_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x35),
  "Entity Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const entity_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x36),
  "Entity Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const entity_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x37),
  "Entity Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const entity_long_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x38),
  "Entity Long Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const device_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x39),
  "Device Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_treatment_phase_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x3A),
  "RT Treatment Phase Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_treatment_phase_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x3B),
  "RT Treatment Phase UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const rt_prescription_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x3C),
  "RT Prescription Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_segment_annotation_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x3D),
  "RT Segment Annotation Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const basis_rt_treatment_phase_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x3E),
  "Basis RT Treatment Phase Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const related_rt_treatment_phase_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x3F),
  "Related RT Treatment Phase Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_rt_treatment_phase_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x40),
  "Referenced RT Treatment Phase Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_rt_prescription_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x41),
  "Referenced RT Prescription Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const referenced_parent_rt_prescription_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x42),
  "Referenced Parent RT Prescription Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const manufacturer_device_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x43),
  "Manufacturer's Device Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const instance_level_referenced_performed_procedure_step_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x44),
  "Instance-Level Referenced Performed Procedure Step Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_treatment_phase_intent_presence_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x45),
  "RT Treatment Phase Intent Presence Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const radiotherapy_treatment_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x46),
  "Radiotherapy Treatment Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const teletherapy_radiation_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x47),
  "Teletherapy Radiation Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const brachytherapy_source_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x48),
  "Brachytherapy Source Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const referenced_rt_treatment_phase_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x49),
  "Referenced RT Treatment Phase Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_direct_segment_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x4A),
  "Referenced Direct Segment Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const intended_rt_treatment_phase_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x4B),
  "Intended RT Treatment Phase Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const intended_phase_start_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x4C),
  "Intended Phase Start Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const intended_phase_end_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x4D),
  "Intended Phase End Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const rt_treatment_phase_interval_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x4E),
  "RT Treatment Phase Interval Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const temporal_relationship_interval_anchor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x4F),
  "Temporal Relationship Interval Anchor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const minimum_number_of_interval_days = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x50),
  "Minimum Number of Interval Days",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const maximum_number_of_interval_days = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x51),
  "Maximum Number of Interval Days",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const pertinent_sop_classes_in_study = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x52),
  "Pertinent SOP Classes in Study",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const pertinent_sop_classes_in_series = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x53),
  "Pertinent SOP Classes in Series",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1_to_n,
);

export const rt_prescription_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x54),
  "RT Prescription Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const rt_physician_intent_predecessor_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x55),
  "RT Physician Intent Predecessor Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_treatment_approach_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x56),
  "RT Treatment Approach Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const rt_physician_intent_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x57),
  "RT Physician Intent Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_physician_intent_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x58),
  "RT Physician Intent Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_treatment_intent_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x59),
  "RT Treatment Intent Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const rt_physician_intent_narrative = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x5A),
  "RT Physician Intent Narrative",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const rt_protocol_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x5B),
  "RT Protocol Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const reason_for_superseding = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x5C),
  "Reason for Superseding",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const rt_diagnosis_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x5D),
  "RT Diagnosis Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_rt_physician_intent_index = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x5E),
  "Referenced RT Physician Intent Index",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const rt_physician_intent_input_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x5F),
  "RT Physician Intent Input Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_anatomic_prescription_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x60),
  "RT Anatomic Prescription Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const prior_treatment_dose_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x61),
  "Prior Treatment Dose Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const prior_treatment_reference_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x62),
  "Prior Treatment Reference Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dosimetric_objective_evaluation_scope = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x63),
  "Dosimetric Objective Evaluation Scope",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const therapeutic_role_category_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x64),
  "Therapeutic Role Category Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const therapeutic_role_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x65),
  "Therapeutic Role Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conceptual_volume_optimization_precedence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x66),
  "Conceptual Volume Optimization Precedence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const conceptual_volume_category_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x67),
  "Conceptual Volume Category Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conceptual_volume_blocking_constraint = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x68),
  "Conceptual Volume Blocking Constraint",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const conceptual_volume_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x69),
  "Conceptual Volume Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const conceptual_volume_type_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x6A),
  "Conceptual Volume Type Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const rt_prescription_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x6B),
  "RT Prescription Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dosimetric_objective_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x6C),
  "Dosimetric Objective Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dosimetric_objective_type_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x6D),
  "Dosimetric Objective Type Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const dosimetric_objective_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x6E),
  "Dosimetric Objective UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const referenced_dosimetric_objective_uid = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x6F),
  "Referenced Dosimetric Objective UID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UniqueIdentifier()]),
  vm_1,
);

export const dosimetric_objective_parameter_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x70),
  "Dosimetric Objective Parameter Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_dosimetric_objectives_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x71),
  "Referenced Dosimetric Objectives Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const absolute_dosimetric_objective_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x73),
  "Absolute Dosimetric Objective Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dosimetric_objective_weight = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x74),
  "Dosimetric Objective Weight",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const dosimetric_objective_purpose = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x75),
  "Dosimetric Objective Purpose",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const planning_input_information_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x76),
  "Planning Input Information Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_site = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x77),
  "Treatment Site",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const treatment_site_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x78),
  "Treatment Site Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fraction_pattern_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x79),
  "Fraction Pattern Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_technique_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x7A),
  "Treatment Technique Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const prescription_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x7B),
  "Prescription Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const number_of_interval_fractions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x7C),
  "Number of Interval Fractions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const number_of_fractions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x7D),
  "Number of Fractions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const intended_delivery_duration = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x7E),
  "Intended Delivery Duration",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const fractionation_notes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x7F),
  "Fractionation Notes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnlimitedText()]),
  vm_1,
);

export const rt_treatment_technique_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x80),
  "RT Treatment Technique Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const prescription_notes_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x81),
  "Prescription Notes Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fraction_based_relationship_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x82),
  "Fraction-Based Relationship Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const fraction_based_relationship_interval_anchor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x83),
  "Fraction-Based Relationship Interval Anchor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const minimum_hours_between_fractions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x84),
  "Minimum Hours between Fractions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const intended_fraction_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x85),
  "Intended Fraction Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1_to_n,
);

export const intended_start_day_of_week = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x86),
  "Intended Start Day of Week",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const weekday_fraction_pattern_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x87),
  "Weekday Fraction Pattern Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const delivery_time_structure_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x88),
  "Delivery Time Structure Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const treatment_site_modifier_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x89),
  "Treatment Site Modifier Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const robotic_base_location_indicator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x90),
  "Robotic Base Location Indicator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const robotic_path_node_set_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x91),
  "Robotic Path Node Set Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const robotic_node_identifier = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x92),
  "Robotic Node Identifier",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const rt_treatment_source_coordinates = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x93),
  "RT Treatment Source Coordinates",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_3,
);

export const radiation_source_coordinate_system_yaw_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x94),
  "Radiation Source Coordinate SystemYaw Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_source_coordinate_system_roll_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x95),
  "Radiation Source Coordinate SystemRoll Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const radiation_source_coordinate_system_pitch_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x96),
  "Radiation Source Coordinate System Pitch Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const robotic_path_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x97),
  "Robotic Path Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const tomotherapeutic_control_point_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x98),
  "Tomotherapeutic Control Point Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const tomotherapeutic_leaf_open_durations = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x99),
  "Tomotherapeutic Leaf Open Durations",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const tomotherapeutic_leaf_initial_closed_durations = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0x9A),
  "Tomotherapeutic Leaf Initial Closed Durations",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1_to_n,
);

export const conceptual_volume_identification_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x3010, 0xA0),
  "Conceptual Volume Identification Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_3010(element) {
  if (element === 0x1) {
    return new Ok(radiobiological_dose_effect_sequence);
  } else if (element === 0x2) {
    return new Ok(radiobiological_dose_effect_flag);
  } else if (element === 0x3) {
    return new Ok(effective_dose_calculation_method_category_code_sequence);
  } else if (element === 0x4) {
    return new Ok(effective_dose_calculation_method_code_sequence);
  } else if (element === 0x5) {
    return new Ok(effective_dose_calculation_method_description);
  } else if (element === 0x6) {
    return new Ok(conceptual_volume_uid);
  } else if (element === 0x7) {
    return new Ok(originating_sop_instance_reference_sequence);
  } else if (element === 0x8) {
    return new Ok(conceptual_volume_constituent_sequence);
  } else if (element === 0x9) {
    return new Ok(equivalent_conceptual_volume_instance_reference_sequence);
  } else if (element === 0xA) {
    return new Ok(equivalent_conceptual_volumes_sequence);
  } else if (element === 0xB) {
    return new Ok(referenced_conceptual_volume_uid);
  } else if (element === 0xC) {
    return new Ok(conceptual_volume_combination_expression);
  } else if (element === 0xD) {
    return new Ok(conceptual_volume_constituent_index);
  } else if (element === 0xE) {
    return new Ok(conceptual_volume_combination_flag);
  } else if (element === 0xF) {
    return new Ok(conceptual_volume_combination_description);
  } else if (element === 0x10) {
    return new Ok(conceptual_volume_segmentation_defined_flag);
  } else if (element === 0x11) {
    return new Ok(conceptual_volume_segmentation_reference_sequence);
  } else if (element === 0x12) {
    return new Ok(conceptual_volume_constituent_segmentation_reference_sequence);
  } else if (element === 0x13) {
    return new Ok(constituent_conceptual_volume_uid);
  } else if (element === 0x14) {
    return new Ok(derivation_conceptual_volume_sequence);
  } else if (element === 0x15) {
    return new Ok(source_conceptual_volume_uid);
  } else if (element === 0x16) {
    return new Ok(conceptual_volume_derivation_algorithm_sequence);
  } else if (element === 0x17) {
    return new Ok(conceptual_volume_description);
  } else if (element === 0x18) {
    return new Ok(source_conceptual_volume_sequence);
  } else if (element === 0x19) {
    return new Ok(author_identification_sequence);
  } else if (element === 0x1A) {
    return new Ok(manufacturer_model_version);
  } else if (element === 0x1B) {
    return new Ok(device_alternate_identifier);
  } else if (element === 0x1C) {
    return new Ok(device_alternate_identifier_type);
  } else if (element === 0x1D) {
    return new Ok(device_alternate_identifier_format);
  } else if (element === 0x1E) {
    return new Ok(segmentation_creation_template_label);
  } else if (element === 0x1F) {
    return new Ok(segmentation_template_uid);
  } else if (element === 0x20) {
    return new Ok(referenced_segment_reference_index);
  } else if (element === 0x21) {
    return new Ok(segment_reference_sequence);
  } else if (element === 0x22) {
    return new Ok(segment_reference_index);
  } else if (element === 0x23) {
    return new Ok(direct_segment_reference_sequence);
  } else if (element === 0x24) {
    return new Ok(combination_segment_reference_sequence);
  } else if (element === 0x25) {
    return new Ok(conceptual_volume_sequence);
  } else if (element === 0x26) {
    return new Ok(segmented_rt_accessory_device_sequence);
  } else if (element === 0x27) {
    return new Ok(segment_characteristics_sequence);
  } else if (element === 0x28) {
    return new Ok(related_segment_characteristics_sequence);
  } else if (element === 0x29) {
    return new Ok(segment_characteristics_precedence);
  } else if (element === 0x2A) {
    return new Ok(rt_segment_annotation_sequence);
  } else if (element === 0x2B) {
    return new Ok(segment_annotation_category_code_sequence);
  } else if (element === 0x2C) {
    return new Ok(segment_annotation_type_code_sequence);
  } else if (element === 0x2D) {
    return new Ok(device_label);
  } else if (element === 0x2E) {
    return new Ok(device_type_code_sequence);
  } else if (element === 0x2F) {
    return new Ok(segment_annotation_type_modifier_code_sequence);
  } else if (element === 0x30) {
    return new Ok(patient_equipment_relationship_code_sequence);
  } else if (element === 0x31) {
    return new Ok(referenced_fiducials_uid);
  } else if (element === 0x32) {
    return new Ok(patient_treatment_orientation_sequence);
  } else if (element === 0x33) {
    return new Ok(user_content_label);
  } else if (element === 0x34) {
    return new Ok(user_content_long_label);
  } else if (element === 0x35) {
    return new Ok(entity_label);
  } else if (element === 0x36) {
    return new Ok(entity_name);
  } else if (element === 0x37) {
    return new Ok(entity_description);
  } else if (element === 0x38) {
    return new Ok(entity_long_label);
  } else if (element === 0x39) {
    return new Ok(device_index);
  } else if (element === 0x3A) {
    return new Ok(rt_treatment_phase_index);
  } else if (element === 0x3B) {
    return new Ok(rt_treatment_phase_uid);
  } else if (element === 0x3C) {
    return new Ok(rt_prescription_index);
  } else if (element === 0x3D) {
    return new Ok(rt_segment_annotation_index);
  } else if (element === 0x3E) {
    return new Ok(basis_rt_treatment_phase_index);
  } else if (element === 0x3F) {
    return new Ok(related_rt_treatment_phase_index);
  } else if (element === 0x40) {
    return new Ok(referenced_rt_treatment_phase_index);
  } else if (element === 0x41) {
    return new Ok(referenced_rt_prescription_index);
  } else if (element === 0x42) {
    return new Ok(referenced_parent_rt_prescription_index);
  } else if (element === 0x43) {
    return new Ok(manufacturer_device_identifier);
  } else if (element === 0x44) {
    return new Ok(instance_level_referenced_performed_procedure_step_sequence);
  } else if (element === 0x45) {
    return new Ok(rt_treatment_phase_intent_presence_flag);
  } else if (element === 0x46) {
    return new Ok(radiotherapy_treatment_type);
  } else if (element === 0x47) {
    return new Ok(teletherapy_radiation_type);
  } else if (element === 0x48) {
    return new Ok(brachytherapy_source_type);
  } else if (element === 0x49) {
    return new Ok(referenced_rt_treatment_phase_sequence);
  } else if (element === 0x4A) {
    return new Ok(referenced_direct_segment_instance_sequence);
  } else if (element === 0x4B) {
    return new Ok(intended_rt_treatment_phase_sequence);
  } else if (element === 0x4C) {
    return new Ok(intended_phase_start_date);
  } else if (element === 0x4D) {
    return new Ok(intended_phase_end_date);
  } else if (element === 0x4E) {
    return new Ok(rt_treatment_phase_interval_sequence);
  } else if (element === 0x4F) {
    return new Ok(temporal_relationship_interval_anchor);
  } else if (element === 0x50) {
    return new Ok(minimum_number_of_interval_days);
  } else if (element === 0x51) {
    return new Ok(maximum_number_of_interval_days);
  } else if (element === 0x52) {
    return new Ok(pertinent_sop_classes_in_study);
  } else if (element === 0x53) {
    return new Ok(pertinent_sop_classes_in_series);
  } else if (element === 0x54) {
    return new Ok(rt_prescription_label);
  } else if (element === 0x55) {
    return new Ok(rt_physician_intent_predecessor_sequence);
  } else if (element === 0x56) {
    return new Ok(rt_treatment_approach_label);
  } else if (element === 0x57) {
    return new Ok(rt_physician_intent_sequence);
  } else if (element === 0x58) {
    return new Ok(rt_physician_intent_index);
  } else if (element === 0x59) {
    return new Ok(rt_treatment_intent_type);
  } else if (element === 0x5A) {
    return new Ok(rt_physician_intent_narrative);
  } else if (element === 0x5B) {
    return new Ok(rt_protocol_code_sequence);
  } else if (element === 0x5C) {
    return new Ok(reason_for_superseding);
  } else if (element === 0x5D) {
    return new Ok(rt_diagnosis_code_sequence);
  } else if (element === 0x5E) {
    return new Ok(referenced_rt_physician_intent_index);
  } else if (element === 0x5F) {
    return new Ok(rt_physician_intent_input_instance_sequence);
  } else if (element === 0x60) {
    return new Ok(rt_anatomic_prescription_sequence);
  } else if (element === 0x61) {
    return new Ok(prior_treatment_dose_description);
  } else if (element === 0x62) {
    return new Ok(prior_treatment_reference_sequence);
  } else if (element === 0x63) {
    return new Ok(dosimetric_objective_evaluation_scope);
  } else if (element === 0x64) {
    return new Ok(therapeutic_role_category_code_sequence);
  } else if (element === 0x65) {
    return new Ok(therapeutic_role_type_code_sequence);
  } else if (element === 0x66) {
    return new Ok(conceptual_volume_optimization_precedence);
  } else if (element === 0x67) {
    return new Ok(conceptual_volume_category_code_sequence);
  } else if (element === 0x68) {
    return new Ok(conceptual_volume_blocking_constraint);
  } else if (element === 0x69) {
    return new Ok(conceptual_volume_type_code_sequence);
  } else if (element === 0x6A) {
    return new Ok(conceptual_volume_type_modifier_code_sequence);
  } else if (element === 0x6B) {
    return new Ok(rt_prescription_sequence);
  } else if (element === 0x6C) {
    return new Ok(dosimetric_objective_sequence);
  } else if (element === 0x6D) {
    return new Ok(dosimetric_objective_type_code_sequence);
  } else if (element === 0x6E) {
    return new Ok(dosimetric_objective_uid);
  } else if (element === 0x6F) {
    return new Ok(referenced_dosimetric_objective_uid);
  } else if (element === 0x70) {
    return new Ok(dosimetric_objective_parameter_sequence);
  } else if (element === 0x71) {
    return new Ok(referenced_dosimetric_objectives_sequence);
  } else if (element === 0x73) {
    return new Ok(absolute_dosimetric_objective_flag);
  } else if (element === 0x74) {
    return new Ok(dosimetric_objective_weight);
  } else if (element === 0x75) {
    return new Ok(dosimetric_objective_purpose);
  } else if (element === 0x76) {
    return new Ok(planning_input_information_sequence);
  } else if (element === 0x77) {
    return new Ok(treatment_site);
  } else if (element === 0x78) {
    return new Ok(treatment_site_code_sequence);
  } else if (element === 0x79) {
    return new Ok(fraction_pattern_sequence);
  } else if (element === 0x7A) {
    return new Ok(treatment_technique_notes);
  } else if (element === 0x7B) {
    return new Ok(prescription_notes);
  } else if (element === 0x7C) {
    return new Ok(number_of_interval_fractions);
  } else if (element === 0x7D) {
    return new Ok(number_of_fractions);
  } else if (element === 0x7E) {
    return new Ok(intended_delivery_duration);
  } else if (element === 0x7F) {
    return new Ok(fractionation_notes);
  } else if (element === 0x80) {
    return new Ok(rt_treatment_technique_code_sequence);
  } else if (element === 0x81) {
    return new Ok(prescription_notes_sequence);
  } else if (element === 0x82) {
    return new Ok(fraction_based_relationship_sequence);
  } else if (element === 0x83) {
    return new Ok(fraction_based_relationship_interval_anchor);
  } else if (element === 0x84) {
    return new Ok(minimum_hours_between_fractions);
  } else if (element === 0x85) {
    return new Ok(intended_fraction_start_time);
  } else if (element === 0x86) {
    return new Ok(intended_start_day_of_week);
  } else if (element === 0x87) {
    return new Ok(weekday_fraction_pattern_sequence);
  } else if (element === 0x88) {
    return new Ok(delivery_time_structure_code_sequence);
  } else if (element === 0x89) {
    return new Ok(treatment_site_modifier_code_sequence);
  } else if (element === 0x90) {
    return new Ok(robotic_base_location_indicator);
  } else if (element === 0x91) {
    return new Ok(robotic_path_node_set_code_sequence);
  } else if (element === 0x92) {
    return new Ok(robotic_node_identifier);
  } else if (element === 0x93) {
    return new Ok(rt_treatment_source_coordinates);
  } else if (element === 0x94) {
    return new Ok(radiation_source_coordinate_system_yaw_angle);
  } else if (element === 0x95) {
    return new Ok(radiation_source_coordinate_system_roll_angle);
  } else if (element === 0x96) {
    return new Ok(radiation_source_coordinate_system_pitch_angle);
  } else if (element === 0x97) {
    return new Ok(robotic_path_control_point_sequence);
  } else if (element === 0x98) {
    return new Ok(tomotherapeutic_control_point_sequence);
  } else if (element === 0x99) {
    return new Ok(tomotherapeutic_leaf_open_durations);
  } else if (element === 0x9A) {
    return new Ok(tomotherapeutic_leaf_initial_closed_durations);
  } else if (element === 0xA0) {
    return new Ok(conceptual_volume_identification_sequence);
  } else {
    return new Error(undefined);
  }
}

export const arbitrary = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4000, 0x10),
  "Arbitrary",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const text_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4000, 0x4000),
  "Text Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

function find_element_in_group_4000(element) {
  if (element === 0x10) {
    return new Ok(arbitrary);
  } else if (element === 0x4000) {
    return new Ok(text_comments);
  } else {
    return new Error(undefined);
  }
}

export const results_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x40),
  "Results ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const results_id_issuer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x42),
  "Results ID Issuer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const referenced_interpretation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x50),
  "Referenced Interpretation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const report_production_status_trial = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0xFF),
  "Report Production Status (Trial)",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const interpretation_recorded_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x100),
  "Interpretation Recorded Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const interpretation_recorded_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x101),
  "Interpretation Recorded Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const interpretation_recorder = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x102),
  "Interpretation Recorder",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const reference_to_recorded_sound = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x103),
  "Reference to Recorded Sound",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const interpretation_transcription_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x108),
  "Interpretation Transcription Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const interpretation_transcription_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x109),
  "Interpretation Transcription Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const interpretation_transcriber = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x10A),
  "Interpretation Transcriber",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const interpretation_text = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x10B),
  "Interpretation Text",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const interpretation_author = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x10C),
  "Interpretation Author",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const interpretation_approver_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x111),
  "Interpretation Approver Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const interpretation_approval_date = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x112),
  "Interpretation Approval Date",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Date()]),
  vm_1,
);

export const interpretation_approval_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x113),
  "Interpretation Approval Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Time()]),
  vm_1,
);

export const physician_approving_interpretation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x114),
  "Physician Approving Interpretation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const interpretation_diagnosis_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x115),
  "Interpretation Diagnosis Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const interpretation_diagnosis_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x117),
  "Interpretation Diagnosis Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const results_distribution_list_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x118),
  "Results Distribution List Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const distribution_name = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x119),
  "Distribution Name",
  /* @__PURE__ */ toList([/* @__PURE__ */ new PersonName()]),
  vm_1,
);

export const distribution_address = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x11A),
  "Distribution Address",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const interpretation_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x200),
  "Interpretation ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const interpretation_id_issuer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x202),
  "Interpretation ID Issuer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const interpretation_type_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x210),
  "Interpretation Type ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const interpretation_status_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x212),
  "Interpretation Status ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const impressions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x300),
  "Impressions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const results_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4008, 0x4000),
  "Results Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

function find_element_in_group_4008(element) {
  if (element === 0x40) {
    return new Ok(results_id);
  } else if (element === 0x42) {
    return new Ok(results_id_issuer);
  } else if (element === 0x50) {
    return new Ok(referenced_interpretation_sequence);
  } else if (element === 0xFF) {
    return new Ok(report_production_status_trial);
  } else if (element === 0x100) {
    return new Ok(interpretation_recorded_date);
  } else if (element === 0x101) {
    return new Ok(interpretation_recorded_time);
  } else if (element === 0x102) {
    return new Ok(interpretation_recorder);
  } else if (element === 0x103) {
    return new Ok(reference_to_recorded_sound);
  } else if (element === 0x108) {
    return new Ok(interpretation_transcription_date);
  } else if (element === 0x109) {
    return new Ok(interpretation_transcription_time);
  } else if (element === 0x10A) {
    return new Ok(interpretation_transcriber);
  } else if (element === 0x10B) {
    return new Ok(interpretation_text);
  } else if (element === 0x10C) {
    return new Ok(interpretation_author);
  } else if (element === 0x111) {
    return new Ok(interpretation_approver_sequence);
  } else if (element === 0x112) {
    return new Ok(interpretation_approval_date);
  } else if (element === 0x113) {
    return new Ok(interpretation_approval_time);
  } else if (element === 0x114) {
    return new Ok(physician_approving_interpretation);
  } else if (element === 0x115) {
    return new Ok(interpretation_diagnosis_description);
  } else if (element === 0x117) {
    return new Ok(interpretation_diagnosis_code_sequence);
  } else if (element === 0x118) {
    return new Ok(results_distribution_list_sequence);
  } else if (element === 0x119) {
    return new Ok(distribution_name);
  } else if (element === 0x11A) {
    return new Ok(distribution_address);
  } else if (element === 0x200) {
    return new Ok(interpretation_id);
  } else if (element === 0x202) {
    return new Ok(interpretation_id_issuer);
  } else if (element === 0x210) {
    return new Ok(interpretation_type_id);
  } else if (element === 0x212) {
    return new Ok(interpretation_status_id);
  } else if (element === 0x300) {
    return new Ok(impressions);
  } else if (element === 0x4000) {
    return new Ok(results_comments);
  } else {
    return new Error(undefined);
  }
}

export const low_energy_detectors = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1),
  "Low Energy Detectors",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const high_energy_detectors = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x2),
  "High Energy Detectors",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const detector_geometry_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x4),
  "Detector Geometry Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const threat_roi_voxel_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1001),
  "Threat ROI Voxel Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const threat_roi_base = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1004),
  "Threat ROI Base",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const threat_roi_extents = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1005),
  "Threat ROI Extents",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const threat_roi_bitmap = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1006),
  "Threat ROI Bitmap",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const route_segment_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1007),
  "Route Segment ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const gantry_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1008),
  "Gantry Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ooi_owner_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1009),
  "OOI Owner Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const route_segment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x100A),
  "Route Segment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const potential_threat_object_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1010),
  "Potential Threat Object ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const threat_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1011),
  "Threat Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const threat_category = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1012),
  "Threat Category",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const threat_category_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1013),
  "Threat Category Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const atd_ability_assessment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1014),
  "ATD Ability Assessment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const atd_assessment_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1015),
  "ATD Assessment Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const atd_assessment_probability = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1016),
  "ATD Assessment Probability",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const mass = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1017),
  "Mass",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const density = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1018),
  "Density",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const z_effective = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1019),
  "Z Effective",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const boarding_pass_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x101A),
  "Boarding Pass ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const center_of_mass = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x101B),
  "Center of Mass",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const center_of_pto = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x101C),
  "Center of PTO",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const bounding_polygon = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x101D),
  "Bounding Polygon",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  /* @__PURE__ */ new ValueMultiplicity(6, /* @__PURE__ */ new None()),
);

export const route_segment_start_location_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x101E),
  "Route Segment Start Location ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const route_segment_end_location_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x101F),
  "Route Segment End Location ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const route_segment_location_id_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1020),
  "Route Segment Location ID Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const abort_reason = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1021),
  "Abort Reason",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const volume_of_pto = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1023),
  "Volume of PTO",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const abort_flag = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1024),
  "Abort Flag",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const route_segment_start_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1025),
  "Route Segment Start Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const route_segment_end_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1026),
  "Route Segment End Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const tdr_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1027),
  "TDR Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const international_route_segment = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1028),
  "International Route Segment",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const threat_detection_algorithm_and_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1029),
  "Threat Detection Algorithm and Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1_to_n,
);

export const assigned_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x102A),
  "Assigned Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const alarm_decision_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x102B),
  "Alarm Decision Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const alarm_decision = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1031),
  "Alarm Decision",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const number_of_total_objects = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1033),
  "Number of Total Objects",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_alarm_objects = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1034),
  "Number of Alarm Objects",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const pto_representation_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1037),
  "PTO Representation Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const atd_assessment_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1038),
  "ATD Assessment Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const tip_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1039),
  "TIP Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const dicos_version = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x103A),
  "DICOS Version",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ooi_owner_creation_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1041),
  "OOI Owner Creation Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DateTime()]),
  vm_1,
);

export const ooi_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1042),
  "OOI Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ooi_size = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1043),
  "OOI Size",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const acquisition_status = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1044),
  "Acquisition Status",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const basis_materials_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1045),
  "Basis Materials Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const phantom_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1046),
  "Phantom Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ooi_owner_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1047),
  "OOI Owner Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const scan_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1048),
  "Scan Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const itinerary_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1051),
  "Itinerary ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const itinerary_id_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1052),
  "Itinerary ID Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const itinerary_id_assigning_authority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1053),
  "Itinerary ID Assigning Authority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const route_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1054),
  "Route ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const route_id_assigning_authority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1055),
  "Route ID Assigning Authority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const inbound_arrival_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1056),
  "Inbound Arrival Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const carrier_id = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1058),
  "Carrier ID",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const carrier_id_assigning_authority = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1059),
  "Carrier ID Assigning Authority",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const source_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1060),
  "Source Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const source_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1061),
  "Source Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const belt_height = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1062),
  "Belt Height",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const algorithm_routing_code_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1064),
  "Algorithm Routing Code Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const transport_classification = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1067),
  "Transport Classification",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const ooi_type_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1068),
  "OOI Type Descriptor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const total_processing_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1069),
  "Total Processing Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_1,
);

export const detector_calibration_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x106C),
  "Detector Calibration Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

export const additional_screening_performed = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x106D),
  "Additional Screening Performed",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const additional_inspection_selection_criteria = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x106E),
  "Additional Inspection Selection Criteria",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const additional_inspection_method_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x106F),
  "Additional Inspection Method Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const ait_device_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1070),
  "AIT Device Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const qr_measurements_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1071),
  "QR Measurements Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const target_material_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1072),
  "Target Material Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const snr_threshold = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1073),
  "SNR Threshold",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointDouble()]),
  vm_1,
);

export const image_scale_representation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1075),
  "Image Scale Representation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const referenced_pto_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1076),
  "Referenced PTO Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const referenced_tdr_instance_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1077),
  "Referenced TDR Instance Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const pto_location_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1078),
  "PTO Location Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortText()]),
  vm_1,
);

export const anomaly_locator_indicator_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x1079),
  "Anomaly Locator Indicator Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const anomaly_locator_indicator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x107A),
  "Anomaly Locator Indicator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new FloatingPointSingle()]),
  vm_3,
);

export const pto_region_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x107B),
  "PTO Region Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const inspection_selection_criteria = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x107C),
  "Inspection Selection Criteria",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const secondary_inspection_method_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x107D),
  "Secondary Inspection Method Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const prcs_to_rcs_orientation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4010, 0x107E),
  "PRCS to RCS Orientation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_6,
);

function find_element_in_group_4010(element) {
  if (element === 0x1) {
    return new Ok(low_energy_detectors);
  } else if (element === 0x2) {
    return new Ok(high_energy_detectors);
  } else if (element === 0x4) {
    return new Ok(detector_geometry_sequence);
  } else if (element === 0x1001) {
    return new Ok(threat_roi_voxel_sequence);
  } else if (element === 0x1004) {
    return new Ok(threat_roi_base);
  } else if (element === 0x1005) {
    return new Ok(threat_roi_extents);
  } else if (element === 0x1006) {
    return new Ok(threat_roi_bitmap);
  } else if (element === 0x1007) {
    return new Ok(route_segment_id);
  } else if (element === 0x1008) {
    return new Ok(gantry_type);
  } else if (element === 0x1009) {
    return new Ok(ooi_owner_type);
  } else if (element === 0x100A) {
    return new Ok(route_segment_sequence);
  } else if (element === 0x1010) {
    return new Ok(potential_threat_object_id);
  } else if (element === 0x1011) {
    return new Ok(threat_sequence);
  } else if (element === 0x1012) {
    return new Ok(threat_category);
  } else if (element === 0x1013) {
    return new Ok(threat_category_description);
  } else if (element === 0x1014) {
    return new Ok(atd_ability_assessment);
  } else if (element === 0x1015) {
    return new Ok(atd_assessment_flag);
  } else if (element === 0x1016) {
    return new Ok(atd_assessment_probability);
  } else if (element === 0x1017) {
    return new Ok(mass);
  } else if (element === 0x1018) {
    return new Ok(density);
  } else if (element === 0x1019) {
    return new Ok(z_effective);
  } else if (element === 0x101A) {
    return new Ok(boarding_pass_id);
  } else if (element === 0x101B) {
    return new Ok(center_of_mass);
  } else if (element === 0x101C) {
    return new Ok(center_of_pto);
  } else if (element === 0x101D) {
    return new Ok(bounding_polygon);
  } else if (element === 0x101E) {
    return new Ok(route_segment_start_location_id);
  } else if (element === 0x101F) {
    return new Ok(route_segment_end_location_id);
  } else if (element === 0x1020) {
    return new Ok(route_segment_location_id_type);
  } else if (element === 0x1021) {
    return new Ok(abort_reason);
  } else if (element === 0x1023) {
    return new Ok(volume_of_pto);
  } else if (element === 0x1024) {
    return new Ok(abort_flag);
  } else if (element === 0x1025) {
    return new Ok(route_segment_start_time);
  } else if (element === 0x1026) {
    return new Ok(route_segment_end_time);
  } else if (element === 0x1027) {
    return new Ok(tdr_type);
  } else if (element === 0x1028) {
    return new Ok(international_route_segment);
  } else if (element === 0x1029) {
    return new Ok(threat_detection_algorithm_and_version);
  } else if (element === 0x102A) {
    return new Ok(assigned_location);
  } else if (element === 0x102B) {
    return new Ok(alarm_decision_time);
  } else if (element === 0x1031) {
    return new Ok(alarm_decision);
  } else if (element === 0x1033) {
    return new Ok(number_of_total_objects);
  } else if (element === 0x1034) {
    return new Ok(number_of_alarm_objects);
  } else if (element === 0x1037) {
    return new Ok(pto_representation_sequence);
  } else if (element === 0x1038) {
    return new Ok(atd_assessment_sequence);
  } else if (element === 0x1039) {
    return new Ok(tip_type);
  } else if (element === 0x103A) {
    return new Ok(dicos_version);
  } else if (element === 0x1041) {
    return new Ok(ooi_owner_creation_time);
  } else if (element === 0x1042) {
    return new Ok(ooi_type);
  } else if (element === 0x1043) {
    return new Ok(ooi_size);
  } else if (element === 0x1044) {
    return new Ok(acquisition_status);
  } else if (element === 0x1045) {
    return new Ok(basis_materials_code_sequence);
  } else if (element === 0x1046) {
    return new Ok(phantom_type);
  } else if (element === 0x1047) {
    return new Ok(ooi_owner_sequence);
  } else if (element === 0x1048) {
    return new Ok(scan_type);
  } else if (element === 0x1051) {
    return new Ok(itinerary_id);
  } else if (element === 0x1052) {
    return new Ok(itinerary_id_type);
  } else if (element === 0x1053) {
    return new Ok(itinerary_id_assigning_authority);
  } else if (element === 0x1054) {
    return new Ok(route_id);
  } else if (element === 0x1055) {
    return new Ok(route_id_assigning_authority);
  } else if (element === 0x1056) {
    return new Ok(inbound_arrival_type);
  } else if (element === 0x1058) {
    return new Ok(carrier_id);
  } else if (element === 0x1059) {
    return new Ok(carrier_id_assigning_authority);
  } else if (element === 0x1060) {
    return new Ok(source_orientation);
  } else if (element === 0x1061) {
    return new Ok(source_position);
  } else if (element === 0x1062) {
    return new Ok(belt_height);
  } else if (element === 0x1064) {
    return new Ok(algorithm_routing_code_sequence);
  } else if (element === 0x1067) {
    return new Ok(transport_classification);
  } else if (element === 0x1068) {
    return new Ok(ooi_type_descriptor);
  } else if (element === 0x1069) {
    return new Ok(total_processing_time);
  } else if (element === 0x106C) {
    return new Ok(detector_calibration_data);
  } else if (element === 0x106D) {
    return new Ok(additional_screening_performed);
  } else if (element === 0x106E) {
    return new Ok(additional_inspection_selection_criteria);
  } else if (element === 0x106F) {
    return new Ok(additional_inspection_method_sequence);
  } else if (element === 0x1070) {
    return new Ok(ait_device_type);
  } else if (element === 0x1071) {
    return new Ok(qr_measurements_sequence);
  } else if (element === 0x1072) {
    return new Ok(target_material_sequence);
  } else if (element === 0x1073) {
    return new Ok(snr_threshold);
  } else if (element === 0x1075) {
    return new Ok(image_scale_representation);
  } else if (element === 0x1076) {
    return new Ok(referenced_pto_sequence);
  } else if (element === 0x1077) {
    return new Ok(referenced_tdr_instance_sequence);
  } else if (element === 0x1078) {
    return new Ok(pto_location_description);
  } else if (element === 0x1079) {
    return new Ok(anomaly_locator_indicator_sequence);
  } else if (element === 0x107A) {
    return new Ok(anomaly_locator_indicator);
  } else if (element === 0x107B) {
    return new Ok(pto_region_sequence);
  } else if (element === 0x107C) {
    return new Ok(inspection_selection_criteria);
  } else if (element === 0x107D) {
    return new Ok(secondary_inspection_method_sequence);
  } else if (element === 0x107E) {
    return new Ok(prcs_to_rcs_orientation);
  } else {
    return new Error(undefined);
  }
}

export const mac_parameters_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x4FFE, 0x1),
  "MAC Parameters Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_4ffe(element) {
  if (element === 0x1) {
    return new Ok(mac_parameters_sequence);
  } else {
    return new Error(undefined);
  }
}

export const curve_dimensions = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x5),
  "Curve Dimensions",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_points = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x10),
  "Number of Points",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const type_of_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x20),
  "Type of Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const curve_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x22),
  "Curve Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const axis_units = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x30),
  "Axis Units",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const axis_labels = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x40),
  "Axis Labels",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const data_value_representation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x103),
  "Data Value Representation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const minimum_coordinate_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x104),
  "Minimum Coordinate Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const maximum_coordinate_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x105),
  "Maximum Coordinate Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const curve_range = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x106),
  "Curve Range",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1_to_n,
);

export const curve_data_descriptor = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x110),
  "Curve Data Descriptor",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const coordinate_start_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x112),
  "Coordinate Start Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const coordinate_step_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x114),
  "Coordinate Step Value",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const curve_activation_layer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x1001),
  "Curve Activation Layer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const audio_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2000),
  "Audio Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const audio_sample_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2002),
  "Audio Sample Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_channels = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2004),
  "Number of Channels",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_samples = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2006),
  "Number of Samples",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const sample_rate = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2008),
  "Sample Rate",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const total_time = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x200A),
  "Total Time",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedLong()]),
  vm_1,
);

export const audio_sample_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x200C),
  "Audio Sample Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const audio_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x200E),
  "Audio Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const curve_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2500),
  "Curve Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const curve_referenced_overlay_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2600),
  "Curve Referenced Overlay Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const curve_referenced_overlay_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x2610),
  "Curve Referenced Overlay Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const curve_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5000, 0x3000),
  "Curve Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const shared_functional_groups_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5200, 0x9229),
  "Shared Functional Groups Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const per_frame_functional_groups_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5200, 0x9230),
  "Per-Frame Functional Groups Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_5200(element) {
  if (element === 0x9229) {
    return new Ok(shared_functional_groups_sequence);
  } else if (element === 0x9230) {
    return new Ok(per_frame_functional_groups_sequence);
  } else {
    return new Error(undefined);
  }
}

export const waveform_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5400, 0x100),
  "Waveform Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

export const channel_minimum_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5400, 0x110),
  "Channel Minimum Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const channel_maximum_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5400, 0x112),
  "Channel Maximum Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const waveform_bits_allocated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5400, 0x1004),
  "Waveform Bits Allocated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const waveform_sample_interpretation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5400, 0x1006),
  "Waveform Sample Interpretation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const waveform_padding_value = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5400, 0x100A),
  "Waveform Padding Value",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const waveform_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5400, 0x1010),
  "Waveform Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

function find_element_in_group_5400(element) {
  if (element === 0x100) {
    return new Ok(waveform_sequence);
  } else if (element === 0x110) {
    return new Ok(channel_minimum_value);
  } else if (element === 0x112) {
    return new Ok(channel_maximum_value);
  } else if (element === 0x1004) {
    return new Ok(waveform_bits_allocated);
  } else if (element === 0x1006) {
    return new Ok(waveform_sample_interpretation);
  } else if (element === 0x100A) {
    return new Ok(waveform_padding_value);
  } else if (element === 0x1010) {
    return new Ok(waveform_data);
  } else {
    return new Error(undefined);
  }
}

export const first_order_phase_correction_angle = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5600, 0x10),
  "First Order Phase Correction Angle",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const spectroscopy_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x5600, 0x20),
  "Spectroscopy Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

function find_element_in_group_5600(element) {
  if (element === 0x10) {
    return new Ok(first_order_phase_correction_angle);
  } else if (element === 0x20) {
    return new Ok(spectroscopy_data);
  } else {
    return new Error(undefined);
  }
}

export const overlay_rows = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x10),
  "Overlay Rows",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_columns = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x11),
  "Overlay Columns",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_planes = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x12),
  "Overlay Planes",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const number_of_frames_in_overlay = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x15),
  "Number of Frames in Overlay",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const overlay_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x22),
  "Overlay Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const overlay_type = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x40),
  "Overlay Type",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_subtype = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x45),
  "Overlay Subtype",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const overlay_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x50),
  "Overlay Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new SignedShort()]),
  vm_2,
);

export const image_frame_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x51),
  "Image Frame Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_plane_origin = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x52),
  "Overlay Plane Origin",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_compression_code = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x60),
  "Overlay Compression Code",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_compression_originator = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x61),
  "Overlay Compression Originator",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const overlay_compression_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x62),
  "Overlay Compression Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new ShortString()]),
  vm_1,
);

export const overlay_compression_description = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x63),
  "Overlay Compression Description",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_compression_step_pointers = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x66),
  "Overlay Compression Step Pointers",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const overlay_repeat_interval = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x68),
  "Overlay Repeat Interval",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_bits_grouped = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x69),
  "Overlay Bits Grouped",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_bits_allocated = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x100),
  "Overlay Bits Allocated",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_bit_position = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x102),
  "Overlay Bit Position",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_format = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x110),
  "Overlay Format",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x200),
  "Overlay Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_code_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x800),
  "Overlay Code Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1_to_n,
);

export const overlay_number_of_tables = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x802),
  "Overlay Number of Tables",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_code_table_location = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x803),
  "Overlay Code Table Location",
  /* @__PURE__ */ toList([/* @__PURE__ */ new AttributeTag()]),
  vm_1_to_n,
);

export const overlay_bits_for_code_word = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x804),
  "Overlay Bits For Code Word",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_activation_layer = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1001),
  "Overlay Activation Layer",
  /* @__PURE__ */ toList([/* @__PURE__ */ new CodeString()]),
  vm_1,
);

export const overlay_descriptor_gray = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1100),
  "Overlay Descriptor - Gray",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_descriptor_red = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1101),
  "Overlay Descriptor - Red",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_descriptor_green = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1102),
  "Overlay Descriptor - Green",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlay_descriptor_blue = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1103),
  "Overlay Descriptor - Blue",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const overlays_gray = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1200),
  "Overlays - Gray",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const overlays_red = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1201),
  "Overlays - Red",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const overlays_green = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1202),
  "Overlays - Green",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const overlays_blue = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1203),
  "Overlays - Blue",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1_to_n,
);

export const roi_area = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1301),
  "ROI Area",
  /* @__PURE__ */ toList([/* @__PURE__ */ new IntegerString()]),
  vm_1,
);

export const roi_mean = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1302),
  "ROI Mean",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const roi_standard_deviation = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1303),
  "ROI Standard Deviation",
  /* @__PURE__ */ toList([/* @__PURE__ */ new DecimalString()]),
  vm_1,
);

export const overlay_label = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x1500),
  "Overlay Label",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongString()]),
  vm_1,
);

export const overlay_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x3000),
  "Overlay Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const overlay_comments = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x6000, 0x4000),
  "Overlay Comments",
  /* @__PURE__ */ toList([/* @__PURE__ */ new LongText()]),
  vm_1,
);

export const extended_offset_table = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x1),
  "Extended Offset Table",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherVeryLongString()]),
  vm_1,
);

export const extended_offset_table_lengths = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x2),
  "Extended Offset Table Lengths",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherVeryLongString()]),
  vm_1,
);

export const encapsulated_pixel_data_value_total_length = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x3),
  "Encapsulated Pixel Data Value Total Length",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedVeryLong()]),
  vm_1,
);

export const float_pixel_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x8),
  "Float Pixel Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherFloatString()]),
  vm_1,
);

export const double_float_pixel_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x9),
  "Double Float Pixel Data",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherDoubleString()]),
  vm_1,
);

export const pixel_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x10),
  "Pixel Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const coefficients_sdvn = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x20),
  "Coefficients SDVN",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const coefficients_sdhn = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x30),
  "Coefficients SDHN",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const coefficients_sddn = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7FE0, 0x40),
  "Coefficients SDDN",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

function find_element_in_group_7fe0(element) {
  if (element === 0x1) {
    return new Ok(extended_offset_table);
  } else if (element === 0x2) {
    return new Ok(extended_offset_table_lengths);
  } else if (element === 0x3) {
    return new Ok(encapsulated_pixel_data_value_total_length);
  } else if (element === 0x8) {
    return new Ok(float_pixel_data);
  } else if (element === 0x9) {
    return new Ok(double_float_pixel_data);
  } else if (element === 0x10) {
    return new Ok(pixel_data);
  } else if (element === 0x20) {
    return new Ok(coefficients_sdvn);
  } else if (element === 0x30) {
    return new Ok(coefficients_sdhn);
  } else if (element === 0x40) {
    return new Ok(coefficients_sddn);
  } else {
    return new Error(undefined);
  }
}

export const variable_pixel_data = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7F00, 0x10),
  "Variable Pixel Data",
  /* @__PURE__ */ toList([
    /* @__PURE__ */ new OtherByteString(),
    /* @__PURE__ */ new OtherWordString(),
  ]),
  vm_1,
);

export const variable_next_data_group = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7F00, 0x11),
  "Variable Next Data Group",
  /* @__PURE__ */ toList([/* @__PURE__ */ new UnsignedShort()]),
  vm_1,
);

export const variable_coefficients_sdvn = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7F00, 0x20),
  "Variable Coefficients SDVN",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const variable_coefficients_sdhn = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7F00, 0x30),
  "Variable Coefficients SDHN",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const variable_coefficients_sddn = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0x7F00, 0x40),
  "Variable Coefficients SDDN",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherWordString()]),
  vm_1,
);

export const digital_signatures_sequence = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0xFFFA, 0xFFFA),
  "Digital Signatures Sequence",
  /* @__PURE__ */ toList([/* @__PURE__ */ new Sequence()]),
  vm_1,
);

function find_element_in_group_fffa(element) {
  if (element === 0xFFFA) {
    return new Ok(digital_signatures_sequence);
  } else {
    return new Error(undefined);
  }
}

export const data_set_trailing_padding = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0xFFFC, 0xFFFC),
  "Data Set Trailing Padding",
  /* @__PURE__ */ toList([/* @__PURE__ */ new OtherByteString()]),
  vm_1,
);

function find_element_in_group_fffc(element) {
  if (element === 0xFFFC) {
    return new Ok(data_set_trailing_padding);
  } else {
    return new Error(undefined);
  }
}

export const item = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0xFFFE, 0xE000),
  "Item",
  /* @__PURE__ */ toList([]),
  vm_1,
);

export const item_delimitation_item = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0xFFFE, 0xE00D),
  "Item Delimitation Item",
  /* @__PURE__ */ toList([]),
  vm_1,
);

export const sequence_delimitation_item = /* @__PURE__ */ new Item(
  /* @__PURE__ */ new DataElementTag(0xFFFE, 0xE0DD),
  "Sequence Delimitation Item",
  /* @__PURE__ */ toList([]),
  vm_1,
);

function find_element_in_group_fffe(element) {
  if (element === 0xE000) {
    return new Ok(item);
  } else if (element === 0xE00D) {
    return new Ok(item_delimitation_item);
  } else if (element === 0xE0DD) {
    return new Ok(sequence_delimitation_item);
  } else {
    return new Error(undefined);
  }
}

export function find(tag, private_creator) {
  let $ = tag.group;
  if ($ === 0x2) {
    return find_element_in_group_0002(tag.element);
  } else if ($ === 0x4) {
    return find_element_in_group_0004(tag.element);
  } else if ($ === 0x6) {
    return find_element_in_group_0006(tag.element);
  } else if ($ === 0x8) {
    return find_element_in_group_0008(tag.element);
  } else if ($ === 0x10) {
    return find_element_in_group_0010(tag.element);
  } else if ($ === 0x12) {
    return find_element_in_group_0012(tag.element);
  } else if ($ === 0x14) {
    return find_element_in_group_0014(tag.element);
  } else if ($ === 0x16) {
    return find_element_in_group_0016(tag.element);
  } else if ($ === 0x18) {
    return find_element_in_group_0018(tag.element);
  } else if ($ === 0x20) {
    return find_element_in_group_0020(tag.element);
  } else if ($ === 0x22) {
    return find_element_in_group_0022(tag.element);
  } else if ($ === 0x24) {
    return find_element_in_group_0024(tag.element);
  } else if ($ === 0x28) {
    return find_element_in_group_0028(tag.element);
  } else if ($ === 0x32) {
    return find_element_in_group_0032(tag.element);
  } else if ($ === 0x34) {
    return find_element_in_group_0034(tag.element);
  } else if ($ === 0x38) {
    return find_element_in_group_0038(tag.element);
  } else if ($ === 0x3A) {
    return find_element_in_group_003a(tag.element);
  } else if ($ === 0x40) {
    return find_element_in_group_0040(tag.element);
  } else if ($ === 0x42) {
    return find_element_in_group_0042(tag.element);
  } else if ($ === 0x44) {
    return find_element_in_group_0044(tag.element);
  } else if ($ === 0x46) {
    return find_element_in_group_0046(tag.element);
  } else if ($ === 0x48) {
    return find_element_in_group_0048(tag.element);
  } else if ($ === 0x50) {
    return find_element_in_group_0050(tag.element);
  } else if ($ === 0x52) {
    return find_element_in_group_0052(tag.element);
  } else if ($ === 0x54) {
    return find_element_in_group_0054(tag.element);
  } else if ($ === 0x60) {
    return find_element_in_group_0060(tag.element);
  } else if ($ === 0x62) {
    return find_element_in_group_0062(tag.element);
  } else if ($ === 0x64) {
    return find_element_in_group_0064(tag.element);
  } else if ($ === 0x66) {
    return find_element_in_group_0066(tag.element);
  } else if ($ === 0x68) {
    return find_element_in_group_0068(tag.element);
  } else if ($ === 0x6A) {
    return find_element_in_group_006a(tag.element);
  } else if ($ === 0x70) {
    return find_element_in_group_0070(tag.element);
  } else if ($ === 0x72) {
    return find_element_in_group_0072(tag.element);
  } else if ($ === 0x74) {
    return find_element_in_group_0074(tag.element);
  } else if ($ === 0x76) {
    return find_element_in_group_0076(tag.element);
  } else if ($ === 0x78) {
    return find_element_in_group_0078(tag.element);
  } else if ($ === 0x80) {
    return find_element_in_group_0080(tag.element);
  } else if ($ === 0x82) {
    return find_element_in_group_0082(tag.element);
  } else if ($ === 0x88) {
    return find_element_in_group_0088(tag.element);
  } else if ($ === 0x100) {
    return find_element_in_group_0100(tag.element);
  } else if ($ === 0x400) {
    return find_element_in_group_0400(tag.element);
  } else if ($ === 0x2000) {
    return find_element_in_group_2000(tag.element);
  } else if ($ === 0x2010) {
    return find_element_in_group_2010(tag.element);
  } else if ($ === 0x2020) {
    return find_element_in_group_2020(tag.element);
  } else if ($ === 0x2030) {
    return find_element_in_group_2030(tag.element);
  } else if ($ === 0x2040) {
    return find_element_in_group_2040(tag.element);
  } else if ($ === 0x2050) {
    return find_element_in_group_2050(tag.element);
  } else if ($ === 0x2100) {
    return find_element_in_group_2100(tag.element);
  } else if ($ === 0x2110) {
    return find_element_in_group_2110(tag.element);
  } else if ($ === 0x2120) {
    return find_element_in_group_2120(tag.element);
  } else if ($ === 0x2130) {
    return find_element_in_group_2130(tag.element);
  } else if ($ === 0x2200) {
    return find_element_in_group_2200(tag.element);
  } else if ($ === 0x3002) {
    return find_element_in_group_3002(tag.element);
  } else if ($ === 0x3004) {
    return find_element_in_group_3004(tag.element);
  } else if ($ === 0x3006) {
    return find_element_in_group_3006(tag.element);
  } else if ($ === 0x3008) {
    return find_element_in_group_3008(tag.element);
  } else if ($ === 0x300A) {
    return find_element_in_group_300a(tag.element);
  } else if ($ === 0x300C) {
    return find_element_in_group_300c(tag.element);
  } else if ($ === 0x300E) {
    return find_element_in_group_300e(tag.element);
  } else if ($ === 0x3010) {
    return find_element_in_group_3010(tag.element);
  } else if ($ === 0x4000) {
    return find_element_in_group_4000(tag.element);
  } else if ($ === 0x4008) {
    return find_element_in_group_4008(tag.element);
  } else if ($ === 0x4010) {
    return find_element_in_group_4010(tag.element);
  } else if ($ === 0x4FFE) {
    return find_element_in_group_4ffe(tag.element);
  } else if ($ === 0x5200) {
    return find_element_in_group_5200(tag.element);
  } else if ($ === 0x5400) {
    return find_element_in_group_5400(tag.element);
  } else if ($ === 0x5600) {
    return find_element_in_group_5600(tag.element);
  } else if ($ === 0x7FE0) {
    return find_element_in_group_7fe0(tag.element);
  } else if ($ === 0xFFFA) {
    return find_element_in_group_fffa(tag.element);
  } else if ($ === 0xFFFC) {
    return find_element_in_group_fffc(tag.element);
  } else if ($ === 0xFFFE) {
    return find_element_in_group_fffe(tag.element);
  } else {
    let $1 = tag.group;
    let $2 = tag.element;
    if ($1 === 0x20 && (($2 >= 0x3100) && ($2 <= 0x31FF))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = source_image_ids;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x400) || ($2 === 0x410)) || ($2 === 0x420)) || ($2 === 0x430)) || ($2 === 0x440)) || ($2 === 0x450)) || ($2 === 0x460)) || ($2 === 0x470)) || ($2 === 0x480)) || ($2 === 0x490)) || ($2 === 0x4A0)) || ($2 === 0x4B0)) || ($2 === 0x4C0)) || ($2 === 0x4D0)) || ($2 === 0x4E0)) || ($2 === 0x4F0))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = rows_for_nth_order_coefficients;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x401) || ($2 === 0x411)) || ($2 === 0x421)) || ($2 === 0x431)) || ($2 === 0x441)) || ($2 === 0x451)) || ($2 === 0x461)) || ($2 === 0x471)) || ($2 === 0x481)) || ($2 === 0x491)) || ($2 === 0x4A1)) || ($2 === 0x4B1)) || ($2 === 0x4C1)) || ($2 === 0x4D1)) || ($2 === 0x4E1)) || ($2 === 0x4F1))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = columns_for_nth_order_coefficients;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x402) || ($2 === 0x412)) || ($2 === 0x422)) || ($2 === 0x432)) || ($2 === 0x442)) || ($2 === 0x452)) || ($2 === 0x462)) || ($2 === 0x472)) || ($2 === 0x482)) || ($2 === 0x492)) || ($2 === 0x4A2)) || ($2 === 0x4B2)) || ($2 === 0x4C2)) || ($2 === 0x4D2)) || ($2 === 0x4E2)) || ($2 === 0x4F2))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = coefficient_coding;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x403) || ($2 === 0x413)) || ($2 === 0x423)) || ($2 === 0x433)) || ($2 === 0x443)) || ($2 === 0x453)) || ($2 === 0x463)) || ($2 === 0x473)) || ($2 === 0x483)) || ($2 === 0x493)) || ($2 === 0x4A3)) || ($2 === 0x4B3)) || ($2 === 0x4C3)) || ($2 === 0x4D3)) || ($2 === 0x4E3)) || ($2 === 0x4F3))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = coefficient_coding_pointers;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x800) || ($2 === 0x810)) || ($2 === 0x820)) || ($2 === 0x830)) || ($2 === 0x840)) || ($2 === 0x850)) || ($2 === 0x860)) || ($2 === 0x870)) || ($2 === 0x880)) || ($2 === 0x890)) || ($2 === 0x8A0)) || ($2 === 0x8B0)) || ($2 === 0x8C0)) || ($2 === 0x8D0)) || ($2 === 0x8E0)) || ($2 === 0x8F0))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = code_label;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x802) || ($2 === 0x812)) || ($2 === 0x822)) || ($2 === 0x832)) || ($2 === 0x842)) || ($2 === 0x852)) || ($2 === 0x862)) || ($2 === 0x872)) || ($2 === 0x882)) || ($2 === 0x892)) || ($2 === 0x8A2)) || ($2 === 0x8B2)) || ($2 === 0x8C2)) || ($2 === 0x8D2)) || ($2 === 0x8E2)) || ($2 === 0x8F2))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = number_of_tables;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x803) || ($2 === 0x813)) || ($2 === 0x823)) || ($2 === 0x833)) || ($2 === 0x843)) || ($2 === 0x853)) || ($2 === 0x863)) || ($2 === 0x873)) || ($2 === 0x883)) || ($2 === 0x893)) || ($2 === 0x8A3)) || ($2 === 0x8B3)) || ($2 === 0x8C3)) || ($2 === 0x8D3)) || ($2 === 0x8E3)) || ($2 === 0x8F3))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = code_table_location;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x804) || ($2 === 0x814)) || ($2 === 0x824)) || ($2 === 0x834)) || ($2 === 0x844)) || ($2 === 0x854)) || ($2 === 0x864)) || ($2 === 0x874)) || ($2 === 0x884)) || ($2 === 0x894)) || ($2 === 0x8A4)) || ($2 === 0x8B4)) || ($2 === 0x8C4)) || ($2 === 0x8D4)) || ($2 === 0x8E4)) || ($2 === 0x8F4))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = bits_for_code_word;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x28 &&
    (((((((((((((((($2 === 0x808) || ($2 === 0x818)) || ($2 === 0x828)) || ($2 === 0x838)) || ($2 === 0x848)) || ($2 === 0x858)) || ($2 === 0x868)) || ($2 === 0x878)) || ($2 === 0x888)) || ($2 === 0x898)) || ($2 === 0x8A8)) || ($2 === 0x8B8)) || ($2 === 0x8C8)) || ($2 === 0x8D8)) || ($2 === 0x8E8)) || ($2 === 0x8F8))) {
      let element = $2;
      return new Ok(
        (() => {
          let _record = image_data_location;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x1010) {
      return new Ok(
        (() => {
          let _record = zonal_map;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x5 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_dimensions;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x10 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = number_of_points;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x20 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = type_of_data;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x22 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_description;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x30 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = axis_units;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x40 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = axis_labels;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x103 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = data_value_representation;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x104 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = minimum_coordinate_value;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x105 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = maximum_coordinate_value;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x106 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_range;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x110 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_data_descriptor;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x112 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = coordinate_start_value;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x114 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = coordinate_step_value;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1001 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_activation_layer;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2000 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = audio_type;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2002 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = audio_sample_format;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2004 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = number_of_channels;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2006 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = number_of_samples;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2008 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = sample_rate;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x200A && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = total_time;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x200C && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = audio_sample_data;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x200E && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = audio_comments;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2500 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_label;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2600 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_referenced_overlay_sequence;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x2610 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_referenced_overlay_group;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x3000 && (($1 >= 0x5000) && ($1 <= 0x50FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = curve_data;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x10 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_rows;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x11 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_columns;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x12 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_planes;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x15 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = number_of_frames_in_overlay;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x22 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_description;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x40 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_type;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x45 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_subtype;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x50 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_origin;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x51 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = image_frame_origin;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x52 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_plane_origin;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x60 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_compression_code;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x61 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_compression_originator;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x62 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_compression_label;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x63 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_compression_description;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x66 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_compression_step_pointers;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x68 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_repeat_interval;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x69 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_bits_grouped;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x100 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_bits_allocated;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x102 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_bit_position;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x110 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_format;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x200 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_location;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x800 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_code_label;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x802 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_number_of_tables;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x803 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_code_table_location;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x804 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_bits_for_code_word;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1001 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_activation_layer;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1100 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_descriptor_gray;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1101 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_descriptor_red;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1102 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_descriptor_green;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1103 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_descriptor_blue;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1200 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlays_gray;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1201 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlays_red;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1202 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlays_green;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1203 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlays_blue;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1301 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = roi_area;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1302 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = roi_mean;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1303 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = roi_standard_deviation;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x1500 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_label;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x3000 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_data;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x4000 && (($1 >= 0x6000) && ($1 <= 0x60FF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = overlay_comments;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x10 && (($1 >= 0x7F00) && ($1 <= 0x7FFF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = variable_pixel_data;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x11 && (($1 >= 0x7F00) && ($1 <= 0x7FFF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = variable_next_data_group;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x20 && (($1 >= 0x7F00) && ($1 <= 0x7FFF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = variable_coefficients_sdvn;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x30 && (($1 >= 0x7F00) && ($1 <= 0x7FFF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = variable_coefficients_sdhn;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($2 === 0x40 && (($1 >= 0x7F00) && ($1 <= 0x7FFF))) {
      let group = $1;
      return new Ok(
        (() => {
          let _record = variable_coefficients_sddn;
          return new Item(tag, _record.name, _record.vrs, _record.multiplicity);
        })(),
      );
    } else if ($1 === 0x1000) {
      let element = $2;
      let $3 = remainderInt(element, 16);
      if ($3 === 0) {
        return new Ok(
          (() => {
            let _record = escape_triplet;
            return new Item(
              tag,
              _record.name,
              _record.vrs,
              _record.multiplicity,
            );
          })(),
        );
      } else if ($3 === 1) {
        return new Ok(
          (() => {
            let _record = run_length_triplet;
            return new Item(
              tag,
              _record.name,
              _record.vrs,
              _record.multiplicity,
            );
          })(),
        );
      } else if ($3 === 2) {
        return new Ok(
          (() => {
            let _record = huffman_table_size;
            return new Item(
              tag,
              _record.name,
              _record.vrs,
              _record.multiplicity,
            );
          })(),
        );
      } else if ($3 === 3) {
        return new Ok(
          (() => {
            let _record = huffman_table_triplet;
            return new Item(
              tag,
              _record.name,
              _record.vrs,
              _record.multiplicity,
            );
          })(),
        );
      } else if ($3 === 4) {
        return new Ok(
          (() => {
            let _record = shift_table_size;
            return new Item(
              tag,
              _record.name,
              _record.vrs,
              _record.multiplicity,
            );
          })(),
        );
      } else if ($3 === 5) {
        return new Ok(
          (() => {
            let _record = shift_table_triplet;
            return new Item(
              tag,
              _record.name,
              _record.vrs,
              _record.multiplicity,
            );
          })(),
        );
      } else {
        return new Error(undefined);
      }
    } else {
      return $bool.guard(
        !$data_element_tag.is_private(tag),
        new Error(undefined),
        () => {
          return $bool.guard(
            $data_element_tag.is_private_creator(tag),
            new Ok(
              new Item(tag, "Private Creator", toList([new LongString()]), vm_1),
            ),
            () => {
              if (private_creator instanceof Some) {
                let private_creator$1 = private_creator[0];
                return find_private(tag, private_creator$1);
              } else {
                return new Error(undefined);
              }
            },
          );
        },
      );
    }
  }
}

export function tag_name(tag, private_creator) {
  let $ = find(tag, private_creator);
  if ($.isOk()) {
    let item$1 = $[0];
    return item$1.name;
  } else {
    let $1 = $data_element_tag.is_private(tag);
    if ($1) {
      return "unknown_private_tag";
    } else {
      return "unknown_tag";
    }
  }
}

export function tag_with_name(tag, private_creator) {
  return ($data_element_tag.to_string(tag) + " ") + tag_name(
    tag,
    private_creator,
  );
}
